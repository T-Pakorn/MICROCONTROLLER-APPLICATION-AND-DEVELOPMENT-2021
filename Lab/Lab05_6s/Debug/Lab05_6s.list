
Lab05_6s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d9c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08006f50  08006f50  00016f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073bc  080073bc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073c4  080073c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c4  080073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080073cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000140  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000031c  2000031c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc01  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002384  00000000  00000000  0002de0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000868  00000000  00000000  00030af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256de  00000000  00000000  00031360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce09  00000000  00000000  00056a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfad2  00000000  00000000  00063847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00143319  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035a4  00000000  00000000  0014336c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f34 	.word	0x08006f34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08006f34 	.word	0x08006f34

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f72:	4b44      	ldr	r3, [pc, #272]	; (8001084 <MX_ADC1_Init+0x124>)
 8000f74:	4a44      	ldr	r2, [pc, #272]	; (8001088 <MX_ADC1_Init+0x128>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f78:	4b42      	ldr	r3, [pc, #264]	; (8001084 <MX_ADC1_Init+0x124>)
 8000f7a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f80:	4b40      	ldr	r3, [pc, #256]	; (8001084 <MX_ADC1_Init+0x124>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f86:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <MX_ADC1_Init+0x124>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f8c:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <MX_ADC1_Init+0x124>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f92:	4b3c      	ldr	r3, [pc, #240]	; (8001084 <MX_ADC1_Init+0x124>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9a:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <MX_ADC1_Init+0x124>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa0:	4b38      	ldr	r3, [pc, #224]	; (8001084 <MX_ADC1_Init+0x124>)
 8000fa2:	4a3a      	ldr	r2, [pc, #232]	; (800108c <MX_ADC1_Init+0x12c>)
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <MX_ADC1_Init+0x124>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <MX_ADC1_Init+0x124>)
 8000fae:	2206      	movs	r2, #6
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <MX_ADC1_Init+0x124>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <MX_ADC1_Init+0x124>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	4830      	ldr	r0, [pc, #192]	; (8001084 <MX_ADC1_Init+0x124>)
 8000fc2:	f000 feed 	bl	8001da0 <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fcc:	f000 fc7c 	bl	80018c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fd0:	230d      	movs	r3, #13
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4828      	ldr	r0, [pc, #160]	; (8001084 <MX_ADC1_Init+0x124>)
 8000fe2:	f001 f83b 	bl	800205c <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fec:	f000 fc6c 	bl	80018c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4821      	ldr	r0, [pc, #132]	; (8001084 <MX_ADC1_Init+0x124>)
 8000ffe:	f001 f82d 	bl	800205c <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001008:	f000 fc5e 	bl	80018c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800100c:	2305      	movs	r3, #5
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001010:	2303      	movs	r3, #3
 8001012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	481a      	ldr	r0, [pc, #104]	; (8001084 <MX_ADC1_Init+0x124>)
 800101a:	f001 f81f 	bl	800205c <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001024:	f000 fc50 	bl	80018c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001028:	2309      	movs	r3, #9
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800102c:	2304      	movs	r3, #4
 800102e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <MX_ADC1_Init+0x124>)
 8001036:	f001 f811 	bl	800205c <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001040:	f000 fc42 	bl	80018c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001044:	2306      	movs	r3, #6
 8001046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001048:	2305      	movs	r3, #5
 800104a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_ADC1_Init+0x124>)
 8001052:	f001 f803 	bl	800205c <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800105c:	f000 fc34 	bl	80018c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001060:	2308      	movs	r3, #8
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001064:	2306      	movs	r3, #6
 8001066:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_ADC1_Init+0x124>)
 800106e:	f000 fff5 	bl	800205c <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001078:	f000 fc26 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000204 	.word	0x20000204
 8001088:	40012000 	.word	0x40012000
 800108c:	0f000001 	.word	0x0f000001

08001090 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_ADC_MspInit+0x158>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	f040 8095 	bne.w	80011de <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6453      	str	r3, [r2, #68]	; 0x44
 80010c4:	4b49      	ldr	r3, [pc, #292]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	4b45      	ldr	r3, [pc, #276]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a44      	ldr	r2, [pc, #272]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
 80010e0:	4b42      	ldr	r3, [pc, #264]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a3d      	ldr	r2, [pc, #244]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a36      	ldr	r2, [pc, #216]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_ADC_MspInit+0x15c>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001124:	2308      	movs	r3, #8
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	482e      	ldr	r0, [pc, #184]	; (80011f0 <HAL_ADC_MspInit+0x160>)
 8001138:	f001 fec2 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800113c:	2368      	movs	r3, #104	; 0x68
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4829      	ldr	r0, [pc, #164]	; (80011f4 <HAL_ADC_MspInit+0x164>)
 8001150:	f001 feb6 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001154:	2303      	movs	r3, #3
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001158:	2303      	movs	r3, #3
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	4824      	ldr	r0, [pc, #144]	; (80011f8 <HAL_ADC_MspInit+0x168>)
 8001168:	f001 feaa 	bl	8002ec0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <HAL_ADC_MspInit+0x170>)
 8001170:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 8001186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 800118e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001192:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 8001196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 800119e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 80011c4:	f001 fb0c 	bl	80027e0 <HAL_DMA_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_ADC_MspInit+0x142>
    {
      Error_Handler();
 80011ce:	f000 fb7b 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 80011d6:	639a      	str	r2, [r3, #56]	; 0x38
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_ADC_MspInit+0x16c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40012000 	.word	0x40012000
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	2000024c 	.word	0x2000024c
 8001200:	40026410 	.word	0x40026410

08001204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x3c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <MX_DMA_Init+0x3c>)
 8001214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2101      	movs	r1, #1
 800122a:	2038      	movs	r0, #56	; 0x38
 800122c:	f001 faa1 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001230:	2038      	movs	r0, #56	; 0x38
 8001232:	f001 faba 	bl	80027aa <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a26      	ldr	r2, [pc, #152]	; (80012fc <MX_GPIO_Init+0xb8>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_GPIO_Init+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_GPIO_Init+0xb8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <MX_GPIO_Init+0xb8>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_GPIO_Init+0xb8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_GPIO_Init+0xb8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <MX_GPIO_Init+0xb8>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_GPIO_Init+0xb8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_GPIO_Init+0xb8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <MX_GPIO_Init+0xb8>)
 80012b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_GPIO_Init+0xb8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <MX_GPIO_Init+0xbc>)
 80012d2:	f001 ffa1 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_GPIO_Init+0xbc>)
 80012f0:	f001 fde6 	bl	8002ec0 <HAL_GPIO_Init>

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40021800 	.word	0x40021800
 8001304:	00000000 	.word	0x00000000

08001308 <get_v_display>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float get_v_display(uint32_t raw_in){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	return ((float)raw_in*3.3)/4095;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131a:	ee17 0a90 	vmov	r0, s15
 800131e:	f7ff f923 	bl	8000568 <__aeabi_f2d>
 8001322:	a30f      	add	r3, pc, #60	; (adr r3, 8001360 <get_v_display+0x58>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f976 	bl	8000618 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	a30c      	add	r3, pc, #48	; (adr r3, 8001368 <get_v_display+0x60>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff fa97 	bl	800086c <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fc3f 	bl	8000bc8 <__aeabi_d2f>
 800134a:	4603      	mov	r3, r0
 800134c:	ee07 3a90 	vmov	s15, r3
}
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	f3af 8000 	nop.w
 8001360:	66666666 	.word	0x66666666
 8001364:	400a6666 	.word	0x400a6666
 8001368:	00000000 	.word	0x00000000
 800136c:	40affe00 	.word	0x40affe00

08001370 <display_out>:

void display_out(uint32_t x[]){
 8001370:	b580      	push	{r7, lr}
 8001372:	b09c      	sub	sp, #112	; 0x70
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	char output[50];
	char vout[50];
	sprintf(output,"0x%08X ",x[0]);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001380:	49cc      	ldr	r1, [pc, #816]	; (80016b4 <display_out+0x344>)
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fbac 	bl	8004ae0 <siprintf>
	sprintf(vout,"%.2f V",get_v_display(x[0]));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ffbb 	bl	8001308 <get_v_display>
 8001392:	ee10 3a10 	vmov	r3, s0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8e6 	bl	8000568 <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	f107 0008 	add.w	r0, r7, #8
 80013a4:	49c4      	ldr	r1, [pc, #784]	; (80016b8 <display_out+0x348>)
 80013a6:	f003 fb9b 	bl	8004ae0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) "ADC1_CH13", strlen("ADC1_CH13"), 100);
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	2209      	movs	r2, #9
 80013ae:	49c3      	ldr	r1, [pc, #780]	; (80016bc <display_out+0x34c>)
 80013b0:	48c3      	ldr	r0, [pc, #780]	; (80016c0 <display_out+0x350>)
 80013b2:	f002 fc30 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " ", strlen(" "), 100);
 80013b6:	2364      	movs	r3, #100	; 0x64
 80013b8:	2201      	movs	r2, #1
 80013ba:	49c2      	ldr	r1, [pc, #776]	; (80016c4 <display_out+0x354>)
 80013bc:	48c0      	ldr	r0, [pc, #768]	; (80016c0 <display_out+0x350>)
 80013be:	f002 fc2a 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) output, strlen(output), 100);
 80013c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7fe ff12 	bl	80001f0 <strlen>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80013d4:	2364      	movs	r3, #100	; 0x64
 80013d6:	48ba      	ldr	r0, [pc, #744]	; (80016c0 <display_out+0x350>)
 80013d8:	f002 fc1d 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) "Vin = ", strlen("Vin = "), 100);
 80013dc:	2364      	movs	r3, #100	; 0x64
 80013de:	2206      	movs	r2, #6
 80013e0:	49b9      	ldr	r1, [pc, #740]	; (80016c8 <display_out+0x358>)
 80013e2:	48b7      	ldr	r0, [pc, #732]	; (80016c0 <display_out+0x350>)
 80013e4:	f002 fc17 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) vout, strlen(vout), 100);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7fe feff 	bl	80001f0 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f107 0108 	add.w	r1, r7, #8
 80013fa:	2364      	movs	r3, #100	; 0x64
 80013fc:	48b0      	ldr	r0, [pc, #704]	; (80016c0 <display_out+0x350>)
 80013fe:	f002 fc0a 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " | ", strlen(" | "), 100);
 8001402:	2364      	movs	r3, #100	; 0x64
 8001404:	2203      	movs	r2, #3
 8001406:	49b1      	ldr	r1, [pc, #708]	; (80016cc <display_out+0x35c>)
 8001408:	48ad      	ldr	r0, [pc, #692]	; (80016c0 <display_out+0x350>)
 800140a:	f002 fc04 	bl	8003c16 <HAL_UART_Transmit>

	sprintf(output,"0x%08X ",x[1]);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001418:	49a6      	ldr	r1, [pc, #664]	; (80016b4 <display_out+0x344>)
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fb60 	bl	8004ae0 <siprintf>
	sprintf(vout,"%.2f V",get_v_display(x[1]));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3304      	adds	r3, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff6e 	bl	8001308 <get_v_display>
 800142c:	ee10 3a10 	vmov	r3, s0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f899 	bl	8000568 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	f107 0008 	add.w	r0, r7, #8
 800143e:	499e      	ldr	r1, [pc, #632]	; (80016b8 <display_out+0x348>)
 8001440:	f003 fb4e 	bl	8004ae0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) "ADC1_CH3", strlen("ADC1_CH3"), 100);
 8001444:	2364      	movs	r3, #100	; 0x64
 8001446:	2208      	movs	r2, #8
 8001448:	49a1      	ldr	r1, [pc, #644]	; (80016d0 <display_out+0x360>)
 800144a:	489d      	ldr	r0, [pc, #628]	; (80016c0 <display_out+0x350>)
 800144c:	f002 fbe3 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " ", strlen(" "), 100);
 8001450:	2364      	movs	r3, #100	; 0x64
 8001452:	2201      	movs	r2, #1
 8001454:	499b      	ldr	r1, [pc, #620]	; (80016c4 <display_out+0x354>)
 8001456:	489a      	ldr	r0, [pc, #616]	; (80016c0 <display_out+0x350>)
 8001458:	f002 fbdd 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) output, strlen(output), 100);
 800145c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe fec5 	bl	80001f0 <strlen>
 8001466:	4603      	mov	r3, r0
 8001468:	b29a      	uxth	r2, r3
 800146a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	4893      	ldr	r0, [pc, #588]	; (80016c0 <display_out+0x350>)
 8001472:	f002 fbd0 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) "Vin = ", strlen("Vin = "), 100);
 8001476:	2364      	movs	r3, #100	; 0x64
 8001478:	2206      	movs	r2, #6
 800147a:	4993      	ldr	r1, [pc, #588]	; (80016c8 <display_out+0x358>)
 800147c:	4890      	ldr	r0, [pc, #576]	; (80016c0 <display_out+0x350>)
 800147e:	f002 fbca 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) vout, strlen(vout), 100);
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe feb2 	bl	80001f0 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f107 0108 	add.w	r1, r7, #8
 8001494:	2364      	movs	r3, #100	; 0x64
 8001496:	488a      	ldr	r0, [pc, #552]	; (80016c0 <display_out+0x350>)
 8001498:	f002 fbbd 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " | ", strlen(" | "), 100);
 800149c:	2364      	movs	r3, #100	; 0x64
 800149e:	2203      	movs	r2, #3
 80014a0:	498a      	ldr	r1, [pc, #552]	; (80016cc <display_out+0x35c>)
 80014a2:	4887      	ldr	r0, [pc, #540]	; (80016c0 <display_out+0x350>)
 80014a4:	f002 fbb7 	bl	8003c16 <HAL_UART_Transmit>

	sprintf(output,"0x%08X ",x[2]);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3308      	adds	r3, #8
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014b2:	4980      	ldr	r1, [pc, #512]	; (80016b4 <display_out+0x344>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fb13 	bl	8004ae0 <siprintf>
	sprintf(vout,"%.2f V",get_v_display(x[2]));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3308      	adds	r3, #8
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff21 	bl	8001308 <get_v_display>
 80014c6:	ee10 3a10 	vmov	r3, s0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f84c 	bl	8000568 <__aeabi_f2d>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	f107 0008 	add.w	r0, r7, #8
 80014d8:	4977      	ldr	r1, [pc, #476]	; (80016b8 <display_out+0x348>)
 80014da:	f003 fb01 	bl	8004ae0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) "ADC1_CH5", strlen("ADC1_CH5"), 100);
 80014de:	2364      	movs	r3, #100	; 0x64
 80014e0:	2208      	movs	r2, #8
 80014e2:	497c      	ldr	r1, [pc, #496]	; (80016d4 <display_out+0x364>)
 80014e4:	4876      	ldr	r0, [pc, #472]	; (80016c0 <display_out+0x350>)
 80014e6:	f002 fb96 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " ", strlen(" "), 100);
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	2201      	movs	r2, #1
 80014ee:	4975      	ldr	r1, [pc, #468]	; (80016c4 <display_out+0x354>)
 80014f0:	4873      	ldr	r0, [pc, #460]	; (80016c0 <display_out+0x350>)
 80014f2:	f002 fb90 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) output, strlen(output), 100);
 80014f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fe78 	bl	80001f0 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	486d      	ldr	r0, [pc, #436]	; (80016c0 <display_out+0x350>)
 800150c:	f002 fb83 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) "Vin = ", strlen("Vin = "), 100);
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	2206      	movs	r2, #6
 8001514:	496c      	ldr	r1, [pc, #432]	; (80016c8 <display_out+0x358>)
 8001516:	486a      	ldr	r0, [pc, #424]	; (80016c0 <display_out+0x350>)
 8001518:	f002 fb7d 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) vout, strlen(vout), 100);
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe65 	bl	80001f0 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f107 0108 	add.w	r1, r7, #8
 800152e:	2364      	movs	r3, #100	; 0x64
 8001530:	4863      	ldr	r0, [pc, #396]	; (80016c0 <display_out+0x350>)
 8001532:	f002 fb70 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " | ", strlen(" | "), 100);
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	2203      	movs	r2, #3
 800153a:	4964      	ldr	r1, [pc, #400]	; (80016cc <display_out+0x35c>)
 800153c:	4860      	ldr	r0, [pc, #384]	; (80016c0 <display_out+0x350>)
 800153e:	f002 fb6a 	bl	8003c16 <HAL_UART_Transmit>

	sprintf(output,"0x%08X ",x[3]);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	330c      	adds	r3, #12
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800154c:	4959      	ldr	r1, [pc, #356]	; (80016b4 <display_out+0x344>)
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fac6 	bl	8004ae0 <siprintf>
	sprintf(vout,"%.2f V",get_v_display(x[3]));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	330c      	adds	r3, #12
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fed4 	bl	8001308 <get_v_display>
 8001560:	ee10 3a10 	vmov	r3, s0
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffff 	bl	8000568 <__aeabi_f2d>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	f107 0008 	add.w	r0, r7, #8
 8001572:	4951      	ldr	r1, [pc, #324]	; (80016b8 <display_out+0x348>)
 8001574:	f003 fab4 	bl	8004ae0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) "ADC1_CH6", strlen("ADC1_CH6"), 100);
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	2208      	movs	r2, #8
 800157c:	4956      	ldr	r1, [pc, #344]	; (80016d8 <display_out+0x368>)
 800157e:	4850      	ldr	r0, [pc, #320]	; (80016c0 <display_out+0x350>)
 8001580:	f002 fb49 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " ", strlen(" "), 100);
 8001584:	2364      	movs	r3, #100	; 0x64
 8001586:	2201      	movs	r2, #1
 8001588:	494e      	ldr	r1, [pc, #312]	; (80016c4 <display_out+0x354>)
 800158a:	484d      	ldr	r0, [pc, #308]	; (80016c0 <display_out+0x350>)
 800158c:	f002 fb43 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) output, strlen(output), 100);
 8001590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe2b 	bl	80001f0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	4846      	ldr	r0, [pc, #280]	; (80016c0 <display_out+0x350>)
 80015a6:	f002 fb36 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) "Vin = ", strlen("Vin = "), 100);
 80015aa:	2364      	movs	r3, #100	; 0x64
 80015ac:	2206      	movs	r2, #6
 80015ae:	4946      	ldr	r1, [pc, #280]	; (80016c8 <display_out+0x358>)
 80015b0:	4843      	ldr	r0, [pc, #268]	; (80016c0 <display_out+0x350>)
 80015b2:	f002 fb30 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) vout, strlen(vout), 100);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe fe18 	bl	80001f0 <strlen>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f107 0108 	add.w	r1, r7, #8
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	483d      	ldr	r0, [pc, #244]	; (80016c0 <display_out+0x350>)
 80015cc:	f002 fb23 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " | ", strlen(" | "), 100);
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	2203      	movs	r2, #3
 80015d4:	493d      	ldr	r1, [pc, #244]	; (80016cc <display_out+0x35c>)
 80015d6:	483a      	ldr	r0, [pc, #232]	; (80016c0 <display_out+0x350>)
 80015d8:	f002 fb1d 	bl	8003c16 <HAL_UART_Transmit>

	sprintf(output,"0x%08X ",x[4]);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3310      	adds	r3, #16
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015e6:	4933      	ldr	r1, [pc, #204]	; (80016b4 <display_out+0x344>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fa79 	bl	8004ae0 <siprintf>
	sprintf(vout,"%.2f V",get_v_display(x[4]));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3310      	adds	r3, #16
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fe87 	bl	8001308 <get_v_display>
 80015fa:	ee10 3a10 	vmov	r3, s0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffb2 	bl	8000568 <__aeabi_f2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	f107 0008 	add.w	r0, r7, #8
 800160c:	492a      	ldr	r1, [pc, #168]	; (80016b8 <display_out+0x348>)
 800160e:	f003 fa67 	bl	8004ae0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) "ADC1_CH8", strlen("ADC1_CH8"), 100);
 8001612:	2364      	movs	r3, #100	; 0x64
 8001614:	2208      	movs	r2, #8
 8001616:	4931      	ldr	r1, [pc, #196]	; (80016dc <display_out+0x36c>)
 8001618:	4829      	ldr	r0, [pc, #164]	; (80016c0 <display_out+0x350>)
 800161a:	f002 fafc 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " ", strlen(" "), 100);
 800161e:	2364      	movs	r3, #100	; 0x64
 8001620:	2201      	movs	r2, #1
 8001622:	4928      	ldr	r1, [pc, #160]	; (80016c4 <display_out+0x354>)
 8001624:	4826      	ldr	r0, [pc, #152]	; (80016c0 <display_out+0x350>)
 8001626:	f002 faf6 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) output, strlen(output), 100);
 800162a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fdde 	bl	80001f0 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800163c:	2364      	movs	r3, #100	; 0x64
 800163e:	4820      	ldr	r0, [pc, #128]	; (80016c0 <display_out+0x350>)
 8001640:	f002 fae9 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) "Vin = ", strlen("Vin = "), 100);
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	2206      	movs	r2, #6
 8001648:	491f      	ldr	r1, [pc, #124]	; (80016c8 <display_out+0x358>)
 800164a:	481d      	ldr	r0, [pc, #116]	; (80016c0 <display_out+0x350>)
 800164c:	f002 fae3 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) vout, strlen(vout), 100);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fdcb 	bl	80001f0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 0108 	add.w	r1, r7, #8
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	4816      	ldr	r0, [pc, #88]	; (80016c0 <display_out+0x350>)
 8001666:	f002 fad6 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " | ", strlen(" | "), 100);
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	2203      	movs	r2, #3
 800166e:	4917      	ldr	r1, [pc, #92]	; (80016cc <display_out+0x35c>)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <display_out+0x350>)
 8001672:	f002 fad0 	bl	8003c16 <HAL_UART_Transmit>

	sprintf(output,"0x%08X ",x[5]);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3314      	adds	r3, #20
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <display_out+0x344>)
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fa2c 	bl	8004ae0 <siprintf>
	sprintf(vout,"%.2f V",get_v_display(x[5]));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3314      	adds	r3, #20
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fe3a 	bl	8001308 <get_v_display>
 8001694:	ee10 3a10 	vmov	r3, s0
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff65 	bl	8000568 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	f107 0008 	add.w	r0, r7, #8
 80016a6:	4904      	ldr	r1, [pc, #16]	; (80016b8 <display_out+0x348>)
 80016a8:	f003 fa1a 	bl	8004ae0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) "ADC1_CH9", strlen("ADC1_CH9"), 100);
 80016ac:	2364      	movs	r3, #100	; 0x64
 80016ae:	2208      	movs	r2, #8
 80016b0:	e016      	b.n	80016e0 <display_out+0x370>
 80016b2:	bf00      	nop
 80016b4:	08006f50 	.word	0x08006f50
 80016b8:	08006f58 	.word	0x08006f58
 80016bc:	08006f60 	.word	0x08006f60
 80016c0:	200002c4 	.word	0x200002c4
 80016c4:	08006f6c 	.word	0x08006f6c
 80016c8:	08006f70 	.word	0x08006f70
 80016cc:	08006f78 	.word	0x08006f78
 80016d0:	08006f7c 	.word	0x08006f7c
 80016d4:	08006f88 	.word	0x08006f88
 80016d8:	08006f94 	.word	0x08006f94
 80016dc:	08006fa0 	.word	0x08006fa0
 80016e0:	491b      	ldr	r1, [pc, #108]	; (8001750 <display_out+0x3e0>)
 80016e2:	481c      	ldr	r0, [pc, #112]	; (8001754 <display_out+0x3e4>)
 80016e4:	f002 fa97 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) " ", strlen(" "), 100);
 80016e8:	2364      	movs	r3, #100	; 0x64
 80016ea:	2201      	movs	r2, #1
 80016ec:	491a      	ldr	r1, [pc, #104]	; (8001758 <display_out+0x3e8>)
 80016ee:	4819      	ldr	r0, [pc, #100]	; (8001754 <display_out+0x3e4>)
 80016f0:	f002 fa91 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) output, strlen(output), 100);
 80016f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fd79 	bl	80001f0 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	4812      	ldr	r0, [pc, #72]	; (8001754 <display_out+0x3e4>)
 800170a:	f002 fa84 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) "Vin = ", strlen("Vin = "), 100);
 800170e:	2364      	movs	r3, #100	; 0x64
 8001710:	2206      	movs	r2, #6
 8001712:	4912      	ldr	r1, [pc, #72]	; (800175c <display_out+0x3ec>)
 8001714:	480f      	ldr	r0, [pc, #60]	; (8001754 <display_out+0x3e4>)
 8001716:	f002 fa7e 	bl	8003c16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) vout, strlen(vout), 100);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fd66 	bl	80001f0 <strlen>
 8001724:	4603      	mov	r3, r0
 8001726:	b29a      	uxth	r2, r3
 8001728:	f107 0108 	add.w	r1, r7, #8
 800172c:	2364      	movs	r3, #100	; 0x64
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <display_out+0x3e4>)
 8001730:	f002 fa71 	bl	8003c16 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", strlen("\r\n"), 100);
 8001734:	2364      	movs	r3, #100	; 0x64
 8001736:	2202      	movs	r2, #2
 8001738:	4909      	ldr	r1, [pc, #36]	; (8001760 <display_out+0x3f0>)
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <display_out+0x3e4>)
 800173c:	f002 fa6b 	bl	8003c16 <HAL_UART_Transmit>
	HAL_Delay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f000 fb09 	bl	8001d58 <HAL_Delay>
}
 8001746:	bf00      	nop
 8001748:	3770      	adds	r7, #112	; 0x70
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08006fac 	.word	0x08006fac
 8001754:	200002c4 	.word	0x200002c4
 8001758:	08006f6c 	.word	0x08006f6c
 800175c:	08006f70 	.word	0x08006f70
 8001760:	08006fb8 	.word	0x08006fb8

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001768:	f000 fa84 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176c:	f000 f812 	bl	8001794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001770:	f7ff fd68 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 8001774:	f7ff fd46 	bl	8001204 <MX_DMA_Init>
  MX_ADC1_Init();
 8001778:	f7ff fbf2 	bl	8000f60 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800177c:	f000 f9de 	bl	8001b3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&raw_adc_buffer,6);
 8001780:	2206      	movs	r2, #6
 8001782:	4902      	ldr	r1, [pc, #8]	; (800178c <main+0x28>)
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <main+0x2c>)
 8001786:	f000 fb4f 	bl	8001e28 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800178a:	e7fe      	b.n	800178a <main+0x26>
 800178c:	200002ac 	.word	0x200002ac
 8001790:	20000204 	.word	0x20000204

08001794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b094      	sub	sp, #80	; 0x50
 8001798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	2230      	movs	r2, #48	; 0x30
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fd2a 	bl	80041fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <SystemClock_Config+0xd8>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a2a      	ldr	r2, [pc, #168]	; (800186c <SystemClock_Config+0xd8>)
 80017c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <SystemClock_Config+0xd8>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <SystemClock_Config+0xdc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a24      	ldr	r2, [pc, #144]	; (8001870 <SystemClock_Config+0xdc>)
 80017de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <SystemClock_Config+0xdc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f0:	2302      	movs	r3, #2
 80017f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f4:	2301      	movs	r3, #1
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f8:	2310      	movs	r3, #16
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fc:	2302      	movs	r3, #2
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001800:	2300      	movs	r3, #0
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001804:	2308      	movs	r3, #8
 8001806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001808:	23b4      	movs	r3, #180	; 0xb4
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800180c:	2302      	movs	r3, #2
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001810:	2304      	movs	r3, #4
 8001812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001814:	f107 0320 	add.w	r3, r7, #32
 8001818:	4618      	mov	r0, r3
 800181a:	f001 fd67 	bl	80032ec <HAL_RCC_OscConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001824:	f000 f850 	bl	80018c8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001828:	f001 fd10 	bl	800324c <HAL_PWREx_EnableOverDrive>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001832:	f000 f849 	bl	80018c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001836:	230f      	movs	r3, #15
 8001838:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183a:	2302      	movs	r3, #2
 800183c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001842:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2105      	movs	r1, #5
 8001854:	4618      	mov	r0, r3
 8001856:	f001 ffc1 	bl	80037dc <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001860:	f000 f832 	bl	80018c8 <Error_Handler>
  }
}
 8001864:	bf00      	nop
 8001866:	3750      	adds	r7, #80	; 0x50
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,1);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001884:	f001 fcc8 	bl	8003218 <HAL_GPIO_WritePin>
	display_out(raw_adc_buffer);
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800188a:	f7ff fd71 	bl	8001370 <display_out>
	HAL_Delay(1000);
 800188e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001892:	f000 fa61 	bl	8001d58 <HAL_Delay>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021800 	.word	0x40021800
 80018a4:	200002ac 	.word	0x200002ac

080018a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80018b8:	f001 fcae 	bl	8003218 <HAL_GPIO_WritePin>
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&raw_adc_buffer,1);
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021800 	.word	0x40021800

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001912:	2005      	movs	r0, #5
 8001914:	f000 ff22 	bl	800275c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f9d2 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <DMA2_Stream0_IRQHandler+0x10>)
 800197e:	f001 f835 	bl	80029ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000024c 	.word	0x2000024c

0800198c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	return 1;
 8001990:	2301      	movs	r3, #1
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_kill>:

int _kill(int pid, int sig)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019a6:	f002 fbff 	bl	80041a8 <__errno>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2216      	movs	r2, #22
 80019ae:	601a      	str	r2, [r3, #0]
	return -1;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_exit>:

void _exit (int status)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ffe7 	bl	800199c <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ce:	e7fe      	b.n	80019ce <_exit+0x12>

080019d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e00a      	b.n	80019f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019e2:	f3af 8000 	nop.w
 80019e6:	4601      	mov	r1, r0
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	b2ca      	uxtb	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf0      	blt.n	80019e2 <_read+0x12>
	}

return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e009      	b.n	8001a30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbf1      	blt.n	8001a1c <_write+0x12>
	}
	return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_close>:

int _close(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	return -1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <_isatty>:

int _isatty(int file)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	return 1;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f002 fb64 	bl	80041a8 <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20030000 	.word	0x20030000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	200001f8 	.word	0x200001f8
 8001b14:	20000320 	.word	0x20000320

08001b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <SystemInit+0x20>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <SystemInit+0x20>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_USART1_UART_Init+0x50>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b74:	f002 f802 	bl	8003b7c <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b7e:	f7ff fea3 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200002c4 	.word	0x200002c4
 8001b8c:	40011000 	.word	0x40011000

08001b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_UART_MspInit+0x84>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d12c      	bne.n	8001c0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bbc:	f043 0310 	orr.w	r3, r3, #16
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_UART_MspInit+0x8c>)
 8001c08:	f001 f95a 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c26:	490e      	ldr	r1, [pc, #56]	; (8001c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c28:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c3c:	4c0b      	ldr	r4, [pc, #44]	; (8001c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c4a:	f7ff ff65 	bl	8001b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f002 fab1 	bl	80041b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7ff fd87 	bl	8001764 <main>
  bx  lr    
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c58:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c64:	080073cc 	.word	0x080073cc
  ldr r2, =_sbss
 8001c68:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c6c:	2000031c 	.word	0x2000031c

08001c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_Init+0x40>)
 8001c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_Init+0x40>)
 8001c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_Init+0x40>)
 8001c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 fd5d 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f000 f808 	bl	8001cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff fe14 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_InitTick+0x54>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x58>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fd75 	bl	80027c6 <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f000 fd3d 	bl	8002772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_InitTick+0x5c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_IncTick+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_IncTick+0x24>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000308 	.word	0x20000308

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000308 	.word	0x20000308

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008

08001da0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e033      	b.n	8001e1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff f966 	bl	8001090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d118      	bne.n	8001e10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001de6:	f023 0302 	bic.w	r3, r3, #2
 8001dea:	f043 0202 	orr.w	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fa64 	bl	80022c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f023 0303 	bic.w	r3, r3, #3
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0e:	e001      	b.n	8001e14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Start_DMA+0x1e>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e0e9      	b.n	800201a <HAL_ADC_Start_DMA+0x1f2>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d018      	beq.n	8001e8e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e6c:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_ADC_Start_DMA+0x1fc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6d      	ldr	r2, [pc, #436]	; (8002028 <HAL_ADC_Start_DMA+0x200>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9a      	lsrs	r2, r3, #18
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e80:	e002      	b.n	8001e88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9c:	d107      	bne.n	8001eae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 80a1 	bne.w	8002000 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efc:	d106      	bne.n	8001f0c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f023 0206 	bic.w	r2, r3, #6
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
 8001f0a:	e002      	b.n	8001f12 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f1a:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_ADC_Start_DMA+0x204>)
 8001f1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	4a43      	ldr	r2, [pc, #268]	; (8002030 <HAL_ADC_Start_DMA+0x208>)
 8001f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	4a42      	ldr	r2, [pc, #264]	; (8002034 <HAL_ADC_Start_DMA+0x20c>)
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	4a41      	ldr	r2, [pc, #260]	; (8002038 <HAL_ADC_Start_DMA+0x210>)
 8001f34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	334c      	adds	r3, #76	; 0x4c
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f000 fce4 	bl	800293c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d12a      	bne.n	8001fd6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a2d      	ldr	r2, [pc, #180]	; (800203c <HAL_ADC_Start_DMA+0x214>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d015      	beq.n	8001fb6 <HAL_ADC_Start_DMA+0x18e>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <HAL_ADC_Start_DMA+0x218>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_Start_DMA+0x178>
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_ADC_Start_DMA+0x204>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_ADC_Start_DMA+0x21c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d136      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_ADC_Start_DMA+0x204>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d130      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d129      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	e020      	b.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_ADC_Start_DMA+0x214>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d11b      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d114      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	e00b      	b.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f043 0210 	orr.w	r2, r3, #16
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000
 8002028:	431bde83 	.word	0x431bde83
 800202c:	40012300 	.word	0x40012300
 8002030:	080024b9 	.word	0x080024b9
 8002034:	08002573 	.word	0x08002573
 8002038:	0800258f 	.word	0x0800258f
 800203c:	40012000 	.word	0x40012000
 8002040:	40012100 	.word	0x40012100
 8002044:	40012200 	.word	0x40012200

08002048 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1c>
 8002074:	2302      	movs	r3, #2
 8002076:	e113      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x244>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b09      	cmp	r3, #9
 8002086:	d925      	bls.n	80020d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	3b1e      	subs	r3, #30
 800209e:	2207      	movs	r2, #7
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43da      	mvns	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	400a      	ands	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68d9      	ldr	r1, [r3, #12]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	4603      	mov	r3, r0
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4403      	add	r3, r0
 80020c6:	3b1e      	subs	r3, #30
 80020c8:	409a      	lsls	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	e022      	b.n	800211a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	2207      	movs	r2, #7
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	4603      	mov	r3, r0
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4403      	add	r3, r0
 8002110:	409a      	lsls	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d824      	bhi.n	800216c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b05      	subs	r3, #5
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	400a      	ands	r2, r1
 8002142:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b05      	subs	r3, #5
 800215e:	fa00 f203 	lsl.w	r2, r0, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	635a      	str	r2, [r3, #52]	; 0x34
 800216a:	e04c      	b.n	8002206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d824      	bhi.n	80021be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b23      	subs	r3, #35	; 0x23
 8002186:	221f      	movs	r2, #31
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43da      	mvns	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	400a      	ands	r2, r1
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b23      	subs	r3, #35	; 0x23
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
 80021bc:	e023      	b.n	8002206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b41      	subs	r3, #65	; 0x41
 80021d0:	221f      	movs	r2, #31
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b41      	subs	r3, #65	; 0x41
 80021fa:	fa00 f203 	lsl.w	r2, r0, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <HAL_ADC_ConfigChannel+0x250>)
 8002208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <HAL_ADC_ConfigChannel+0x254>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d10f      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1d8>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b12      	cmp	r3, #18
 800221a:	d10b      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_ADC_ConfigChannel+0x254>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d12b      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x23a>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_ADC_ConfigChannel+0x258>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x1f4>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b11      	cmp	r3, #17
 800224e:	d122      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_ADC_ConfigChannel+0x258>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d111      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_ADC_ConfigChannel+0x25c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_ADC_ConfigChannel+0x260>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	0c9a      	lsrs	r2, r3, #18
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002288:	e002      	b.n	8002290 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3b01      	subs	r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f9      	bne.n	800228a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40012300 	.word	0x40012300
 80022b0:	40012000 	.word	0x40012000
 80022b4:	10000012 	.word	0x10000012
 80022b8:	20000000 	.word	0x20000000
 80022bc:	431bde83 	.word	0x431bde83

080022c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c8:	4b79      	ldr	r3, [pc, #484]	; (80024b0 <ADC_Init+0x1f0>)
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	021a      	lsls	r2, r3, #8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6899      	ldr	r1, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	4a58      	ldr	r2, [pc, #352]	; (80024b4 <ADC_Init+0x1f4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d022      	beq.n	800239e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002366:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e00f      	b.n	80023be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0202 	bic.w	r2, r2, #2
 80023cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6899      	ldr	r1, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7e1b      	ldrb	r3, [r3, #24]
 80023d8:	005a      	lsls	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800240a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	3b01      	subs	r3, #1
 8002418:	035a      	lsls	r2, r3, #13
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	e007      	b.n	8002434 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002432:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	3b01      	subs	r3, #1
 8002450:	051a      	lsls	r2, r3, #20
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6899      	ldr	r1, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002476:	025a      	lsls	r2, r3, #9
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	029a      	lsls	r2, r3, #10
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40012300 	.word	0x40012300
 80024b4:	0f000001 	.word	0x0f000001

080024b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d13c      	bne.n	800254c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d12b      	bne.n	8002544 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d127      	bne.n	8002544 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800250c:	2b00      	cmp	r3, #0
 800250e:	d119      	bne.n	8002544 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0220 	bic.w	r2, r2, #32
 800251e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7ff f9af 	bl	80018a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800254a:	e00e      	b.n	800256a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f7ff fd75 	bl	8002048 <HAL_ADC_ErrorCallback>
}
 800255e:	e004      	b.n	800256a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff f977 	bl	8001874 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f043 0204 	orr.w	r2, r3, #4
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7ff fd4a 	bl	8002048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4907      	ldr	r1, [pc, #28]	; (8002658 <__NVIC_EnableIRQ+0x38>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
         );
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f7ff ff8e 	bl	800265c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff29 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff3e 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff8e 	bl	80026b0 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5d 	bl	800265c <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff31 	bl	8002620 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffa2 	bl	8002718 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff faa8 	bl	8001d40 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e099      	b.n	8002930 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281c:	e00f      	b.n	800283e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800281e:	f7ff fa8f 	bl	8001d40 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b05      	cmp	r3, #5
 800282a:	d908      	bls.n	800283e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e078      	b.n	8002930 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e8      	bne.n	800281e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_DMA_Init+0x158>)
 8002858:	4013      	ands	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2b04      	cmp	r3, #4
 8002896:	d107      	bne.n	80028a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4313      	orrs	r3, r2
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f023 0307 	bic.w	r3, r3, #7
 80028be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d117      	bne.n	8002902 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00e      	beq.n	8002902 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fa6f 	bl	8002dc8 <DMA_CheckFifoParam>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028fe:	2301      	movs	r3, #1
 8002900:	e016      	b.n	8002930 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa26 	bl	8002d5c <DMA_CalcBaseAndBitshift>
 8002910:	4603      	mov	r3, r0
 8002912:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	223f      	movs	r2, #63	; 0x3f
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	f010803f 	.word	0xf010803f

0800293c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_DMA_Start_IT+0x26>
 800295e:	2302      	movs	r3, #2
 8002960:	e040      	b.n	80029e4 <HAL_DMA_Start_IT+0xa8>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d12f      	bne.n	80029d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f9b8 	bl	8002d00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	223f      	movs	r2, #63	; 0x3f
 8002996:	409a      	lsls	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0216 	orr.w	r2, r2, #22
 80029aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0208 	orr.w	r2, r2, #8
 80029c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e005      	b.n	80029e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029de:	2302      	movs	r3, #2
 80029e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029f8:	4b92      	ldr	r3, [pc, #584]	; (8002c44 <HAL_DMA_IRQHandler+0x258>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a92      	ldr	r2, [pc, #584]	; (8002c48 <HAL_DMA_IRQHandler+0x25c>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a9b      	lsrs	r3, r3, #10
 8002a04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	2208      	movs	r2, #8
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01a      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	2208      	movs	r2, #8
 8002a46:	409a      	lsls	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	f043 0202 	orr.w	r2, r3, #2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	2204      	movs	r2, #4
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d012      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f043 0204 	orr.w	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	2210      	movs	r2, #16
 8002aca:	409a      	lsls	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d043      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d03c      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d018      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d108      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d024      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
 8002b1a:	e01f      	b.n	8002b5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01b      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
 8002b2c:	e016      	b.n	8002b5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0208 	bic.w	r2, r2, #8
 8002b4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2220      	movs	r2, #32
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 808e 	beq.w	8002c8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8086 	beq.w	8002c8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	2220      	movs	r2, #32
 8002b84:	409a      	lsls	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d136      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0216 	bic.w	r2, r2, #22
 8002ba4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <HAL_DMA_IRQHandler+0x1da>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0208 	bic.w	r2, r2, #8
 8002bd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	223f      	movs	r2, #63	; 0x3f
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d07d      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
        }
        return;
 8002c02:	e078      	b.n	8002cf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01c      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d108      	bne.n	8002c32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d030      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
 8002c30:	e02b      	b.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d027      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
 8002c42:	e022      	b.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
 8002c44:	20000000 	.word	0x20000000
 8002c48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0210 	bic.w	r2, r2, #16
 8002c68:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d032      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d022      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d307      	bcc.n	8002cd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f2      	bne.n	8002cb6 <HAL_DMA_IRQHandler+0x2ca>
 8002cd0:	e000      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cd2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
 8002cf4:	e000      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cf6:	bf00      	nop
    }
  }
}
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop

08002d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d108      	bne.n	8002d40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d3e:	e007      	b.n	8002d50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3b10      	subs	r3, #16
 8002d6c:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d909      	bls.n	8002d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d92:	f023 0303 	bic.w	r3, r3, #3
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d9c:	e007      	b.n	8002dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	aaaaaaab 	.word	0xaaaaaaab
 8002dc4:	08006fd4 	.word	0x08006fd4

08002dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11f      	bne.n	8002e22 <DMA_CheckFifoParam+0x5a>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d856      	bhi.n	8002e96 <DMA_CheckFifoParam+0xce>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <DMA_CheckFifoParam+0x28>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e13 	.word	0x08002e13
 8002df8:	08002e01 	.word	0x08002e01
 8002dfc:	08002e97 	.word	0x08002e97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d046      	beq.n	8002e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e10:	e043      	b.n	8002e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e1a:	d140      	bne.n	8002e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e20:	e03d      	b.n	8002e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2a:	d121      	bne.n	8002e70 <DMA_CheckFifoParam+0xa8>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d837      	bhi.n	8002ea2 <DMA_CheckFifoParam+0xda>
 8002e32:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <DMA_CheckFifoParam+0x70>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e49 	.word	0x08002e49
 8002e3c:	08002e4f 	.word	0x08002e4f
 8002e40:	08002e49 	.word	0x08002e49
 8002e44:	08002e61 	.word	0x08002e61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4c:	e030      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d025      	beq.n	8002ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5e:	e022      	b.n	8002ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e68:	d11f      	bne.n	8002eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e6e:	e01c      	b.n	8002eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d903      	bls.n	8002e7e <DMA_CheckFifoParam+0xb6>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d003      	beq.n	8002e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e7c:	e018      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      break;
 8002e82:	e015      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      break;
 8002e94:	e00b      	b.n	8002eae <DMA_CheckFifoParam+0xe6>
      break;
 8002e96:	bf00      	nop
 8002e98:	e00a      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e008      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e006      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e004      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eae:	bf00      	nop
    }
  } 
  
  return status; 
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e177      	b.n	80031cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f040 8166 	bne.w	80031c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d005      	beq.n	8002f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d130      	bne.n	8002f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 0201 	and.w	r2, r3, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d017      	beq.n	8002fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d123      	bne.n	8003004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80c0 	beq.w	80031c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <HAL_GPIO_Init+0x324>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003062:	4a61      	ldr	r2, [pc, #388]	; (80031e8 <HAL_GPIO_Init+0x328>)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a58      	ldr	r2, [pc, #352]	; (80031ec <HAL_GPIO_Init+0x32c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d037      	beq.n	80030fe <HAL_GPIO_Init+0x23e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <HAL_GPIO_Init+0x330>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d031      	beq.n	80030fa <HAL_GPIO_Init+0x23a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a56      	ldr	r2, [pc, #344]	; (80031f4 <HAL_GPIO_Init+0x334>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02b      	beq.n	80030f6 <HAL_GPIO_Init+0x236>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a55      	ldr	r2, [pc, #340]	; (80031f8 <HAL_GPIO_Init+0x338>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x232>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a54      	ldr	r2, [pc, #336]	; (80031fc <HAL_GPIO_Init+0x33c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x22e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a53      	ldr	r2, [pc, #332]	; (8003200 <HAL_GPIO_Init+0x340>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x22a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x344>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_GPIO_Init+0x348>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_GPIO_Init+0x34c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_GPIO_Init+0x350>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x21a>
 80030d6:	2309      	movs	r3, #9
 80030d8:	e012      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030da:	230a      	movs	r3, #10
 80030dc:	e010      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030de:	2308      	movs	r3, #8
 80030e0:	e00e      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e00c      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e6:	2306      	movs	r3, #6
 80030e8:	e00a      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ea:	2305      	movs	r3, #5
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	; (80031e8 <HAL_GPIO_Init+0x328>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003142:	4a34      	ldr	r2, [pc, #208]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_GPIO_Init+0x354>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800316c:	4a29      	ldr	r2, [pc, #164]	; (8003214 <HAL_GPIO_Init+0x354>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_GPIO_Init+0x354>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_GPIO_Init+0x354>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f ae84 	bls.w	8002edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40021400 	.word	0x40021400
 8003204:	40021800 	.word	0x40021800
 8003208:	40021c00 	.word	0x40021c00
 800320c:	40022000 	.word	0x40022000
 8003210:	40022400 	.word	0x40022400
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003234:	e003      	b.n	800323e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	041a      	lsls	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_PWREx_EnableOverDrive+0x90>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003278:	f7fe fd62 	bl	8001d40 <HAL_GetTick>
 800327c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800327e:	e009      	b.n	8003294 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003280:	f7fe fd5e 	bl	8001d40 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800328e:	d901      	bls.n	8003294 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e01f      	b.n	80032d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d1ee      	bne.n	8003280 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a8:	f7fe fd4a 	bl	8001d40 <HAL_GetTick>
 80032ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ae:	e009      	b.n	80032c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032b0:	f7fe fd46 	bl	8001d40 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032be:	d901      	bls.n	80032c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e007      	b.n	80032d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032d0:	d1ee      	bne.n	80032b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	420e0040 	.word	0x420e0040
 80032e4:	40007000 	.word	0x40007000
 80032e8:	420e0044 	.word	0x420e0044

080032ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e264      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d075      	beq.n	80033f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800330a:	4ba3      	ldr	r3, [pc, #652]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b04      	cmp	r3, #4
 8003314:	d00c      	beq.n	8003330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003316:	4ba0      	ldr	r3, [pc, #640]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800331e:	2b08      	cmp	r3, #8
 8003320:	d112      	bne.n	8003348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003322:	4b9d      	ldr	r3, [pc, #628]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800332e:	d10b      	bne.n	8003348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	4b99      	ldr	r3, [pc, #612]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d05b      	beq.n	80033f4 <HAL_RCC_OscConfig+0x108>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d157      	bne.n	80033f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e23f      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003350:	d106      	bne.n	8003360 <HAL_RCC_OscConfig+0x74>
 8003352:	4b91      	ldr	r3, [pc, #580]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a90      	ldr	r2, [pc, #576]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01d      	b.n	800339c <HAL_RCC_OscConfig+0xb0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0x98>
 800336a:	4b8b      	ldr	r3, [pc, #556]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a8a      	ldr	r2, [pc, #552]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b88      	ldr	r3, [pc, #544]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a87      	ldr	r2, [pc, #540]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0xb0>
 8003384:	4b84      	ldr	r3, [pc, #528]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a83      	ldr	r2, [pc, #524]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b81      	ldr	r3, [pc, #516]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a80      	ldr	r2, [pc, #512]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fccc 	bl	8001d40 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe fcc8 	bl	8001d40 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e204      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b76      	ldr	r3, [pc, #472]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0xc0>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe fcb8 	bl	8001d40 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe fcb4 	bl	8001d40 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1f0      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	4b6c      	ldr	r3, [pc, #432]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0xe8>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003402:	4b65      	ldr	r3, [pc, #404]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340e:	4b62      	ldr	r3, [pc, #392]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003416:	2b08      	cmp	r3, #8
 8003418:	d11c      	bne.n	8003454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341a:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x152>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e1c4      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b56      	ldr	r3, [pc, #344]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4952      	ldr	r1, [pc, #328]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	e03a      	b.n	80034ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345c:	4b4f      	ldr	r3, [pc, #316]	; (800359c <HAL_RCC_OscConfig+0x2b0>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe fc6d 	bl	8001d40 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800346a:	f7fe fc69 	bl	8001d40 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1a5      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	4b46      	ldr	r3, [pc, #280]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b43      	ldr	r3, [pc, #268]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4940      	ldr	r1, [pc, #256]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b3f      	ldr	r3, [pc, #252]	; (800359c <HAL_RCC_OscConfig+0x2b0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fc4c 	bl	8001d40 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fe fc48 	bl	8001d40 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e184      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	4b36      	ldr	r3, [pc, #216]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d030      	beq.n	8003538 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034de:	4b30      	ldr	r3, [pc, #192]	; (80035a0 <HAL_RCC_OscConfig+0x2b4>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fc2c 	bl	8001d40 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fe fc28 	bl	8001d40 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e164      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x200>
 800350a:	e015      	b.n	8003538 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350c:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x2b4>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003512:	f7fe fc15 	bl	8001d40 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351a:	f7fe fc11 	bl	8001d40 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e14d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800352e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a0 	beq.w	8003686 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003564:	6413      	str	r3, [r2, #64]	; 0x40
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_OscConfig+0x2b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d121      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_RCC_OscConfig+0x2b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <HAL_RCC_OscConfig+0x2b8>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7fe fbd7 	bl	8001d40 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003594:	e011      	b.n	80035ba <HAL_RCC_OscConfig+0x2ce>
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	42470000 	.word	0x42470000
 80035a0:	42470e80 	.word	0x42470e80
 80035a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a8:	f7fe fbca 	bl	8001d40 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e106      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b85      	ldr	r3, [pc, #532]	; (80037d0 <HAL_RCC_OscConfig+0x4e4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d106      	bne.n	80035dc <HAL_RCC_OscConfig+0x2f0>
 80035ce:	4b81      	ldr	r3, [pc, #516]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a80      	ldr	r2, [pc, #512]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
 80035da:	e01c      	b.n	8003616 <HAL_RCC_OscConfig+0x32a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d10c      	bne.n	80035fe <HAL_RCC_OscConfig+0x312>
 80035e4:	4b7b      	ldr	r3, [pc, #492]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a7a      	ldr	r2, [pc, #488]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	4b78      	ldr	r3, [pc, #480]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a77      	ldr	r2, [pc, #476]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
 80035fc:	e00b      	b.n	8003616 <HAL_RCC_OscConfig+0x32a>
 80035fe:	4b75      	ldr	r3, [pc, #468]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a74      	ldr	r2, [pc, #464]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	4b72      	ldr	r3, [pc, #456]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a71      	ldr	r2, [pc, #452]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d015      	beq.n	800364a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361e:	f7fe fb8f 	bl	8001d40 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fe fb8b 	bl	8001d40 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0c5      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363c:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0ee      	beq.n	8003626 <HAL_RCC_OscConfig+0x33a>
 8003648:	e014      	b.n	8003674 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364a:	f7fe fb79 	bl	8001d40 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe fb75 	bl	8001d40 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0af      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003668:	4b5a      	ldr	r3, [pc, #360]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ee      	bne.n	8003652 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367a:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4a55      	ldr	r2, [pc, #340]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003684:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 809b 	beq.w	80037c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d05c      	beq.n	8003756 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d141      	bne.n	8003728 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b4c      	ldr	r3, [pc, #304]	; (80037d8 <HAL_RCC_OscConfig+0x4ec>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe fb49 	bl	8001d40 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe fb45 	bl	8001d40 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e081      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	019b      	lsls	r3, r3, #6
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	3b01      	subs	r3, #1
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	4937      	ldr	r1, [pc, #220]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fa:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCC_OscConfig+0x4ec>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe fb1e 	bl	8001d40 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe fb1a 	bl	8001d40 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e056      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371a:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x41c>
 8003726:	e04e      	b.n	80037c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003728:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <HAL_RCC_OscConfig+0x4ec>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372e:	f7fe fb07 	bl	8001d40 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003736:	f7fe fb03 	bl	8001d40 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e03f      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003748:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x44a>
 8003754:	e037      	b.n	80037c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e032      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003762:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <HAL_RCC_OscConfig+0x4e8>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d028      	beq.n	80037c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d121      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d11a      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003792:	4013      	ands	r3, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003798:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379a:	4293      	cmp	r3, r2
 800379c:	d111      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	3b01      	subs	r3, #1
 80037ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40007000 	.word	0x40007000
 80037d4:	40023800 	.word	0x40023800
 80037d8:	42470060 	.word	0x42470060

080037dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0cc      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b68      	ldr	r3, [pc, #416]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d90c      	bls.n	8003818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b65      	ldr	r3, [pc, #404]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b63      	ldr	r3, [pc, #396]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b8      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003830:	4b59      	ldr	r3, [pc, #356]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a58      	ldr	r2, [pc, #352]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800383a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003848:	4b53      	ldr	r3, [pc, #332]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a52      	ldr	r2, [pc, #328]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b50      	ldr	r3, [pc, #320]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	494d      	ldr	r1, [pc, #308]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d044      	beq.n	80038fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d119      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07f      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d003      	beq.n	800389a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003896:	2b03      	cmp	r3, #3
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	4b3f      	ldr	r3, [pc, #252]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06f      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	4b3b      	ldr	r3, [pc, #236]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e067      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4934      	ldr	r1, [pc, #208]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038cc:	f7fe fa38 	bl	8001d40 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fe fa34 	bl	8001d40 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e04f      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 020c 	and.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1eb      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b25      	ldr	r3, [pc, #148]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d20c      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e032      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b19      	ldr	r3, [pc, #100]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4916      	ldr	r1, [pc, #88]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394e:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	490e      	ldr	r1, [pc, #56]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003962:	f000 f821 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	490a      	ldr	r1, [pc, #40]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe f998 	bl	8001cb8 <HAL_InitTick>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40023c00 	.word	0x40023c00
 8003998:	40023800 	.word	0x40023800
 800399c:	08006fbc 	.word	0x08006fbc
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20000004 	.word	0x20000004

080039a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b5b0      	push	{r4, r5, r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039ae:	2100      	movs	r1, #0
 80039b0:	6079      	str	r1, [r7, #4]
 80039b2:	2100      	movs	r1, #0
 80039b4:	60f9      	str	r1, [r7, #12]
 80039b6:	2100      	movs	r1, #0
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039ba:	2100      	movs	r1, #0
 80039bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039be:	4952      	ldr	r1, [pc, #328]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80039c0:	6889      	ldr	r1, [r1, #8]
 80039c2:	f001 010c 	and.w	r1, r1, #12
 80039c6:	2908      	cmp	r1, #8
 80039c8:	d00d      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80039ca:	2908      	cmp	r1, #8
 80039cc:	f200 8094 	bhi.w	8003af8 <HAL_RCC_GetSysClockFreq+0x150>
 80039d0:	2900      	cmp	r1, #0
 80039d2:	d002      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x32>
 80039d4:	2904      	cmp	r1, #4
 80039d6:	d003      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x38>
 80039d8:	e08e      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039da:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x164>)
 80039dc:	60bb      	str	r3, [r7, #8]
       break;
 80039de:	e08e      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039e0:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x168>)
 80039e2:	60bb      	str	r3, [r7, #8]
      break;
 80039e4:	e08b      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e6:	4948      	ldr	r1, [pc, #288]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80039e8:	6849      	ldr	r1, [r1, #4]
 80039ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80039ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039f0:	4945      	ldr	r1, [pc, #276]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80039f2:	6849      	ldr	r1, [r1, #4]
 80039f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80039f8:	2900      	cmp	r1, #0
 80039fa:	d024      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fc:	4942      	ldr	r1, [pc, #264]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80039fe:	6849      	ldr	r1, [r1, #4]
 8003a00:	0989      	lsrs	r1, r1, #6
 8003a02:	4608      	mov	r0, r1
 8003a04:	f04f 0100 	mov.w	r1, #0
 8003a08:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a0c:	f04f 0500 	mov.w	r5, #0
 8003a10:	ea00 0204 	and.w	r2, r0, r4
 8003a14:	ea01 0305 	and.w	r3, r1, r5
 8003a18:	493d      	ldr	r1, [pc, #244]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a1a:	fb01 f003 	mul.w	r0, r1, r3
 8003a1e:	2100      	movs	r1, #0
 8003a20:	fb01 f102 	mul.w	r1, r1, r2
 8003a24:	1844      	adds	r4, r0, r1
 8003a26:	493a      	ldr	r1, [pc, #232]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a28:	fba2 0101 	umull	r0, r1, r2, r1
 8003a2c:	1863      	adds	r3, r4, r1
 8003a2e:	4619      	mov	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	461a      	mov	r2, r3
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	f7fd f916 	bl	8000c68 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4613      	mov	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e04a      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a46:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	099b      	lsrs	r3, r3, #6
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	ea02 0400 	and.w	r4, r2, r0
 8003a5e:	ea03 0501 	and.w	r5, r3, r1
 8003a62:	4620      	mov	r0, r4
 8003a64:	4629      	mov	r1, r5
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	014b      	lsls	r3, r1, #5
 8003a70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a74:	0142      	lsls	r2, r0, #5
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	1b00      	subs	r0, r0, r4
 8003a7c:	eb61 0105 	sbc.w	r1, r1, r5
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	018b      	lsls	r3, r1, #6
 8003a8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a8e:	0182      	lsls	r2, r0, #6
 8003a90:	1a12      	subs	r2, r2, r0
 8003a92:	eb63 0301 	sbc.w	r3, r3, r1
 8003a96:	f04f 0000 	mov.w	r0, #0
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	00d9      	lsls	r1, r3, #3
 8003aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aa4:	00d0      	lsls	r0, r2, #3
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	1912      	adds	r2, r2, r4
 8003aac:	eb45 0303 	adc.w	r3, r5, r3
 8003ab0:	f04f 0000 	mov.w	r0, #0
 8003ab4:	f04f 0100 	mov.w	r1, #0
 8003ab8:	0299      	lsls	r1, r3, #10
 8003aba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003abe:	0290      	lsls	r0, r2, #10
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f7fd f8ca 	bl	8000c68 <__aeabi_uldivmod>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	60bb      	str	r3, [r7, #8]
      break;
 8003af6:	e002      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x164>)
 8003afa:	60bb      	str	r3, [r7, #8]
      break;
 8003afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afe:	68bb      	ldr	r3, [r7, #8]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bdb0      	pop	{r4, r5, r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	017d7840 	.word	0x017d7840

08003b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000000 	.word	0x20000000

08003b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b30:	f7ff fff0 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08006fcc 	.word	0x08006fcc

08003b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b58:	f7ff ffdc 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	0b5b      	lsrs	r3, r3, #13
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4903      	ldr	r1, [pc, #12]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40023800 	.word	0x40023800
 8003b78:	08006fcc 	.word	0x08006fcc

08003b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e03f      	b.n	8003c0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd fff4 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f929 	bl	8003e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b08a      	sub	sp, #40	; 0x28
 8003c1a:	af02      	add	r7, sp, #8
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d17c      	bne.n	8003d30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_UART_Transmit+0x2c>
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e075      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_UART_Transmit+0x3e>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e06e      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2221      	movs	r2, #33	; 0x21
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c6a:	f7fe f869 	bl	8001d40 <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c84:	d108      	bne.n	8003c98 <HAL_UART_Transmit+0x82>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	e003      	b.n	8003ca0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ca8:	e02a      	b.n	8003d00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2180      	movs	r1, #128	; 0x80
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f840 	bl	8003d3a <UART_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e036      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	e007      	b.n	8003cf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1cf      	bne.n	8003caa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2140      	movs	r1, #64	; 0x40
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f810 	bl	8003d3a <UART_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e006      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b090      	sub	sp, #64	; 0x40
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4a:	e050      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d04c      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d5a:	f7fd fff1 	bl	8001d40 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d241      	bcs.n	8003dee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d8a:	637a      	str	r2, [r7, #52]	; 0x34
 8003d8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e5      	bne.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	613b      	str	r3, [r7, #16]
   return(result);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dbe:	623a      	str	r2, [r7, #32]
 8003dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	69f9      	ldr	r1, [r7, #28]
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e00f      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d09f      	beq.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3740      	adds	r7, #64	; 0x40
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1c:	b09f      	sub	sp, #124	; 0x7c
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2e:	68d9      	ldr	r1, [r3, #12]
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	ea40 0301 	orr.w	r3, r0, r1
 8003e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e5c:	f021 010c 	bic.w	r1, r1, #12
 8003e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e66:	430b      	orrs	r3, r1
 8003e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	6999      	ldr	r1, [r3, #24]
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	ea40 0301 	orr.w	r3, r0, r1
 8003e80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4bc5      	ldr	r3, [pc, #788]	; (800419c <UART_SetConfig+0x384>)
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d004      	beq.n	8003e96 <UART_SetConfig+0x7e>
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4bc3      	ldr	r3, [pc, #780]	; (80041a0 <UART_SetConfig+0x388>)
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d103      	bne.n	8003e9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e96:	f7ff fe5d 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 8003e9a:	6778      	str	r0, [r7, #116]	; 0x74
 8003e9c:	e002      	b.n	8003ea4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e9e:	f7ff fe45 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 8003ea2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eac:	f040 80b6 	bne.w	800401c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb2:	461c      	mov	r4, r3
 8003eb4:	f04f 0500 	mov.w	r5, #0
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	6439      	str	r1, [r7, #64]	; 0x40
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ec8:	1912      	adds	r2, r2, r4
 8003eca:	eb45 0303 	adc.w	r3, r5, r3
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	00d9      	lsls	r1, r3, #3
 8003ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003edc:	00d0      	lsls	r0, r2, #3
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	1911      	adds	r1, r2, r4
 8003ee4:	6639      	str	r1, [r7, #96]	; 0x60
 8003ee6:	416b      	adcs	r3, r5
 8003ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	1891      	adds	r1, r2, r2
 8003ef6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ef8:	415b      	adcs	r3, r3
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f04:	f7fc feb0 	bl	8000c68 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4ba5      	ldr	r3, [pc, #660]	; (80041a4 <UART_SetConfig+0x38c>)
 8003f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	011e      	lsls	r6, r3, #4
 8003f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f18:	461c      	mov	r4, r3
 8003f1a:	f04f 0500 	mov.w	r5, #0
 8003f1e:	4622      	mov	r2, r4
 8003f20:	462b      	mov	r3, r5
 8003f22:	1891      	adds	r1, r2, r2
 8003f24:	6339      	str	r1, [r7, #48]	; 0x30
 8003f26:	415b      	adcs	r3, r3
 8003f28:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f2e:	1912      	adds	r2, r2, r4
 8003f30:	eb45 0303 	adc.w	r3, r5, r3
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	00d9      	lsls	r1, r3, #3
 8003f3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f42:	00d0      	lsls	r0, r2, #3
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	1911      	adds	r1, r2, r4
 8003f4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f4c:	416b      	adcs	r3, r5
 8003f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	1891      	adds	r1, r2, r2
 8003f5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f5e:	415b      	adcs	r3, r3
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f6a:	f7fc fe7d 	bl	8000c68 <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4b8c      	ldr	r3, [pc, #560]	; (80041a4 <UART_SetConfig+0x38c>)
 8003f74:	fba3 1302 	umull	r1, r3, r3, r2
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	2164      	movs	r1, #100	; 0x64
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	3332      	adds	r3, #50	; 0x32
 8003f86:	4a87      	ldr	r2, [pc, #540]	; (80041a4 <UART_SetConfig+0x38c>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f94:	441e      	add	r6, r3
 8003f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	1894      	adds	r4, r2, r2
 8003fa4:	623c      	str	r4, [r7, #32]
 8003fa6:	415b      	adcs	r3, r3
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fae:	1812      	adds	r2, r2, r0
 8003fb0:	eb41 0303 	adc.w	r3, r1, r3
 8003fb4:	f04f 0400 	mov.w	r4, #0
 8003fb8:	f04f 0500 	mov.w	r5, #0
 8003fbc:	00dd      	lsls	r5, r3, #3
 8003fbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fc2:	00d4      	lsls	r4, r2, #3
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	462b      	mov	r3, r5
 8003fc8:	1814      	adds	r4, r2, r0
 8003fca:	653c      	str	r4, [r7, #80]	; 0x50
 8003fcc:	414b      	adcs	r3, r1
 8003fce:	657b      	str	r3, [r7, #84]	; 0x54
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	1891      	adds	r1, r2, r2
 8003fdc:	61b9      	str	r1, [r7, #24]
 8003fde:	415b      	adcs	r3, r3
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003fea:	f7fc fe3d 	bl	8000c68 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <UART_SetConfig+0x38c>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	; 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	3332      	adds	r3, #50	; 0x32
 8004006:	4a67      	ldr	r2, [pc, #412]	; (80041a4 <UART_SetConfig+0x38c>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 0207 	and.w	r2, r3, #7
 8004012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4432      	add	r2, r6
 8004018:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800401a:	e0b9      	b.n	8004190 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401e:	461c      	mov	r4, r3
 8004020:	f04f 0500 	mov.w	r5, #0
 8004024:	4622      	mov	r2, r4
 8004026:	462b      	mov	r3, r5
 8004028:	1891      	adds	r1, r2, r2
 800402a:	6139      	str	r1, [r7, #16]
 800402c:	415b      	adcs	r3, r3
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004034:	1912      	adds	r2, r2, r4
 8004036:	eb45 0303 	adc.w	r3, r5, r3
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	00d9      	lsls	r1, r3, #3
 8004044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004048:	00d0      	lsls	r0, r2, #3
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	eb12 0804 	adds.w	r8, r2, r4
 8004052:	eb43 0905 	adc.w	r9, r3, r5
 8004056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4618      	mov	r0, r3
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	008b      	lsls	r3, r1, #2
 800406a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800406e:	0082      	lsls	r2, r0, #2
 8004070:	4640      	mov	r0, r8
 8004072:	4649      	mov	r1, r9
 8004074:	f7fc fdf8 	bl	8000c68 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4b49      	ldr	r3, [pc, #292]	; (80041a4 <UART_SetConfig+0x38c>)
 800407e:	fba3 2302 	umull	r2, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	011e      	lsls	r6, r3, #4
 8004086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004088:	4618      	mov	r0, r3
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	1894      	adds	r4, r2, r2
 8004094:	60bc      	str	r4, [r7, #8]
 8004096:	415b      	adcs	r3, r3
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800409e:	1812      	adds	r2, r2, r0
 80040a0:	eb41 0303 	adc.w	r3, r1, r3
 80040a4:	f04f 0400 	mov.w	r4, #0
 80040a8:	f04f 0500 	mov.w	r5, #0
 80040ac:	00dd      	lsls	r5, r3, #3
 80040ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040b2:	00d4      	lsls	r4, r2, #3
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
 80040b8:	1814      	adds	r4, r2, r0
 80040ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80040bc:	414b      	adcs	r3, r1
 80040be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	008b      	lsls	r3, r1, #2
 80040d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040d8:	0082      	lsls	r2, r0, #2
 80040da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040de:	f7fc fdc3 	bl	8000c68 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <UART_SetConfig+0x38c>)
 80040e8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	2164      	movs	r1, #100	; 0x64
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	3332      	adds	r3, #50	; 0x32
 80040fa:	4a2a      	ldr	r2, [pc, #168]	; (80041a4 <UART_SetConfig+0x38c>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004106:	441e      	add	r6, r3
 8004108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800410a:	4618      	mov	r0, r3
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	1894      	adds	r4, r2, r2
 8004116:	603c      	str	r4, [r7, #0]
 8004118:	415b      	adcs	r3, r3
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004120:	1812      	adds	r2, r2, r0
 8004122:	eb41 0303 	adc.w	r3, r1, r3
 8004126:	f04f 0400 	mov.w	r4, #0
 800412a:	f04f 0500 	mov.w	r5, #0
 800412e:	00dd      	lsls	r5, r3, #3
 8004130:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004134:	00d4      	lsls	r4, r2, #3
 8004136:	4622      	mov	r2, r4
 8004138:	462b      	mov	r3, r5
 800413a:	eb12 0a00 	adds.w	sl, r2, r0
 800413e:	eb43 0b01 	adc.w	fp, r3, r1
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4618      	mov	r0, r3
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	008b      	lsls	r3, r1, #2
 8004156:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800415a:	0082      	lsls	r2, r0, #2
 800415c:	4650      	mov	r0, sl
 800415e:	4659      	mov	r1, fp
 8004160:	f7fc fd82 	bl	8000c68 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <UART_SetConfig+0x38c>)
 800416a:	fba3 1302 	umull	r1, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2164      	movs	r1, #100	; 0x64
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	3332      	adds	r3, #50	; 0x32
 800417c:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <UART_SetConfig+0x38c>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 020f 	and.w	r2, r3, #15
 8004188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4432      	add	r2, r6
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	377c      	adds	r7, #124	; 0x7c
 8004194:	46bd      	mov	sp, r7
 8004196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800419a:	bf00      	nop
 800419c:	40011000 	.word	0x40011000
 80041a0:	40011400 	.word	0x40011400
 80041a4:	51eb851f 	.word	0x51eb851f

080041a8 <__errno>:
 80041a8:	4b01      	ldr	r3, [pc, #4]	; (80041b0 <__errno+0x8>)
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	2000000c 	.word	0x2000000c

080041b4 <__libc_init_array>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	4d0d      	ldr	r5, [pc, #52]	; (80041ec <__libc_init_array+0x38>)
 80041b8:	4c0d      	ldr	r4, [pc, #52]	; (80041f0 <__libc_init_array+0x3c>)
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	2600      	movs	r6, #0
 80041c0:	42a6      	cmp	r6, r4
 80041c2:	d109      	bne.n	80041d8 <__libc_init_array+0x24>
 80041c4:	4d0b      	ldr	r5, [pc, #44]	; (80041f4 <__libc_init_array+0x40>)
 80041c6:	4c0c      	ldr	r4, [pc, #48]	; (80041f8 <__libc_init_array+0x44>)
 80041c8:	f002 feb4 	bl	8006f34 <_init>
 80041cc:	1b64      	subs	r4, r4, r5
 80041ce:	10a4      	asrs	r4, r4, #2
 80041d0:	2600      	movs	r6, #0
 80041d2:	42a6      	cmp	r6, r4
 80041d4:	d105      	bne.n	80041e2 <__libc_init_array+0x2e>
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041dc:	4798      	blx	r3
 80041de:	3601      	adds	r6, #1
 80041e0:	e7ee      	b.n	80041c0 <__libc_init_array+0xc>
 80041e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e6:	4798      	blx	r3
 80041e8:	3601      	adds	r6, #1
 80041ea:	e7f2      	b.n	80041d2 <__libc_init_array+0x1e>
 80041ec:	080073c4 	.word	0x080073c4
 80041f0:	080073c4 	.word	0x080073c4
 80041f4:	080073c4 	.word	0x080073c4
 80041f8:	080073c8 	.word	0x080073c8

080041fc <memset>:
 80041fc:	4402      	add	r2, r0
 80041fe:	4603      	mov	r3, r0
 8004200:	4293      	cmp	r3, r2
 8004202:	d100      	bne.n	8004206 <memset+0xa>
 8004204:	4770      	bx	lr
 8004206:	f803 1b01 	strb.w	r1, [r3], #1
 800420a:	e7f9      	b.n	8004200 <memset+0x4>

0800420c <__cvt>:
 800420c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004210:	ec55 4b10 	vmov	r4, r5, d0
 8004214:	2d00      	cmp	r5, #0
 8004216:	460e      	mov	r6, r1
 8004218:	4619      	mov	r1, r3
 800421a:	462b      	mov	r3, r5
 800421c:	bfbb      	ittet	lt
 800421e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004222:	461d      	movlt	r5, r3
 8004224:	2300      	movge	r3, #0
 8004226:	232d      	movlt	r3, #45	; 0x2d
 8004228:	700b      	strb	r3, [r1, #0]
 800422a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800422c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004230:	4691      	mov	r9, r2
 8004232:	f023 0820 	bic.w	r8, r3, #32
 8004236:	bfbc      	itt	lt
 8004238:	4622      	movlt	r2, r4
 800423a:	4614      	movlt	r4, r2
 800423c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004240:	d005      	beq.n	800424e <__cvt+0x42>
 8004242:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004246:	d100      	bne.n	800424a <__cvt+0x3e>
 8004248:	3601      	adds	r6, #1
 800424a:	2102      	movs	r1, #2
 800424c:	e000      	b.n	8004250 <__cvt+0x44>
 800424e:	2103      	movs	r1, #3
 8004250:	ab03      	add	r3, sp, #12
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	ab02      	add	r3, sp, #8
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	ec45 4b10 	vmov	d0, r4, r5
 800425c:	4653      	mov	r3, sl
 800425e:	4632      	mov	r2, r6
 8004260:	f000 fcea 	bl	8004c38 <_dtoa_r>
 8004264:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004268:	4607      	mov	r7, r0
 800426a:	d102      	bne.n	8004272 <__cvt+0x66>
 800426c:	f019 0f01 	tst.w	r9, #1
 8004270:	d022      	beq.n	80042b8 <__cvt+0xac>
 8004272:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004276:	eb07 0906 	add.w	r9, r7, r6
 800427a:	d110      	bne.n	800429e <__cvt+0x92>
 800427c:	783b      	ldrb	r3, [r7, #0]
 800427e:	2b30      	cmp	r3, #48	; 0x30
 8004280:	d10a      	bne.n	8004298 <__cvt+0x8c>
 8004282:	2200      	movs	r2, #0
 8004284:	2300      	movs	r3, #0
 8004286:	4620      	mov	r0, r4
 8004288:	4629      	mov	r1, r5
 800428a:	f7fc fc2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800428e:	b918      	cbnz	r0, 8004298 <__cvt+0x8c>
 8004290:	f1c6 0601 	rsb	r6, r6, #1
 8004294:	f8ca 6000 	str.w	r6, [sl]
 8004298:	f8da 3000 	ldr.w	r3, [sl]
 800429c:	4499      	add	r9, r3
 800429e:	2200      	movs	r2, #0
 80042a0:	2300      	movs	r3, #0
 80042a2:	4620      	mov	r0, r4
 80042a4:	4629      	mov	r1, r5
 80042a6:	f7fc fc1f 	bl	8000ae8 <__aeabi_dcmpeq>
 80042aa:	b108      	cbz	r0, 80042b0 <__cvt+0xa4>
 80042ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80042b0:	2230      	movs	r2, #48	; 0x30
 80042b2:	9b03      	ldr	r3, [sp, #12]
 80042b4:	454b      	cmp	r3, r9
 80042b6:	d307      	bcc.n	80042c8 <__cvt+0xbc>
 80042b8:	9b03      	ldr	r3, [sp, #12]
 80042ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042bc:	1bdb      	subs	r3, r3, r7
 80042be:	4638      	mov	r0, r7
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	b004      	add	sp, #16
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	1c59      	adds	r1, r3, #1
 80042ca:	9103      	str	r1, [sp, #12]
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	e7f0      	b.n	80042b2 <__cvt+0xa6>

080042d0 <__exponent>:
 80042d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042d2:	4603      	mov	r3, r0
 80042d4:	2900      	cmp	r1, #0
 80042d6:	bfb8      	it	lt
 80042d8:	4249      	neglt	r1, r1
 80042da:	f803 2b02 	strb.w	r2, [r3], #2
 80042de:	bfb4      	ite	lt
 80042e0:	222d      	movlt	r2, #45	; 0x2d
 80042e2:	222b      	movge	r2, #43	; 0x2b
 80042e4:	2909      	cmp	r1, #9
 80042e6:	7042      	strb	r2, [r0, #1]
 80042e8:	dd2a      	ble.n	8004340 <__exponent+0x70>
 80042ea:	f10d 0407 	add.w	r4, sp, #7
 80042ee:	46a4      	mov	ip, r4
 80042f0:	270a      	movs	r7, #10
 80042f2:	46a6      	mov	lr, r4
 80042f4:	460a      	mov	r2, r1
 80042f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80042fa:	fb07 1516 	mls	r5, r7, r6, r1
 80042fe:	3530      	adds	r5, #48	; 0x30
 8004300:	2a63      	cmp	r2, #99	; 0x63
 8004302:	f104 34ff 	add.w	r4, r4, #4294967295
 8004306:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800430a:	4631      	mov	r1, r6
 800430c:	dcf1      	bgt.n	80042f2 <__exponent+0x22>
 800430e:	3130      	adds	r1, #48	; 0x30
 8004310:	f1ae 0502 	sub.w	r5, lr, #2
 8004314:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004318:	1c44      	adds	r4, r0, #1
 800431a:	4629      	mov	r1, r5
 800431c:	4561      	cmp	r1, ip
 800431e:	d30a      	bcc.n	8004336 <__exponent+0x66>
 8004320:	f10d 0209 	add.w	r2, sp, #9
 8004324:	eba2 020e 	sub.w	r2, r2, lr
 8004328:	4565      	cmp	r5, ip
 800432a:	bf88      	it	hi
 800432c:	2200      	movhi	r2, #0
 800432e:	4413      	add	r3, r2
 8004330:	1a18      	subs	r0, r3, r0
 8004332:	b003      	add	sp, #12
 8004334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800433a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800433e:	e7ed      	b.n	800431c <__exponent+0x4c>
 8004340:	2330      	movs	r3, #48	; 0x30
 8004342:	3130      	adds	r1, #48	; 0x30
 8004344:	7083      	strb	r3, [r0, #2]
 8004346:	70c1      	strb	r1, [r0, #3]
 8004348:	1d03      	adds	r3, r0, #4
 800434a:	e7f1      	b.n	8004330 <__exponent+0x60>

0800434c <_printf_float>:
 800434c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004350:	ed2d 8b02 	vpush	{d8}
 8004354:	b08d      	sub	sp, #52	; 0x34
 8004356:	460c      	mov	r4, r1
 8004358:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800435c:	4616      	mov	r6, r2
 800435e:	461f      	mov	r7, r3
 8004360:	4605      	mov	r5, r0
 8004362:	f001 fa55 	bl	8005810 <_localeconv_r>
 8004366:	f8d0 a000 	ldr.w	sl, [r0]
 800436a:	4650      	mov	r0, sl
 800436c:	f7fb ff40 	bl	80001f0 <strlen>
 8004370:	2300      	movs	r3, #0
 8004372:	930a      	str	r3, [sp, #40]	; 0x28
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	9305      	str	r3, [sp, #20]
 8004378:	f8d8 3000 	ldr.w	r3, [r8]
 800437c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004380:	3307      	adds	r3, #7
 8004382:	f023 0307 	bic.w	r3, r3, #7
 8004386:	f103 0208 	add.w	r2, r3, #8
 800438a:	f8c8 2000 	str.w	r2, [r8]
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004396:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800439a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800439e:	9307      	str	r3, [sp, #28]
 80043a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80043a4:	ee08 0a10 	vmov	s16, r0
 80043a8:	4b9f      	ldr	r3, [pc, #636]	; (8004628 <_printf_float+0x2dc>)
 80043aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043ae:	f04f 32ff 	mov.w	r2, #4294967295
 80043b2:	f7fc fbcb 	bl	8000b4c <__aeabi_dcmpun>
 80043b6:	bb88      	cbnz	r0, 800441c <_printf_float+0xd0>
 80043b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043bc:	4b9a      	ldr	r3, [pc, #616]	; (8004628 <_printf_float+0x2dc>)
 80043be:	f04f 32ff 	mov.w	r2, #4294967295
 80043c2:	f7fc fba5 	bl	8000b10 <__aeabi_dcmple>
 80043c6:	bb48      	cbnz	r0, 800441c <_printf_float+0xd0>
 80043c8:	2200      	movs	r2, #0
 80043ca:	2300      	movs	r3, #0
 80043cc:	4640      	mov	r0, r8
 80043ce:	4649      	mov	r1, r9
 80043d0:	f7fc fb94 	bl	8000afc <__aeabi_dcmplt>
 80043d4:	b110      	cbz	r0, 80043dc <_printf_float+0x90>
 80043d6:	232d      	movs	r3, #45	; 0x2d
 80043d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043dc:	4b93      	ldr	r3, [pc, #588]	; (800462c <_printf_float+0x2e0>)
 80043de:	4894      	ldr	r0, [pc, #592]	; (8004630 <_printf_float+0x2e4>)
 80043e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043e4:	bf94      	ite	ls
 80043e6:	4698      	movls	r8, r3
 80043e8:	4680      	movhi	r8, r0
 80043ea:	2303      	movs	r3, #3
 80043ec:	6123      	str	r3, [r4, #16]
 80043ee:	9b05      	ldr	r3, [sp, #20]
 80043f0:	f023 0204 	bic.w	r2, r3, #4
 80043f4:	6022      	str	r2, [r4, #0]
 80043f6:	f04f 0900 	mov.w	r9, #0
 80043fa:	9700      	str	r7, [sp, #0]
 80043fc:	4633      	mov	r3, r6
 80043fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8004400:	4621      	mov	r1, r4
 8004402:	4628      	mov	r0, r5
 8004404:	f000 f9d8 	bl	80047b8 <_printf_common>
 8004408:	3001      	adds	r0, #1
 800440a:	f040 8090 	bne.w	800452e <_printf_float+0x1e2>
 800440e:	f04f 30ff 	mov.w	r0, #4294967295
 8004412:	b00d      	add	sp, #52	; 0x34
 8004414:	ecbd 8b02 	vpop	{d8}
 8004418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	4640      	mov	r0, r8
 8004422:	4649      	mov	r1, r9
 8004424:	f7fc fb92 	bl	8000b4c <__aeabi_dcmpun>
 8004428:	b140      	cbz	r0, 800443c <_printf_float+0xf0>
 800442a:	464b      	mov	r3, r9
 800442c:	2b00      	cmp	r3, #0
 800442e:	bfbc      	itt	lt
 8004430:	232d      	movlt	r3, #45	; 0x2d
 8004432:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004436:	487f      	ldr	r0, [pc, #508]	; (8004634 <_printf_float+0x2e8>)
 8004438:	4b7f      	ldr	r3, [pc, #508]	; (8004638 <_printf_float+0x2ec>)
 800443a:	e7d1      	b.n	80043e0 <_printf_float+0x94>
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004442:	9206      	str	r2, [sp, #24]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	d13f      	bne.n	80044c8 <_printf_float+0x17c>
 8004448:	2306      	movs	r3, #6
 800444a:	6063      	str	r3, [r4, #4]
 800444c:	9b05      	ldr	r3, [sp, #20]
 800444e:	6861      	ldr	r1, [r4, #4]
 8004450:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004454:	2300      	movs	r3, #0
 8004456:	9303      	str	r3, [sp, #12]
 8004458:	ab0a      	add	r3, sp, #40	; 0x28
 800445a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800445e:	ab09      	add	r3, sp, #36	; 0x24
 8004460:	ec49 8b10 	vmov	d0, r8, r9
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	6022      	str	r2, [r4, #0]
 8004468:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800446c:	4628      	mov	r0, r5
 800446e:	f7ff fecd 	bl	800420c <__cvt>
 8004472:	9b06      	ldr	r3, [sp, #24]
 8004474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004476:	2b47      	cmp	r3, #71	; 0x47
 8004478:	4680      	mov	r8, r0
 800447a:	d108      	bne.n	800448e <_printf_float+0x142>
 800447c:	1cc8      	adds	r0, r1, #3
 800447e:	db02      	blt.n	8004486 <_printf_float+0x13a>
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	4299      	cmp	r1, r3
 8004484:	dd41      	ble.n	800450a <_printf_float+0x1be>
 8004486:	f1ab 0b02 	sub.w	fp, fp, #2
 800448a:	fa5f fb8b 	uxtb.w	fp, fp
 800448e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004492:	d820      	bhi.n	80044d6 <_printf_float+0x18a>
 8004494:	3901      	subs	r1, #1
 8004496:	465a      	mov	r2, fp
 8004498:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800449c:	9109      	str	r1, [sp, #36]	; 0x24
 800449e:	f7ff ff17 	bl	80042d0 <__exponent>
 80044a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044a4:	1813      	adds	r3, r2, r0
 80044a6:	2a01      	cmp	r2, #1
 80044a8:	4681      	mov	r9, r0
 80044aa:	6123      	str	r3, [r4, #16]
 80044ac:	dc02      	bgt.n	80044b4 <_printf_float+0x168>
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	07d2      	lsls	r2, r2, #31
 80044b2:	d501      	bpl.n	80044b8 <_printf_float+0x16c>
 80044b4:	3301      	adds	r3, #1
 80044b6:	6123      	str	r3, [r4, #16]
 80044b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d09c      	beq.n	80043fa <_printf_float+0xae>
 80044c0:	232d      	movs	r3, #45	; 0x2d
 80044c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c6:	e798      	b.n	80043fa <_printf_float+0xae>
 80044c8:	9a06      	ldr	r2, [sp, #24]
 80044ca:	2a47      	cmp	r2, #71	; 0x47
 80044cc:	d1be      	bne.n	800444c <_printf_float+0x100>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1bc      	bne.n	800444c <_printf_float+0x100>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e7b9      	b.n	800444a <_printf_float+0xfe>
 80044d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044da:	d118      	bne.n	800450e <_printf_float+0x1c2>
 80044dc:	2900      	cmp	r1, #0
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	dd0b      	ble.n	80044fa <_printf_float+0x1ae>
 80044e2:	6121      	str	r1, [r4, #16]
 80044e4:	b913      	cbnz	r3, 80044ec <_printf_float+0x1a0>
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	07d0      	lsls	r0, r2, #31
 80044ea:	d502      	bpl.n	80044f2 <_printf_float+0x1a6>
 80044ec:	3301      	adds	r3, #1
 80044ee:	440b      	add	r3, r1
 80044f0:	6123      	str	r3, [r4, #16]
 80044f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80044f4:	f04f 0900 	mov.w	r9, #0
 80044f8:	e7de      	b.n	80044b8 <_printf_float+0x16c>
 80044fa:	b913      	cbnz	r3, 8004502 <_printf_float+0x1b6>
 80044fc:	6822      	ldr	r2, [r4, #0]
 80044fe:	07d2      	lsls	r2, r2, #31
 8004500:	d501      	bpl.n	8004506 <_printf_float+0x1ba>
 8004502:	3302      	adds	r3, #2
 8004504:	e7f4      	b.n	80044f0 <_printf_float+0x1a4>
 8004506:	2301      	movs	r3, #1
 8004508:	e7f2      	b.n	80044f0 <_printf_float+0x1a4>
 800450a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800450e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004510:	4299      	cmp	r1, r3
 8004512:	db05      	blt.n	8004520 <_printf_float+0x1d4>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	6121      	str	r1, [r4, #16]
 8004518:	07d8      	lsls	r0, r3, #31
 800451a:	d5ea      	bpl.n	80044f2 <_printf_float+0x1a6>
 800451c:	1c4b      	adds	r3, r1, #1
 800451e:	e7e7      	b.n	80044f0 <_printf_float+0x1a4>
 8004520:	2900      	cmp	r1, #0
 8004522:	bfd4      	ite	le
 8004524:	f1c1 0202 	rsble	r2, r1, #2
 8004528:	2201      	movgt	r2, #1
 800452a:	4413      	add	r3, r2
 800452c:	e7e0      	b.n	80044f0 <_printf_float+0x1a4>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	055a      	lsls	r2, r3, #21
 8004532:	d407      	bmi.n	8004544 <_printf_float+0x1f8>
 8004534:	6923      	ldr	r3, [r4, #16]
 8004536:	4642      	mov	r2, r8
 8004538:	4631      	mov	r1, r6
 800453a:	4628      	mov	r0, r5
 800453c:	47b8      	blx	r7
 800453e:	3001      	adds	r0, #1
 8004540:	d12c      	bne.n	800459c <_printf_float+0x250>
 8004542:	e764      	b.n	800440e <_printf_float+0xc2>
 8004544:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004548:	f240 80e0 	bls.w	800470c <_printf_float+0x3c0>
 800454c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004550:	2200      	movs	r2, #0
 8004552:	2300      	movs	r3, #0
 8004554:	f7fc fac8 	bl	8000ae8 <__aeabi_dcmpeq>
 8004558:	2800      	cmp	r0, #0
 800455a:	d034      	beq.n	80045c6 <_printf_float+0x27a>
 800455c:	4a37      	ldr	r2, [pc, #220]	; (800463c <_printf_float+0x2f0>)
 800455e:	2301      	movs	r3, #1
 8004560:	4631      	mov	r1, r6
 8004562:	4628      	mov	r0, r5
 8004564:	47b8      	blx	r7
 8004566:	3001      	adds	r0, #1
 8004568:	f43f af51 	beq.w	800440e <_printf_float+0xc2>
 800456c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004570:	429a      	cmp	r2, r3
 8004572:	db02      	blt.n	800457a <_printf_float+0x22e>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	07d8      	lsls	r0, r3, #31
 8004578:	d510      	bpl.n	800459c <_printf_float+0x250>
 800457a:	ee18 3a10 	vmov	r3, s16
 800457e:	4652      	mov	r2, sl
 8004580:	4631      	mov	r1, r6
 8004582:	4628      	mov	r0, r5
 8004584:	47b8      	blx	r7
 8004586:	3001      	adds	r0, #1
 8004588:	f43f af41 	beq.w	800440e <_printf_float+0xc2>
 800458c:	f04f 0800 	mov.w	r8, #0
 8004590:	f104 091a 	add.w	r9, r4, #26
 8004594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004596:	3b01      	subs	r3, #1
 8004598:	4543      	cmp	r3, r8
 800459a:	dc09      	bgt.n	80045b0 <_printf_float+0x264>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	079b      	lsls	r3, r3, #30
 80045a0:	f100 8105 	bmi.w	80047ae <_printf_float+0x462>
 80045a4:	68e0      	ldr	r0, [r4, #12]
 80045a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045a8:	4298      	cmp	r0, r3
 80045aa:	bfb8      	it	lt
 80045ac:	4618      	movlt	r0, r3
 80045ae:	e730      	b.n	8004412 <_printf_float+0xc6>
 80045b0:	2301      	movs	r3, #1
 80045b2:	464a      	mov	r2, r9
 80045b4:	4631      	mov	r1, r6
 80045b6:	4628      	mov	r0, r5
 80045b8:	47b8      	blx	r7
 80045ba:	3001      	adds	r0, #1
 80045bc:	f43f af27 	beq.w	800440e <_printf_float+0xc2>
 80045c0:	f108 0801 	add.w	r8, r8, #1
 80045c4:	e7e6      	b.n	8004594 <_printf_float+0x248>
 80045c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	dc39      	bgt.n	8004640 <_printf_float+0x2f4>
 80045cc:	4a1b      	ldr	r2, [pc, #108]	; (800463c <_printf_float+0x2f0>)
 80045ce:	2301      	movs	r3, #1
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	f43f af19 	beq.w	800440e <_printf_float+0xc2>
 80045dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d102      	bne.n	80045ea <_printf_float+0x29e>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	07d9      	lsls	r1, r3, #31
 80045e8:	d5d8      	bpl.n	800459c <_printf_float+0x250>
 80045ea:	ee18 3a10 	vmov	r3, s16
 80045ee:	4652      	mov	r2, sl
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f af09 	beq.w	800440e <_printf_float+0xc2>
 80045fc:	f04f 0900 	mov.w	r9, #0
 8004600:	f104 0a1a 	add.w	sl, r4, #26
 8004604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004606:	425b      	negs	r3, r3
 8004608:	454b      	cmp	r3, r9
 800460a:	dc01      	bgt.n	8004610 <_printf_float+0x2c4>
 800460c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800460e:	e792      	b.n	8004536 <_printf_float+0x1ea>
 8004610:	2301      	movs	r3, #1
 8004612:	4652      	mov	r2, sl
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	47b8      	blx	r7
 800461a:	3001      	adds	r0, #1
 800461c:	f43f aef7 	beq.w	800440e <_printf_float+0xc2>
 8004620:	f109 0901 	add.w	r9, r9, #1
 8004624:	e7ee      	b.n	8004604 <_printf_float+0x2b8>
 8004626:	bf00      	nop
 8004628:	7fefffff 	.word	0x7fefffff
 800462c:	08006fe0 	.word	0x08006fe0
 8004630:	08006fe4 	.word	0x08006fe4
 8004634:	08006fec 	.word	0x08006fec
 8004638:	08006fe8 	.word	0x08006fe8
 800463c:	08006ff0 	.word	0x08006ff0
 8004640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004642:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004644:	429a      	cmp	r2, r3
 8004646:	bfa8      	it	ge
 8004648:	461a      	movge	r2, r3
 800464a:	2a00      	cmp	r2, #0
 800464c:	4691      	mov	r9, r2
 800464e:	dc37      	bgt.n	80046c0 <_printf_float+0x374>
 8004650:	f04f 0b00 	mov.w	fp, #0
 8004654:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004658:	f104 021a 	add.w	r2, r4, #26
 800465c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800465e:	9305      	str	r3, [sp, #20]
 8004660:	eba3 0309 	sub.w	r3, r3, r9
 8004664:	455b      	cmp	r3, fp
 8004666:	dc33      	bgt.n	80046d0 <_printf_float+0x384>
 8004668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800466c:	429a      	cmp	r2, r3
 800466e:	db3b      	blt.n	80046e8 <_printf_float+0x39c>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	07da      	lsls	r2, r3, #31
 8004674:	d438      	bmi.n	80046e8 <_printf_float+0x39c>
 8004676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004678:	9b05      	ldr	r3, [sp, #20]
 800467a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	eba2 0901 	sub.w	r9, r2, r1
 8004682:	4599      	cmp	r9, r3
 8004684:	bfa8      	it	ge
 8004686:	4699      	movge	r9, r3
 8004688:	f1b9 0f00 	cmp.w	r9, #0
 800468c:	dc35      	bgt.n	80046fa <_printf_float+0x3ae>
 800468e:	f04f 0800 	mov.w	r8, #0
 8004692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004696:	f104 0a1a 	add.w	sl, r4, #26
 800469a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	eba3 0309 	sub.w	r3, r3, r9
 80046a4:	4543      	cmp	r3, r8
 80046a6:	f77f af79 	ble.w	800459c <_printf_float+0x250>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4652      	mov	r2, sl
 80046ae:	4631      	mov	r1, r6
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b8      	blx	r7
 80046b4:	3001      	adds	r0, #1
 80046b6:	f43f aeaa 	beq.w	800440e <_printf_float+0xc2>
 80046ba:	f108 0801 	add.w	r8, r8, #1
 80046be:	e7ec      	b.n	800469a <_printf_float+0x34e>
 80046c0:	4613      	mov	r3, r2
 80046c2:	4631      	mov	r1, r6
 80046c4:	4642      	mov	r2, r8
 80046c6:	4628      	mov	r0, r5
 80046c8:	47b8      	blx	r7
 80046ca:	3001      	adds	r0, #1
 80046cc:	d1c0      	bne.n	8004650 <_printf_float+0x304>
 80046ce:	e69e      	b.n	800440e <_printf_float+0xc2>
 80046d0:	2301      	movs	r3, #1
 80046d2:	4631      	mov	r1, r6
 80046d4:	4628      	mov	r0, r5
 80046d6:	9205      	str	r2, [sp, #20]
 80046d8:	47b8      	blx	r7
 80046da:	3001      	adds	r0, #1
 80046dc:	f43f ae97 	beq.w	800440e <_printf_float+0xc2>
 80046e0:	9a05      	ldr	r2, [sp, #20]
 80046e2:	f10b 0b01 	add.w	fp, fp, #1
 80046e6:	e7b9      	b.n	800465c <_printf_float+0x310>
 80046e8:	ee18 3a10 	vmov	r3, s16
 80046ec:	4652      	mov	r2, sl
 80046ee:	4631      	mov	r1, r6
 80046f0:	4628      	mov	r0, r5
 80046f2:	47b8      	blx	r7
 80046f4:	3001      	adds	r0, #1
 80046f6:	d1be      	bne.n	8004676 <_printf_float+0x32a>
 80046f8:	e689      	b.n	800440e <_printf_float+0xc2>
 80046fa:	9a05      	ldr	r2, [sp, #20]
 80046fc:	464b      	mov	r3, r9
 80046fe:	4442      	add	r2, r8
 8004700:	4631      	mov	r1, r6
 8004702:	4628      	mov	r0, r5
 8004704:	47b8      	blx	r7
 8004706:	3001      	adds	r0, #1
 8004708:	d1c1      	bne.n	800468e <_printf_float+0x342>
 800470a:	e680      	b.n	800440e <_printf_float+0xc2>
 800470c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800470e:	2a01      	cmp	r2, #1
 8004710:	dc01      	bgt.n	8004716 <_printf_float+0x3ca>
 8004712:	07db      	lsls	r3, r3, #31
 8004714:	d538      	bpl.n	8004788 <_printf_float+0x43c>
 8004716:	2301      	movs	r3, #1
 8004718:	4642      	mov	r2, r8
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	f43f ae74 	beq.w	800440e <_printf_float+0xc2>
 8004726:	ee18 3a10 	vmov	r3, s16
 800472a:	4652      	mov	r2, sl
 800472c:	4631      	mov	r1, r6
 800472e:	4628      	mov	r0, r5
 8004730:	47b8      	blx	r7
 8004732:	3001      	adds	r0, #1
 8004734:	f43f ae6b 	beq.w	800440e <_printf_float+0xc2>
 8004738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800473c:	2200      	movs	r2, #0
 800473e:	2300      	movs	r3, #0
 8004740:	f7fc f9d2 	bl	8000ae8 <__aeabi_dcmpeq>
 8004744:	b9d8      	cbnz	r0, 800477e <_printf_float+0x432>
 8004746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004748:	f108 0201 	add.w	r2, r8, #1
 800474c:	3b01      	subs	r3, #1
 800474e:	4631      	mov	r1, r6
 8004750:	4628      	mov	r0, r5
 8004752:	47b8      	blx	r7
 8004754:	3001      	adds	r0, #1
 8004756:	d10e      	bne.n	8004776 <_printf_float+0x42a>
 8004758:	e659      	b.n	800440e <_printf_float+0xc2>
 800475a:	2301      	movs	r3, #1
 800475c:	4652      	mov	r2, sl
 800475e:	4631      	mov	r1, r6
 8004760:	4628      	mov	r0, r5
 8004762:	47b8      	blx	r7
 8004764:	3001      	adds	r0, #1
 8004766:	f43f ae52 	beq.w	800440e <_printf_float+0xc2>
 800476a:	f108 0801 	add.w	r8, r8, #1
 800476e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	4543      	cmp	r3, r8
 8004774:	dcf1      	bgt.n	800475a <_printf_float+0x40e>
 8004776:	464b      	mov	r3, r9
 8004778:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800477c:	e6dc      	b.n	8004538 <_printf_float+0x1ec>
 800477e:	f04f 0800 	mov.w	r8, #0
 8004782:	f104 0a1a 	add.w	sl, r4, #26
 8004786:	e7f2      	b.n	800476e <_printf_float+0x422>
 8004788:	2301      	movs	r3, #1
 800478a:	4642      	mov	r2, r8
 800478c:	e7df      	b.n	800474e <_printf_float+0x402>
 800478e:	2301      	movs	r3, #1
 8004790:	464a      	mov	r2, r9
 8004792:	4631      	mov	r1, r6
 8004794:	4628      	mov	r0, r5
 8004796:	47b8      	blx	r7
 8004798:	3001      	adds	r0, #1
 800479a:	f43f ae38 	beq.w	800440e <_printf_float+0xc2>
 800479e:	f108 0801 	add.w	r8, r8, #1
 80047a2:	68e3      	ldr	r3, [r4, #12]
 80047a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047a6:	1a5b      	subs	r3, r3, r1
 80047a8:	4543      	cmp	r3, r8
 80047aa:	dcf0      	bgt.n	800478e <_printf_float+0x442>
 80047ac:	e6fa      	b.n	80045a4 <_printf_float+0x258>
 80047ae:	f04f 0800 	mov.w	r8, #0
 80047b2:	f104 0919 	add.w	r9, r4, #25
 80047b6:	e7f4      	b.n	80047a2 <_printf_float+0x456>

080047b8 <_printf_common>:
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	4616      	mov	r6, r2
 80047be:	4699      	mov	r9, r3
 80047c0:	688a      	ldr	r2, [r1, #8]
 80047c2:	690b      	ldr	r3, [r1, #16]
 80047c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bfb8      	it	lt
 80047cc:	4613      	movlt	r3, r2
 80047ce:	6033      	str	r3, [r6, #0]
 80047d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047d4:	4607      	mov	r7, r0
 80047d6:	460c      	mov	r4, r1
 80047d8:	b10a      	cbz	r2, 80047de <_printf_common+0x26>
 80047da:	3301      	adds	r3, #1
 80047dc:	6033      	str	r3, [r6, #0]
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	0699      	lsls	r1, r3, #26
 80047e2:	bf42      	ittt	mi
 80047e4:	6833      	ldrmi	r3, [r6, #0]
 80047e6:	3302      	addmi	r3, #2
 80047e8:	6033      	strmi	r3, [r6, #0]
 80047ea:	6825      	ldr	r5, [r4, #0]
 80047ec:	f015 0506 	ands.w	r5, r5, #6
 80047f0:	d106      	bne.n	8004800 <_printf_common+0x48>
 80047f2:	f104 0a19 	add.w	sl, r4, #25
 80047f6:	68e3      	ldr	r3, [r4, #12]
 80047f8:	6832      	ldr	r2, [r6, #0]
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	42ab      	cmp	r3, r5
 80047fe:	dc26      	bgt.n	800484e <_printf_common+0x96>
 8004800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004804:	1e13      	subs	r3, r2, #0
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	bf18      	it	ne
 800480a:	2301      	movne	r3, #1
 800480c:	0692      	lsls	r2, r2, #26
 800480e:	d42b      	bmi.n	8004868 <_printf_common+0xb0>
 8004810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004814:	4649      	mov	r1, r9
 8004816:	4638      	mov	r0, r7
 8004818:	47c0      	blx	r8
 800481a:	3001      	adds	r0, #1
 800481c:	d01e      	beq.n	800485c <_printf_common+0xa4>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	68e5      	ldr	r5, [r4, #12]
 8004822:	6832      	ldr	r2, [r6, #0]
 8004824:	f003 0306 	and.w	r3, r3, #6
 8004828:	2b04      	cmp	r3, #4
 800482a:	bf08      	it	eq
 800482c:	1aad      	subeq	r5, r5, r2
 800482e:	68a3      	ldr	r3, [r4, #8]
 8004830:	6922      	ldr	r2, [r4, #16]
 8004832:	bf0c      	ite	eq
 8004834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004838:	2500      	movne	r5, #0
 800483a:	4293      	cmp	r3, r2
 800483c:	bfc4      	itt	gt
 800483e:	1a9b      	subgt	r3, r3, r2
 8004840:	18ed      	addgt	r5, r5, r3
 8004842:	2600      	movs	r6, #0
 8004844:	341a      	adds	r4, #26
 8004846:	42b5      	cmp	r5, r6
 8004848:	d11a      	bne.n	8004880 <_printf_common+0xc8>
 800484a:	2000      	movs	r0, #0
 800484c:	e008      	b.n	8004860 <_printf_common+0xa8>
 800484e:	2301      	movs	r3, #1
 8004850:	4652      	mov	r2, sl
 8004852:	4649      	mov	r1, r9
 8004854:	4638      	mov	r0, r7
 8004856:	47c0      	blx	r8
 8004858:	3001      	adds	r0, #1
 800485a:	d103      	bne.n	8004864 <_printf_common+0xac>
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004864:	3501      	adds	r5, #1
 8004866:	e7c6      	b.n	80047f6 <_printf_common+0x3e>
 8004868:	18e1      	adds	r1, r4, r3
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	2030      	movs	r0, #48	; 0x30
 800486e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004872:	4422      	add	r2, r4
 8004874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800487c:	3302      	adds	r3, #2
 800487e:	e7c7      	b.n	8004810 <_printf_common+0x58>
 8004880:	2301      	movs	r3, #1
 8004882:	4622      	mov	r2, r4
 8004884:	4649      	mov	r1, r9
 8004886:	4638      	mov	r0, r7
 8004888:	47c0      	blx	r8
 800488a:	3001      	adds	r0, #1
 800488c:	d0e6      	beq.n	800485c <_printf_common+0xa4>
 800488e:	3601      	adds	r6, #1
 8004890:	e7d9      	b.n	8004846 <_printf_common+0x8e>
	...

08004894 <_printf_i>:
 8004894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	460c      	mov	r4, r1
 800489a:	4691      	mov	r9, r2
 800489c:	7e27      	ldrb	r7, [r4, #24]
 800489e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048a0:	2f78      	cmp	r7, #120	; 0x78
 80048a2:	4680      	mov	r8, r0
 80048a4:	469a      	mov	sl, r3
 80048a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048aa:	d807      	bhi.n	80048bc <_printf_i+0x28>
 80048ac:	2f62      	cmp	r7, #98	; 0x62
 80048ae:	d80a      	bhi.n	80048c6 <_printf_i+0x32>
 80048b0:	2f00      	cmp	r7, #0
 80048b2:	f000 80d8 	beq.w	8004a66 <_printf_i+0x1d2>
 80048b6:	2f58      	cmp	r7, #88	; 0x58
 80048b8:	f000 80a3 	beq.w	8004a02 <_printf_i+0x16e>
 80048bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048c4:	e03a      	b.n	800493c <_printf_i+0xa8>
 80048c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ca:	2b15      	cmp	r3, #21
 80048cc:	d8f6      	bhi.n	80048bc <_printf_i+0x28>
 80048ce:	a001      	add	r0, pc, #4	; (adr r0, 80048d4 <_printf_i+0x40>)
 80048d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048d4:	0800492d 	.word	0x0800492d
 80048d8:	08004941 	.word	0x08004941
 80048dc:	080048bd 	.word	0x080048bd
 80048e0:	080048bd 	.word	0x080048bd
 80048e4:	080048bd 	.word	0x080048bd
 80048e8:	080048bd 	.word	0x080048bd
 80048ec:	08004941 	.word	0x08004941
 80048f0:	080048bd 	.word	0x080048bd
 80048f4:	080048bd 	.word	0x080048bd
 80048f8:	080048bd 	.word	0x080048bd
 80048fc:	080048bd 	.word	0x080048bd
 8004900:	08004a4d 	.word	0x08004a4d
 8004904:	08004971 	.word	0x08004971
 8004908:	08004a2f 	.word	0x08004a2f
 800490c:	080048bd 	.word	0x080048bd
 8004910:	080048bd 	.word	0x080048bd
 8004914:	08004a6f 	.word	0x08004a6f
 8004918:	080048bd 	.word	0x080048bd
 800491c:	08004971 	.word	0x08004971
 8004920:	080048bd 	.word	0x080048bd
 8004924:	080048bd 	.word	0x080048bd
 8004928:	08004a37 	.word	0x08004a37
 800492c:	680b      	ldr	r3, [r1, #0]
 800492e:	1d1a      	adds	r2, r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	600a      	str	r2, [r1, #0]
 8004934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800493c:	2301      	movs	r3, #1
 800493e:	e0a3      	b.n	8004a88 <_printf_i+0x1f4>
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	6808      	ldr	r0, [r1, #0]
 8004944:	062e      	lsls	r6, r5, #24
 8004946:	f100 0304 	add.w	r3, r0, #4
 800494a:	d50a      	bpl.n	8004962 <_printf_i+0xce>
 800494c:	6805      	ldr	r5, [r0, #0]
 800494e:	600b      	str	r3, [r1, #0]
 8004950:	2d00      	cmp	r5, #0
 8004952:	da03      	bge.n	800495c <_printf_i+0xc8>
 8004954:	232d      	movs	r3, #45	; 0x2d
 8004956:	426d      	negs	r5, r5
 8004958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495c:	485e      	ldr	r0, [pc, #376]	; (8004ad8 <_printf_i+0x244>)
 800495e:	230a      	movs	r3, #10
 8004960:	e019      	b.n	8004996 <_printf_i+0x102>
 8004962:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004966:	6805      	ldr	r5, [r0, #0]
 8004968:	600b      	str	r3, [r1, #0]
 800496a:	bf18      	it	ne
 800496c:	b22d      	sxthne	r5, r5
 800496e:	e7ef      	b.n	8004950 <_printf_i+0xbc>
 8004970:	680b      	ldr	r3, [r1, #0]
 8004972:	6825      	ldr	r5, [r4, #0]
 8004974:	1d18      	adds	r0, r3, #4
 8004976:	6008      	str	r0, [r1, #0]
 8004978:	0628      	lsls	r0, r5, #24
 800497a:	d501      	bpl.n	8004980 <_printf_i+0xec>
 800497c:	681d      	ldr	r5, [r3, #0]
 800497e:	e002      	b.n	8004986 <_printf_i+0xf2>
 8004980:	0669      	lsls	r1, r5, #25
 8004982:	d5fb      	bpl.n	800497c <_printf_i+0xe8>
 8004984:	881d      	ldrh	r5, [r3, #0]
 8004986:	4854      	ldr	r0, [pc, #336]	; (8004ad8 <_printf_i+0x244>)
 8004988:	2f6f      	cmp	r7, #111	; 0x6f
 800498a:	bf0c      	ite	eq
 800498c:	2308      	moveq	r3, #8
 800498e:	230a      	movne	r3, #10
 8004990:	2100      	movs	r1, #0
 8004992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004996:	6866      	ldr	r6, [r4, #4]
 8004998:	60a6      	str	r6, [r4, #8]
 800499a:	2e00      	cmp	r6, #0
 800499c:	bfa2      	ittt	ge
 800499e:	6821      	ldrge	r1, [r4, #0]
 80049a0:	f021 0104 	bicge.w	r1, r1, #4
 80049a4:	6021      	strge	r1, [r4, #0]
 80049a6:	b90d      	cbnz	r5, 80049ac <_printf_i+0x118>
 80049a8:	2e00      	cmp	r6, #0
 80049aa:	d04d      	beq.n	8004a48 <_printf_i+0x1b4>
 80049ac:	4616      	mov	r6, r2
 80049ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80049b2:	fb03 5711 	mls	r7, r3, r1, r5
 80049b6:	5dc7      	ldrb	r7, [r0, r7]
 80049b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049bc:	462f      	mov	r7, r5
 80049be:	42bb      	cmp	r3, r7
 80049c0:	460d      	mov	r5, r1
 80049c2:	d9f4      	bls.n	80049ae <_printf_i+0x11a>
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d10b      	bne.n	80049e0 <_printf_i+0x14c>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	07df      	lsls	r7, r3, #31
 80049cc:	d508      	bpl.n	80049e0 <_printf_i+0x14c>
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	6861      	ldr	r1, [r4, #4]
 80049d2:	4299      	cmp	r1, r3
 80049d4:	bfde      	ittt	le
 80049d6:	2330      	movle	r3, #48	; 0x30
 80049d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049e0:	1b92      	subs	r2, r2, r6
 80049e2:	6122      	str	r2, [r4, #16]
 80049e4:	f8cd a000 	str.w	sl, [sp]
 80049e8:	464b      	mov	r3, r9
 80049ea:	aa03      	add	r2, sp, #12
 80049ec:	4621      	mov	r1, r4
 80049ee:	4640      	mov	r0, r8
 80049f0:	f7ff fee2 	bl	80047b8 <_printf_common>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d14c      	bne.n	8004a92 <_printf_i+0x1fe>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	b004      	add	sp, #16
 80049fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a02:	4835      	ldr	r0, [pc, #212]	; (8004ad8 <_printf_i+0x244>)
 8004a04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	680e      	ldr	r6, [r1, #0]
 8004a0c:	061f      	lsls	r7, r3, #24
 8004a0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a12:	600e      	str	r6, [r1, #0]
 8004a14:	d514      	bpl.n	8004a40 <_printf_i+0x1ac>
 8004a16:	07d9      	lsls	r1, r3, #31
 8004a18:	bf44      	itt	mi
 8004a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a1e:	6023      	strmi	r3, [r4, #0]
 8004a20:	b91d      	cbnz	r5, 8004a2a <_printf_i+0x196>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	f023 0320 	bic.w	r3, r3, #32
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	2310      	movs	r3, #16
 8004a2c:	e7b0      	b.n	8004990 <_printf_i+0xfc>
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	f043 0320 	orr.w	r3, r3, #32
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	2378      	movs	r3, #120	; 0x78
 8004a38:	4828      	ldr	r0, [pc, #160]	; (8004adc <_printf_i+0x248>)
 8004a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a3e:	e7e3      	b.n	8004a08 <_printf_i+0x174>
 8004a40:	065e      	lsls	r6, r3, #25
 8004a42:	bf48      	it	mi
 8004a44:	b2ad      	uxthmi	r5, r5
 8004a46:	e7e6      	b.n	8004a16 <_printf_i+0x182>
 8004a48:	4616      	mov	r6, r2
 8004a4a:	e7bb      	b.n	80049c4 <_printf_i+0x130>
 8004a4c:	680b      	ldr	r3, [r1, #0]
 8004a4e:	6826      	ldr	r6, [r4, #0]
 8004a50:	6960      	ldr	r0, [r4, #20]
 8004a52:	1d1d      	adds	r5, r3, #4
 8004a54:	600d      	str	r5, [r1, #0]
 8004a56:	0635      	lsls	r5, r6, #24
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	d501      	bpl.n	8004a60 <_printf_i+0x1cc>
 8004a5c:	6018      	str	r0, [r3, #0]
 8004a5e:	e002      	b.n	8004a66 <_printf_i+0x1d2>
 8004a60:	0671      	lsls	r1, r6, #25
 8004a62:	d5fb      	bpl.n	8004a5c <_printf_i+0x1c8>
 8004a64:	8018      	strh	r0, [r3, #0]
 8004a66:	2300      	movs	r3, #0
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	4616      	mov	r6, r2
 8004a6c:	e7ba      	b.n	80049e4 <_printf_i+0x150>
 8004a6e:	680b      	ldr	r3, [r1, #0]
 8004a70:	1d1a      	adds	r2, r3, #4
 8004a72:	600a      	str	r2, [r1, #0]
 8004a74:	681e      	ldr	r6, [r3, #0]
 8004a76:	6862      	ldr	r2, [r4, #4]
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f7fb fbc0 	bl	8000200 <memchr>
 8004a80:	b108      	cbz	r0, 8004a86 <_printf_i+0x1f2>
 8004a82:	1b80      	subs	r0, r0, r6
 8004a84:	6060      	str	r0, [r4, #4]
 8004a86:	6863      	ldr	r3, [r4, #4]
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a90:	e7a8      	b.n	80049e4 <_printf_i+0x150>
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	4632      	mov	r2, r6
 8004a96:	4649      	mov	r1, r9
 8004a98:	4640      	mov	r0, r8
 8004a9a:	47d0      	blx	sl
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d0ab      	beq.n	80049f8 <_printf_i+0x164>
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	079b      	lsls	r3, r3, #30
 8004aa4:	d413      	bmi.n	8004ace <_printf_i+0x23a>
 8004aa6:	68e0      	ldr	r0, [r4, #12]
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	4298      	cmp	r0, r3
 8004aac:	bfb8      	it	lt
 8004aae:	4618      	movlt	r0, r3
 8004ab0:	e7a4      	b.n	80049fc <_printf_i+0x168>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	4640      	mov	r0, r8
 8004aba:	47d0      	blx	sl
 8004abc:	3001      	adds	r0, #1
 8004abe:	d09b      	beq.n	80049f8 <_printf_i+0x164>
 8004ac0:	3501      	adds	r5, #1
 8004ac2:	68e3      	ldr	r3, [r4, #12]
 8004ac4:	9903      	ldr	r1, [sp, #12]
 8004ac6:	1a5b      	subs	r3, r3, r1
 8004ac8:	42ab      	cmp	r3, r5
 8004aca:	dcf2      	bgt.n	8004ab2 <_printf_i+0x21e>
 8004acc:	e7eb      	b.n	8004aa6 <_printf_i+0x212>
 8004ace:	2500      	movs	r5, #0
 8004ad0:	f104 0619 	add.w	r6, r4, #25
 8004ad4:	e7f5      	b.n	8004ac2 <_printf_i+0x22e>
 8004ad6:	bf00      	nop
 8004ad8:	08006ff2 	.word	0x08006ff2
 8004adc:	08007003 	.word	0x08007003

08004ae0 <siprintf>:
 8004ae0:	b40e      	push	{r1, r2, r3}
 8004ae2:	b500      	push	{lr}
 8004ae4:	b09c      	sub	sp, #112	; 0x70
 8004ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ae8:	9002      	str	r0, [sp, #8]
 8004aea:	9006      	str	r0, [sp, #24]
 8004aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004af0:	4809      	ldr	r0, [pc, #36]	; (8004b18 <siprintf+0x38>)
 8004af2:	9107      	str	r1, [sp, #28]
 8004af4:	9104      	str	r1, [sp, #16]
 8004af6:	4909      	ldr	r1, [pc, #36]	; (8004b1c <siprintf+0x3c>)
 8004af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004afc:	9105      	str	r1, [sp, #20]
 8004afe:	6800      	ldr	r0, [r0, #0]
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	a902      	add	r1, sp, #8
 8004b04:	f001 fb32 	bl	800616c <_svfiprintf_r>
 8004b08:	9b02      	ldr	r3, [sp, #8]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	b01c      	add	sp, #112	; 0x70
 8004b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b14:	b003      	add	sp, #12
 8004b16:	4770      	bx	lr
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	ffff0208 	.word	0xffff0208

08004b20 <quorem>:
 8004b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	6903      	ldr	r3, [r0, #16]
 8004b26:	690c      	ldr	r4, [r1, #16]
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	4607      	mov	r7, r0
 8004b2c:	f2c0 8081 	blt.w	8004c32 <quorem+0x112>
 8004b30:	3c01      	subs	r4, #1
 8004b32:	f101 0814 	add.w	r8, r1, #20
 8004b36:	f100 0514 	add.w	r5, r0, #20
 8004b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b54:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b58:	d331      	bcc.n	8004bbe <quorem+0x9e>
 8004b5a:	f04f 0e00 	mov.w	lr, #0
 8004b5e:	4640      	mov	r0, r8
 8004b60:	46ac      	mov	ip, r5
 8004b62:	46f2      	mov	sl, lr
 8004b64:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b68:	b293      	uxth	r3, r2
 8004b6a:	fb06 e303 	mla	r3, r6, r3, lr
 8004b6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	ebaa 0303 	sub.w	r3, sl, r3
 8004b78:	0c12      	lsrs	r2, r2, #16
 8004b7a:	f8dc a000 	ldr.w	sl, [ip]
 8004b7e:	fb06 e202 	mla	r2, r6, r2, lr
 8004b82:	fa13 f38a 	uxtah	r3, r3, sl
 8004b86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b8a:	fa1f fa82 	uxth.w	sl, r2
 8004b8e:	f8dc 2000 	ldr.w	r2, [ip]
 8004b92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004b96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ba0:	4581      	cmp	r9, r0
 8004ba2:	f84c 3b04 	str.w	r3, [ip], #4
 8004ba6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004baa:	d2db      	bcs.n	8004b64 <quorem+0x44>
 8004bac:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bb0:	b92b      	cbnz	r3, 8004bbe <quorem+0x9e>
 8004bb2:	9b01      	ldr	r3, [sp, #4]
 8004bb4:	3b04      	subs	r3, #4
 8004bb6:	429d      	cmp	r5, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	d32e      	bcc.n	8004c1a <quorem+0xfa>
 8004bbc:	613c      	str	r4, [r7, #16]
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f001 f8be 	bl	8005d40 <__mcmp>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	db24      	blt.n	8004c12 <quorem+0xf2>
 8004bc8:	3601      	adds	r6, #1
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f04f 0c00 	mov.w	ip, #0
 8004bd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bd4:	f8d0 e000 	ldr.w	lr, [r0]
 8004bd8:	b293      	uxth	r3, r2
 8004bda:	ebac 0303 	sub.w	r3, ip, r3
 8004bde:	0c12      	lsrs	r2, r2, #16
 8004be0:	fa13 f38e 	uxtah	r3, r3, lr
 8004be4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004be8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bf2:	45c1      	cmp	r9, r8
 8004bf4:	f840 3b04 	str.w	r3, [r0], #4
 8004bf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bfc:	d2e8      	bcs.n	8004bd0 <quorem+0xb0>
 8004bfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c06:	b922      	cbnz	r2, 8004c12 <quorem+0xf2>
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	429d      	cmp	r5, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	d30a      	bcc.n	8004c26 <quorem+0x106>
 8004c10:	613c      	str	r4, [r7, #16]
 8004c12:	4630      	mov	r0, r6
 8004c14:	b003      	add	sp, #12
 8004c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	3b04      	subs	r3, #4
 8004c1e:	2a00      	cmp	r2, #0
 8004c20:	d1cc      	bne.n	8004bbc <quorem+0x9c>
 8004c22:	3c01      	subs	r4, #1
 8004c24:	e7c7      	b.n	8004bb6 <quorem+0x96>
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	3b04      	subs	r3, #4
 8004c2a:	2a00      	cmp	r2, #0
 8004c2c:	d1f0      	bne.n	8004c10 <quorem+0xf0>
 8004c2e:	3c01      	subs	r4, #1
 8004c30:	e7eb      	b.n	8004c0a <quorem+0xea>
 8004c32:	2000      	movs	r0, #0
 8004c34:	e7ee      	b.n	8004c14 <quorem+0xf4>
	...

08004c38 <_dtoa_r>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	ed2d 8b02 	vpush	{d8}
 8004c40:	ec57 6b10 	vmov	r6, r7, d0
 8004c44:	b095      	sub	sp, #84	; 0x54
 8004c46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c4c:	9105      	str	r1, [sp, #20]
 8004c4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c52:	4604      	mov	r4, r0
 8004c54:	9209      	str	r2, [sp, #36]	; 0x24
 8004c56:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c58:	b975      	cbnz	r5, 8004c78 <_dtoa_r+0x40>
 8004c5a:	2010      	movs	r0, #16
 8004c5c:	f000 fddc 	bl	8005818 <malloc>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6260      	str	r0, [r4, #36]	; 0x24
 8004c64:	b920      	cbnz	r0, 8004c70 <_dtoa_r+0x38>
 8004c66:	4bb2      	ldr	r3, [pc, #712]	; (8004f30 <_dtoa_r+0x2f8>)
 8004c68:	21ea      	movs	r1, #234	; 0xea
 8004c6a:	48b2      	ldr	r0, [pc, #712]	; (8004f34 <_dtoa_r+0x2fc>)
 8004c6c:	f001 fb8e 	bl	800638c <__assert_func>
 8004c70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c74:	6005      	str	r5, [r0, #0]
 8004c76:	60c5      	str	r5, [r0, #12]
 8004c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	b151      	cbz	r1, 8004c94 <_dtoa_r+0x5c>
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	604a      	str	r2, [r1, #4]
 8004c82:	2301      	movs	r3, #1
 8004c84:	4093      	lsls	r3, r2
 8004c86:	608b      	str	r3, [r1, #8]
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f000 fe1b 	bl	80058c4 <_Bfree>
 8004c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	1e3b      	subs	r3, r7, #0
 8004c96:	bfb9      	ittee	lt
 8004c98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c9c:	9303      	strlt	r3, [sp, #12]
 8004c9e:	2300      	movge	r3, #0
 8004ca0:	f8c8 3000 	strge.w	r3, [r8]
 8004ca4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004ca8:	4ba3      	ldr	r3, [pc, #652]	; (8004f38 <_dtoa_r+0x300>)
 8004caa:	bfbc      	itt	lt
 8004cac:	2201      	movlt	r2, #1
 8004cae:	f8c8 2000 	strlt.w	r2, [r8]
 8004cb2:	ea33 0309 	bics.w	r3, r3, r9
 8004cb6:	d11b      	bne.n	8004cf0 <_dtoa_r+0xb8>
 8004cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cba:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cc4:	4333      	orrs	r3, r6
 8004cc6:	f000 857a 	beq.w	80057be <_dtoa_r+0xb86>
 8004cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ccc:	b963      	cbnz	r3, 8004ce8 <_dtoa_r+0xb0>
 8004cce:	4b9b      	ldr	r3, [pc, #620]	; (8004f3c <_dtoa_r+0x304>)
 8004cd0:	e024      	b.n	8004d1c <_dtoa_r+0xe4>
 8004cd2:	4b9b      	ldr	r3, [pc, #620]	; (8004f40 <_dtoa_r+0x308>)
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	9800      	ldr	r0, [sp, #0]
 8004cde:	b015      	add	sp, #84	; 0x54
 8004ce0:	ecbd 8b02 	vpop	{d8}
 8004ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce8:	4b94      	ldr	r3, [pc, #592]	; (8004f3c <_dtoa_r+0x304>)
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	3303      	adds	r3, #3
 8004cee:	e7f3      	b.n	8004cd8 <_dtoa_r+0xa0>
 8004cf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	ec51 0b17 	vmov	r0, r1, d7
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004d00:	f7fb fef2 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d04:	4680      	mov	r8, r0
 8004d06:	b158      	cbz	r0, 8004d20 <_dtoa_r+0xe8>
 8004d08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8551 	beq.w	80057b8 <_dtoa_r+0xb80>
 8004d16:	488b      	ldr	r0, [pc, #556]	; (8004f44 <_dtoa_r+0x30c>)
 8004d18:	6018      	str	r0, [r3, #0]
 8004d1a:	1e43      	subs	r3, r0, #1
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	e7dd      	b.n	8004cdc <_dtoa_r+0xa4>
 8004d20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004d24:	aa12      	add	r2, sp, #72	; 0x48
 8004d26:	a913      	add	r1, sp, #76	; 0x4c
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f001 f8ad 	bl	8005e88 <__d2b>
 8004d2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d32:	4683      	mov	fp, r0
 8004d34:	2d00      	cmp	r5, #0
 8004d36:	d07c      	beq.n	8004e32 <_dtoa_r+0x1fa>
 8004d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004d46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d52:	4b7d      	ldr	r3, [pc, #500]	; (8004f48 <_dtoa_r+0x310>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	4630      	mov	r0, r6
 8004d58:	4639      	mov	r1, r7
 8004d5a:	f7fb faa5 	bl	80002a8 <__aeabi_dsub>
 8004d5e:	a36e      	add	r3, pc, #440	; (adr r3, 8004f18 <_dtoa_r+0x2e0>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f7fb fc58 	bl	8000618 <__aeabi_dmul>
 8004d68:	a36d      	add	r3, pc, #436	; (adr r3, 8004f20 <_dtoa_r+0x2e8>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb fa9d 	bl	80002ac <__adddf3>
 8004d72:	4606      	mov	r6, r0
 8004d74:	4628      	mov	r0, r5
 8004d76:	460f      	mov	r7, r1
 8004d78:	f7fb fbe4 	bl	8000544 <__aeabi_i2d>
 8004d7c:	a36a      	add	r3, pc, #424	; (adr r3, 8004f28 <_dtoa_r+0x2f0>)
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f7fb fc49 	bl	8000618 <__aeabi_dmul>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	f7fb fa8d 	bl	80002ac <__adddf3>
 8004d92:	4606      	mov	r6, r0
 8004d94:	460f      	mov	r7, r1
 8004d96:	f7fb feef 	bl	8000b78 <__aeabi_d2iz>
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	4682      	mov	sl, r0
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4630      	mov	r0, r6
 8004da2:	4639      	mov	r1, r7
 8004da4:	f7fb feaa 	bl	8000afc <__aeabi_dcmplt>
 8004da8:	b148      	cbz	r0, 8004dbe <_dtoa_r+0x186>
 8004daa:	4650      	mov	r0, sl
 8004dac:	f7fb fbca 	bl	8000544 <__aeabi_i2d>
 8004db0:	4632      	mov	r2, r6
 8004db2:	463b      	mov	r3, r7
 8004db4:	f7fb fe98 	bl	8000ae8 <__aeabi_dcmpeq>
 8004db8:	b908      	cbnz	r0, 8004dbe <_dtoa_r+0x186>
 8004dba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dbe:	f1ba 0f16 	cmp.w	sl, #22
 8004dc2:	d854      	bhi.n	8004e6e <_dtoa_r+0x236>
 8004dc4:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <_dtoa_r+0x314>)
 8004dc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dd2:	f7fb fe93 	bl	8000afc <__aeabi_dcmplt>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d04b      	beq.n	8004e72 <_dtoa_r+0x23a>
 8004dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dde:	2300      	movs	r3, #0
 8004de0:	930e      	str	r3, [sp, #56]	; 0x38
 8004de2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004de4:	1b5d      	subs	r5, r3, r5
 8004de6:	1e6b      	subs	r3, r5, #1
 8004de8:	9304      	str	r3, [sp, #16]
 8004dea:	bf43      	ittte	mi
 8004dec:	2300      	movmi	r3, #0
 8004dee:	f1c5 0801 	rsbmi	r8, r5, #1
 8004df2:	9304      	strmi	r3, [sp, #16]
 8004df4:	f04f 0800 	movpl.w	r8, #0
 8004df8:	f1ba 0f00 	cmp.w	sl, #0
 8004dfc:	db3b      	blt.n	8004e76 <_dtoa_r+0x23e>
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004e04:	4453      	add	r3, sl
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	9306      	str	r3, [sp, #24]
 8004e0c:	9b05      	ldr	r3, [sp, #20]
 8004e0e:	2b09      	cmp	r3, #9
 8004e10:	d869      	bhi.n	8004ee6 <_dtoa_r+0x2ae>
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	bfc4      	itt	gt
 8004e16:	3b04      	subgt	r3, #4
 8004e18:	9305      	strgt	r3, [sp, #20]
 8004e1a:	9b05      	ldr	r3, [sp, #20]
 8004e1c:	f1a3 0302 	sub.w	r3, r3, #2
 8004e20:	bfcc      	ite	gt
 8004e22:	2500      	movgt	r5, #0
 8004e24:	2501      	movle	r5, #1
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d869      	bhi.n	8004efe <_dtoa_r+0x2c6>
 8004e2a:	e8df f003 	tbb	[pc, r3]
 8004e2e:	4e2c      	.short	0x4e2c
 8004e30:	5a4c      	.short	0x5a4c
 8004e32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004e36:	441d      	add	r5, r3
 8004e38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	bfc1      	itttt	gt
 8004e40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e48:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e50:	bfda      	itte	le
 8004e52:	f1c3 0320 	rsble	r3, r3, #32
 8004e56:	fa06 f003 	lslle.w	r0, r6, r3
 8004e5a:	4318      	orrgt	r0, r3
 8004e5c:	f7fb fb62 	bl	8000524 <__aeabi_ui2d>
 8004e60:	2301      	movs	r3, #1
 8004e62:	4606      	mov	r6, r0
 8004e64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e68:	3d01      	subs	r5, #1
 8004e6a:	9310      	str	r3, [sp, #64]	; 0x40
 8004e6c:	e771      	b.n	8004d52 <_dtoa_r+0x11a>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e7b6      	b.n	8004de0 <_dtoa_r+0x1a8>
 8004e72:	900e      	str	r0, [sp, #56]	; 0x38
 8004e74:	e7b5      	b.n	8004de2 <_dtoa_r+0x1aa>
 8004e76:	f1ca 0300 	rsb	r3, sl, #0
 8004e7a:	9306      	str	r3, [sp, #24]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	eba8 080a 	sub.w	r8, r8, sl
 8004e82:	930d      	str	r3, [sp, #52]	; 0x34
 8004e84:	e7c2      	b.n	8004e0c <_dtoa_r+0x1d4>
 8004e86:	2300      	movs	r3, #0
 8004e88:	9308      	str	r3, [sp, #32]
 8004e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	dc39      	bgt.n	8004f04 <_dtoa_r+0x2cc>
 8004e90:	f04f 0901 	mov.w	r9, #1
 8004e94:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e98:	464b      	mov	r3, r9
 8004e9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004e9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	6042      	str	r2, [r0, #4]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	f102 0614 	add.w	r6, r2, #20
 8004eaa:	429e      	cmp	r6, r3
 8004eac:	6841      	ldr	r1, [r0, #4]
 8004eae:	d92f      	bls.n	8004f10 <_dtoa_r+0x2d8>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 fcc7 	bl	8005844 <_Balloc>
 8004eb6:	9000      	str	r0, [sp, #0]
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d14b      	bne.n	8004f54 <_dtoa_r+0x31c>
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <_dtoa_r+0x318>)
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ec4:	e6d1      	b.n	8004c6a <_dtoa_r+0x32>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e7de      	b.n	8004e88 <_dtoa_r+0x250>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9308      	str	r3, [sp, #32]
 8004ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed0:	eb0a 0903 	add.w	r9, sl, r3
 8004ed4:	f109 0301 	add.w	r3, r9, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	bfb8      	it	lt
 8004ede:	2301      	movlt	r3, #1
 8004ee0:	e7dd      	b.n	8004e9e <_dtoa_r+0x266>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e7f2      	b.n	8004ecc <_dtoa_r+0x294>
 8004ee6:	2501      	movs	r5, #1
 8004ee8:	2300      	movs	r3, #0
 8004eea:	9305      	str	r3, [sp, #20]
 8004eec:	9508      	str	r5, [sp, #32]
 8004eee:	f04f 39ff 	mov.w	r9, #4294967295
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ef8:	2312      	movs	r3, #18
 8004efa:	9209      	str	r2, [sp, #36]	; 0x24
 8004efc:	e7cf      	b.n	8004e9e <_dtoa_r+0x266>
 8004efe:	2301      	movs	r3, #1
 8004f00:	9308      	str	r3, [sp, #32]
 8004f02:	e7f4      	b.n	8004eee <_dtoa_r+0x2b6>
 8004f04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004f08:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	e7c6      	b.n	8004e9e <_dtoa_r+0x266>
 8004f10:	3101      	adds	r1, #1
 8004f12:	6041      	str	r1, [r0, #4]
 8004f14:	0052      	lsls	r2, r2, #1
 8004f16:	e7c6      	b.n	8004ea6 <_dtoa_r+0x26e>
 8004f18:	636f4361 	.word	0x636f4361
 8004f1c:	3fd287a7 	.word	0x3fd287a7
 8004f20:	8b60c8b3 	.word	0x8b60c8b3
 8004f24:	3fc68a28 	.word	0x3fc68a28
 8004f28:	509f79fb 	.word	0x509f79fb
 8004f2c:	3fd34413 	.word	0x3fd34413
 8004f30:	08007021 	.word	0x08007021
 8004f34:	08007038 	.word	0x08007038
 8004f38:	7ff00000 	.word	0x7ff00000
 8004f3c:	0800701d 	.word	0x0800701d
 8004f40:	08007014 	.word	0x08007014
 8004f44:	08006ff1 	.word	0x08006ff1
 8004f48:	3ff80000 	.word	0x3ff80000
 8004f4c:	08007130 	.word	0x08007130
 8004f50:	08007097 	.word	0x08007097
 8004f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f56:	9a00      	ldr	r2, [sp, #0]
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	9b01      	ldr	r3, [sp, #4]
 8004f5c:	2b0e      	cmp	r3, #14
 8004f5e:	f200 80ad 	bhi.w	80050bc <_dtoa_r+0x484>
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	f000 80aa 	beq.w	80050bc <_dtoa_r+0x484>
 8004f68:	f1ba 0f00 	cmp.w	sl, #0
 8004f6c:	dd36      	ble.n	8004fdc <_dtoa_r+0x3a4>
 8004f6e:	4ac3      	ldr	r2, [pc, #780]	; (800527c <_dtoa_r+0x644>)
 8004f70:	f00a 030f 	and.w	r3, sl, #15
 8004f74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f78:	ed93 7b00 	vldr	d7, [r3]
 8004f7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004f80:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004f84:	eeb0 8a47 	vmov.f32	s16, s14
 8004f88:	eef0 8a67 	vmov.f32	s17, s15
 8004f8c:	d016      	beq.n	8004fbc <_dtoa_r+0x384>
 8004f8e:	4bbc      	ldr	r3, [pc, #752]	; (8005280 <_dtoa_r+0x648>)
 8004f90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f98:	f7fb fc68 	bl	800086c <__aeabi_ddiv>
 8004f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fa0:	f007 070f 	and.w	r7, r7, #15
 8004fa4:	2503      	movs	r5, #3
 8004fa6:	4eb6      	ldr	r6, [pc, #728]	; (8005280 <_dtoa_r+0x648>)
 8004fa8:	b957      	cbnz	r7, 8004fc0 <_dtoa_r+0x388>
 8004faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fae:	ec53 2b18 	vmov	r2, r3, d8
 8004fb2:	f7fb fc5b 	bl	800086c <__aeabi_ddiv>
 8004fb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fba:	e029      	b.n	8005010 <_dtoa_r+0x3d8>
 8004fbc:	2502      	movs	r5, #2
 8004fbe:	e7f2      	b.n	8004fa6 <_dtoa_r+0x36e>
 8004fc0:	07f9      	lsls	r1, r7, #31
 8004fc2:	d508      	bpl.n	8004fd6 <_dtoa_r+0x39e>
 8004fc4:	ec51 0b18 	vmov	r0, r1, d8
 8004fc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fcc:	f7fb fb24 	bl	8000618 <__aeabi_dmul>
 8004fd0:	ec41 0b18 	vmov	d8, r0, r1
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	107f      	asrs	r7, r7, #1
 8004fd8:	3608      	adds	r6, #8
 8004fda:	e7e5      	b.n	8004fa8 <_dtoa_r+0x370>
 8004fdc:	f000 80a6 	beq.w	800512c <_dtoa_r+0x4f4>
 8004fe0:	f1ca 0600 	rsb	r6, sl, #0
 8004fe4:	4ba5      	ldr	r3, [pc, #660]	; (800527c <_dtoa_r+0x644>)
 8004fe6:	4fa6      	ldr	r7, [pc, #664]	; (8005280 <_dtoa_r+0x648>)
 8004fe8:	f006 020f 	and.w	r2, r6, #15
 8004fec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ff8:	f7fb fb0e 	bl	8000618 <__aeabi_dmul>
 8004ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005000:	1136      	asrs	r6, r6, #4
 8005002:	2300      	movs	r3, #0
 8005004:	2502      	movs	r5, #2
 8005006:	2e00      	cmp	r6, #0
 8005008:	f040 8085 	bne.w	8005116 <_dtoa_r+0x4de>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1d2      	bne.n	8004fb6 <_dtoa_r+0x37e>
 8005010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 808c 	beq.w	8005130 <_dtoa_r+0x4f8>
 8005018:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800501c:	4b99      	ldr	r3, [pc, #612]	; (8005284 <_dtoa_r+0x64c>)
 800501e:	2200      	movs	r2, #0
 8005020:	4630      	mov	r0, r6
 8005022:	4639      	mov	r1, r7
 8005024:	f7fb fd6a 	bl	8000afc <__aeabi_dcmplt>
 8005028:	2800      	cmp	r0, #0
 800502a:	f000 8081 	beq.w	8005130 <_dtoa_r+0x4f8>
 800502e:	9b01      	ldr	r3, [sp, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d07d      	beq.n	8005130 <_dtoa_r+0x4f8>
 8005034:	f1b9 0f00 	cmp.w	r9, #0
 8005038:	dd3c      	ble.n	80050b4 <_dtoa_r+0x47c>
 800503a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800503e:	9307      	str	r3, [sp, #28]
 8005040:	2200      	movs	r2, #0
 8005042:	4b91      	ldr	r3, [pc, #580]	; (8005288 <_dtoa_r+0x650>)
 8005044:	4630      	mov	r0, r6
 8005046:	4639      	mov	r1, r7
 8005048:	f7fb fae6 	bl	8000618 <__aeabi_dmul>
 800504c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005050:	3501      	adds	r5, #1
 8005052:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005056:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800505a:	4628      	mov	r0, r5
 800505c:	f7fb fa72 	bl	8000544 <__aeabi_i2d>
 8005060:	4632      	mov	r2, r6
 8005062:	463b      	mov	r3, r7
 8005064:	f7fb fad8 	bl	8000618 <__aeabi_dmul>
 8005068:	4b88      	ldr	r3, [pc, #544]	; (800528c <_dtoa_r+0x654>)
 800506a:	2200      	movs	r2, #0
 800506c:	f7fb f91e 	bl	80002ac <__adddf3>
 8005070:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005078:	9303      	str	r3, [sp, #12]
 800507a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800507c:	2b00      	cmp	r3, #0
 800507e:	d15c      	bne.n	800513a <_dtoa_r+0x502>
 8005080:	4b83      	ldr	r3, [pc, #524]	; (8005290 <_dtoa_r+0x658>)
 8005082:	2200      	movs	r2, #0
 8005084:	4630      	mov	r0, r6
 8005086:	4639      	mov	r1, r7
 8005088:	f7fb f90e 	bl	80002a8 <__aeabi_dsub>
 800508c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005090:	4606      	mov	r6, r0
 8005092:	460f      	mov	r7, r1
 8005094:	f7fb fd50 	bl	8000b38 <__aeabi_dcmpgt>
 8005098:	2800      	cmp	r0, #0
 800509a:	f040 8296 	bne.w	80055ca <_dtoa_r+0x992>
 800509e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80050a2:	4630      	mov	r0, r6
 80050a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050a8:	4639      	mov	r1, r7
 80050aa:	f7fb fd27 	bl	8000afc <__aeabi_dcmplt>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	f040 8288 	bne.w	80055c4 <_dtoa_r+0x98c>
 80050b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f2c0 8158 	blt.w	8005374 <_dtoa_r+0x73c>
 80050c4:	f1ba 0f0e 	cmp.w	sl, #14
 80050c8:	f300 8154 	bgt.w	8005374 <_dtoa_r+0x73c>
 80050cc:	4b6b      	ldr	r3, [pc, #428]	; (800527c <_dtoa_r+0x644>)
 80050ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f280 80e3 	bge.w	80052a4 <_dtoa_r+0x66c>
 80050de:	9b01      	ldr	r3, [sp, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f300 80df 	bgt.w	80052a4 <_dtoa_r+0x66c>
 80050e6:	f040 826d 	bne.w	80055c4 <_dtoa_r+0x98c>
 80050ea:	4b69      	ldr	r3, [pc, #420]	; (8005290 <_dtoa_r+0x658>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	4640      	mov	r0, r8
 80050f0:	4649      	mov	r1, r9
 80050f2:	f7fb fa91 	bl	8000618 <__aeabi_dmul>
 80050f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050fa:	f7fb fd13 	bl	8000b24 <__aeabi_dcmpge>
 80050fe:	9e01      	ldr	r6, [sp, #4]
 8005100:	4637      	mov	r7, r6
 8005102:	2800      	cmp	r0, #0
 8005104:	f040 8243 	bne.w	800558e <_dtoa_r+0x956>
 8005108:	9d00      	ldr	r5, [sp, #0]
 800510a:	2331      	movs	r3, #49	; 0x31
 800510c:	f805 3b01 	strb.w	r3, [r5], #1
 8005110:	f10a 0a01 	add.w	sl, sl, #1
 8005114:	e23f      	b.n	8005596 <_dtoa_r+0x95e>
 8005116:	07f2      	lsls	r2, r6, #31
 8005118:	d505      	bpl.n	8005126 <_dtoa_r+0x4ee>
 800511a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511e:	f7fb fa7b 	bl	8000618 <__aeabi_dmul>
 8005122:	3501      	adds	r5, #1
 8005124:	2301      	movs	r3, #1
 8005126:	1076      	asrs	r6, r6, #1
 8005128:	3708      	adds	r7, #8
 800512a:	e76c      	b.n	8005006 <_dtoa_r+0x3ce>
 800512c:	2502      	movs	r5, #2
 800512e:	e76f      	b.n	8005010 <_dtoa_r+0x3d8>
 8005130:	9b01      	ldr	r3, [sp, #4]
 8005132:	f8cd a01c 	str.w	sl, [sp, #28]
 8005136:	930c      	str	r3, [sp, #48]	; 0x30
 8005138:	e78d      	b.n	8005056 <_dtoa_r+0x41e>
 800513a:	9900      	ldr	r1, [sp, #0]
 800513c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800513e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005140:	4b4e      	ldr	r3, [pc, #312]	; (800527c <_dtoa_r+0x644>)
 8005142:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005146:	4401      	add	r1, r0
 8005148:	9102      	str	r1, [sp, #8]
 800514a:	9908      	ldr	r1, [sp, #32]
 800514c:	eeb0 8a47 	vmov.f32	s16, s14
 8005150:	eef0 8a67 	vmov.f32	s17, s15
 8005154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005158:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800515c:	2900      	cmp	r1, #0
 800515e:	d045      	beq.n	80051ec <_dtoa_r+0x5b4>
 8005160:	494c      	ldr	r1, [pc, #304]	; (8005294 <_dtoa_r+0x65c>)
 8005162:	2000      	movs	r0, #0
 8005164:	f7fb fb82 	bl	800086c <__aeabi_ddiv>
 8005168:	ec53 2b18 	vmov	r2, r3, d8
 800516c:	f7fb f89c 	bl	80002a8 <__aeabi_dsub>
 8005170:	9d00      	ldr	r5, [sp, #0]
 8005172:	ec41 0b18 	vmov	d8, r0, r1
 8005176:	4639      	mov	r1, r7
 8005178:	4630      	mov	r0, r6
 800517a:	f7fb fcfd 	bl	8000b78 <__aeabi_d2iz>
 800517e:	900c      	str	r0, [sp, #48]	; 0x30
 8005180:	f7fb f9e0 	bl	8000544 <__aeabi_i2d>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4630      	mov	r0, r6
 800518a:	4639      	mov	r1, r7
 800518c:	f7fb f88c 	bl	80002a8 <__aeabi_dsub>
 8005190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005192:	3330      	adds	r3, #48	; 0x30
 8005194:	f805 3b01 	strb.w	r3, [r5], #1
 8005198:	ec53 2b18 	vmov	r2, r3, d8
 800519c:	4606      	mov	r6, r0
 800519e:	460f      	mov	r7, r1
 80051a0:	f7fb fcac 	bl	8000afc <__aeabi_dcmplt>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d165      	bne.n	8005274 <_dtoa_r+0x63c>
 80051a8:	4632      	mov	r2, r6
 80051aa:	463b      	mov	r3, r7
 80051ac:	4935      	ldr	r1, [pc, #212]	; (8005284 <_dtoa_r+0x64c>)
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7fb f87a 	bl	80002a8 <__aeabi_dsub>
 80051b4:	ec53 2b18 	vmov	r2, r3, d8
 80051b8:	f7fb fca0 	bl	8000afc <__aeabi_dcmplt>
 80051bc:	2800      	cmp	r0, #0
 80051be:	f040 80b9 	bne.w	8005334 <_dtoa_r+0x6fc>
 80051c2:	9b02      	ldr	r3, [sp, #8]
 80051c4:	429d      	cmp	r5, r3
 80051c6:	f43f af75 	beq.w	80050b4 <_dtoa_r+0x47c>
 80051ca:	4b2f      	ldr	r3, [pc, #188]	; (8005288 <_dtoa_r+0x650>)
 80051cc:	ec51 0b18 	vmov	r0, r1, d8
 80051d0:	2200      	movs	r2, #0
 80051d2:	f7fb fa21 	bl	8000618 <__aeabi_dmul>
 80051d6:	4b2c      	ldr	r3, [pc, #176]	; (8005288 <_dtoa_r+0x650>)
 80051d8:	ec41 0b18 	vmov	d8, r0, r1
 80051dc:	2200      	movs	r2, #0
 80051de:	4630      	mov	r0, r6
 80051e0:	4639      	mov	r1, r7
 80051e2:	f7fb fa19 	bl	8000618 <__aeabi_dmul>
 80051e6:	4606      	mov	r6, r0
 80051e8:	460f      	mov	r7, r1
 80051ea:	e7c4      	b.n	8005176 <_dtoa_r+0x53e>
 80051ec:	ec51 0b17 	vmov	r0, r1, d7
 80051f0:	f7fb fa12 	bl	8000618 <__aeabi_dmul>
 80051f4:	9b02      	ldr	r3, [sp, #8]
 80051f6:	9d00      	ldr	r5, [sp, #0]
 80051f8:	930c      	str	r3, [sp, #48]	; 0x30
 80051fa:	ec41 0b18 	vmov	d8, r0, r1
 80051fe:	4639      	mov	r1, r7
 8005200:	4630      	mov	r0, r6
 8005202:	f7fb fcb9 	bl	8000b78 <__aeabi_d2iz>
 8005206:	9011      	str	r0, [sp, #68]	; 0x44
 8005208:	f7fb f99c 	bl	8000544 <__aeabi_i2d>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4630      	mov	r0, r6
 8005212:	4639      	mov	r1, r7
 8005214:	f7fb f848 	bl	80002a8 <__aeabi_dsub>
 8005218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800521a:	3330      	adds	r3, #48	; 0x30
 800521c:	f805 3b01 	strb.w	r3, [r5], #1
 8005220:	9b02      	ldr	r3, [sp, #8]
 8005222:	429d      	cmp	r5, r3
 8005224:	4606      	mov	r6, r0
 8005226:	460f      	mov	r7, r1
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	d134      	bne.n	8005298 <_dtoa_r+0x660>
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <_dtoa_r+0x65c>)
 8005230:	ec51 0b18 	vmov	r0, r1, d8
 8005234:	f7fb f83a 	bl	80002ac <__adddf3>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4630      	mov	r0, r6
 800523e:	4639      	mov	r1, r7
 8005240:	f7fb fc7a 	bl	8000b38 <__aeabi_dcmpgt>
 8005244:	2800      	cmp	r0, #0
 8005246:	d175      	bne.n	8005334 <_dtoa_r+0x6fc>
 8005248:	ec53 2b18 	vmov	r2, r3, d8
 800524c:	4911      	ldr	r1, [pc, #68]	; (8005294 <_dtoa_r+0x65c>)
 800524e:	2000      	movs	r0, #0
 8005250:	f7fb f82a 	bl	80002a8 <__aeabi_dsub>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4630      	mov	r0, r6
 800525a:	4639      	mov	r1, r7
 800525c:	f7fb fc4e 	bl	8000afc <__aeabi_dcmplt>
 8005260:	2800      	cmp	r0, #0
 8005262:	f43f af27 	beq.w	80050b4 <_dtoa_r+0x47c>
 8005266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005268:	1e6b      	subs	r3, r5, #1
 800526a:	930c      	str	r3, [sp, #48]	; 0x30
 800526c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d0f8      	beq.n	8005266 <_dtoa_r+0x62e>
 8005274:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005278:	e04a      	b.n	8005310 <_dtoa_r+0x6d8>
 800527a:	bf00      	nop
 800527c:	08007130 	.word	0x08007130
 8005280:	08007108 	.word	0x08007108
 8005284:	3ff00000 	.word	0x3ff00000
 8005288:	40240000 	.word	0x40240000
 800528c:	401c0000 	.word	0x401c0000
 8005290:	40140000 	.word	0x40140000
 8005294:	3fe00000 	.word	0x3fe00000
 8005298:	4baf      	ldr	r3, [pc, #700]	; (8005558 <_dtoa_r+0x920>)
 800529a:	f7fb f9bd 	bl	8000618 <__aeabi_dmul>
 800529e:	4606      	mov	r6, r0
 80052a0:	460f      	mov	r7, r1
 80052a2:	e7ac      	b.n	80051fe <_dtoa_r+0x5c6>
 80052a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052a8:	9d00      	ldr	r5, [sp, #0]
 80052aa:	4642      	mov	r2, r8
 80052ac:	464b      	mov	r3, r9
 80052ae:	4630      	mov	r0, r6
 80052b0:	4639      	mov	r1, r7
 80052b2:	f7fb fadb 	bl	800086c <__aeabi_ddiv>
 80052b6:	f7fb fc5f 	bl	8000b78 <__aeabi_d2iz>
 80052ba:	9002      	str	r0, [sp, #8]
 80052bc:	f7fb f942 	bl	8000544 <__aeabi_i2d>
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	f7fb f9a8 	bl	8000618 <__aeabi_dmul>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4630      	mov	r0, r6
 80052ce:	4639      	mov	r1, r7
 80052d0:	f7fa ffea 	bl	80002a8 <__aeabi_dsub>
 80052d4:	9e02      	ldr	r6, [sp, #8]
 80052d6:	9f01      	ldr	r7, [sp, #4]
 80052d8:	3630      	adds	r6, #48	; 0x30
 80052da:	f805 6b01 	strb.w	r6, [r5], #1
 80052de:	9e00      	ldr	r6, [sp, #0]
 80052e0:	1bae      	subs	r6, r5, r6
 80052e2:	42b7      	cmp	r7, r6
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	d137      	bne.n	800535a <_dtoa_r+0x722>
 80052ea:	f7fa ffdf 	bl	80002ac <__adddf3>
 80052ee:	4642      	mov	r2, r8
 80052f0:	464b      	mov	r3, r9
 80052f2:	4606      	mov	r6, r0
 80052f4:	460f      	mov	r7, r1
 80052f6:	f7fb fc1f 	bl	8000b38 <__aeabi_dcmpgt>
 80052fa:	b9c8      	cbnz	r0, 8005330 <_dtoa_r+0x6f8>
 80052fc:	4642      	mov	r2, r8
 80052fe:	464b      	mov	r3, r9
 8005300:	4630      	mov	r0, r6
 8005302:	4639      	mov	r1, r7
 8005304:	f7fb fbf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8005308:	b110      	cbz	r0, 8005310 <_dtoa_r+0x6d8>
 800530a:	9b02      	ldr	r3, [sp, #8]
 800530c:	07d9      	lsls	r1, r3, #31
 800530e:	d40f      	bmi.n	8005330 <_dtoa_r+0x6f8>
 8005310:	4620      	mov	r0, r4
 8005312:	4659      	mov	r1, fp
 8005314:	f000 fad6 	bl	80058c4 <_Bfree>
 8005318:	2300      	movs	r3, #0
 800531a:	702b      	strb	r3, [r5, #0]
 800531c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800531e:	f10a 0001 	add.w	r0, sl, #1
 8005322:	6018      	str	r0, [r3, #0]
 8005324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005326:	2b00      	cmp	r3, #0
 8005328:	f43f acd8 	beq.w	8004cdc <_dtoa_r+0xa4>
 800532c:	601d      	str	r5, [r3, #0]
 800532e:	e4d5      	b.n	8004cdc <_dtoa_r+0xa4>
 8005330:	f8cd a01c 	str.w	sl, [sp, #28]
 8005334:	462b      	mov	r3, r5
 8005336:	461d      	mov	r5, r3
 8005338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800533c:	2a39      	cmp	r2, #57	; 0x39
 800533e:	d108      	bne.n	8005352 <_dtoa_r+0x71a>
 8005340:	9a00      	ldr	r2, [sp, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d1f7      	bne.n	8005336 <_dtoa_r+0x6fe>
 8005346:	9a07      	ldr	r2, [sp, #28]
 8005348:	9900      	ldr	r1, [sp, #0]
 800534a:	3201      	adds	r2, #1
 800534c:	9207      	str	r2, [sp, #28]
 800534e:	2230      	movs	r2, #48	; 0x30
 8005350:	700a      	strb	r2, [r1, #0]
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	3201      	adds	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e78c      	b.n	8005274 <_dtoa_r+0x63c>
 800535a:	4b7f      	ldr	r3, [pc, #508]	; (8005558 <_dtoa_r+0x920>)
 800535c:	2200      	movs	r2, #0
 800535e:	f7fb f95b 	bl	8000618 <__aeabi_dmul>
 8005362:	2200      	movs	r2, #0
 8005364:	2300      	movs	r3, #0
 8005366:	4606      	mov	r6, r0
 8005368:	460f      	mov	r7, r1
 800536a:	f7fb fbbd 	bl	8000ae8 <__aeabi_dcmpeq>
 800536e:	2800      	cmp	r0, #0
 8005370:	d09b      	beq.n	80052aa <_dtoa_r+0x672>
 8005372:	e7cd      	b.n	8005310 <_dtoa_r+0x6d8>
 8005374:	9a08      	ldr	r2, [sp, #32]
 8005376:	2a00      	cmp	r2, #0
 8005378:	f000 80c4 	beq.w	8005504 <_dtoa_r+0x8cc>
 800537c:	9a05      	ldr	r2, [sp, #20]
 800537e:	2a01      	cmp	r2, #1
 8005380:	f300 80a8 	bgt.w	80054d4 <_dtoa_r+0x89c>
 8005384:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005386:	2a00      	cmp	r2, #0
 8005388:	f000 80a0 	beq.w	80054cc <_dtoa_r+0x894>
 800538c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005390:	9e06      	ldr	r6, [sp, #24]
 8005392:	4645      	mov	r5, r8
 8005394:	9a04      	ldr	r2, [sp, #16]
 8005396:	2101      	movs	r1, #1
 8005398:	441a      	add	r2, r3
 800539a:	4620      	mov	r0, r4
 800539c:	4498      	add	r8, r3
 800539e:	9204      	str	r2, [sp, #16]
 80053a0:	f000 fb4c 	bl	8005a3c <__i2b>
 80053a4:	4607      	mov	r7, r0
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	dd0b      	ble.n	80053c2 <_dtoa_r+0x78a>
 80053aa:	9b04      	ldr	r3, [sp, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	dd08      	ble.n	80053c2 <_dtoa_r+0x78a>
 80053b0:	42ab      	cmp	r3, r5
 80053b2:	9a04      	ldr	r2, [sp, #16]
 80053b4:	bfa8      	it	ge
 80053b6:	462b      	movge	r3, r5
 80053b8:	eba8 0803 	sub.w	r8, r8, r3
 80053bc:	1aed      	subs	r5, r5, r3
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	9304      	str	r3, [sp, #16]
 80053c2:	9b06      	ldr	r3, [sp, #24]
 80053c4:	b1fb      	cbz	r3, 8005406 <_dtoa_r+0x7ce>
 80053c6:	9b08      	ldr	r3, [sp, #32]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 809f 	beq.w	800550c <_dtoa_r+0x8d4>
 80053ce:	2e00      	cmp	r6, #0
 80053d0:	dd11      	ble.n	80053f6 <_dtoa_r+0x7be>
 80053d2:	4639      	mov	r1, r7
 80053d4:	4632      	mov	r2, r6
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 fbec 	bl	8005bb4 <__pow5mult>
 80053dc:	465a      	mov	r2, fp
 80053de:	4601      	mov	r1, r0
 80053e0:	4607      	mov	r7, r0
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 fb40 	bl	8005a68 <__multiply>
 80053e8:	4659      	mov	r1, fp
 80053ea:	9007      	str	r0, [sp, #28]
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 fa69 	bl	80058c4 <_Bfree>
 80053f2:	9b07      	ldr	r3, [sp, #28]
 80053f4:	469b      	mov	fp, r3
 80053f6:	9b06      	ldr	r3, [sp, #24]
 80053f8:	1b9a      	subs	r2, r3, r6
 80053fa:	d004      	beq.n	8005406 <_dtoa_r+0x7ce>
 80053fc:	4659      	mov	r1, fp
 80053fe:	4620      	mov	r0, r4
 8005400:	f000 fbd8 	bl	8005bb4 <__pow5mult>
 8005404:	4683      	mov	fp, r0
 8005406:	2101      	movs	r1, #1
 8005408:	4620      	mov	r0, r4
 800540a:	f000 fb17 	bl	8005a3c <__i2b>
 800540e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005410:	2b00      	cmp	r3, #0
 8005412:	4606      	mov	r6, r0
 8005414:	dd7c      	ble.n	8005510 <_dtoa_r+0x8d8>
 8005416:	461a      	mov	r2, r3
 8005418:	4601      	mov	r1, r0
 800541a:	4620      	mov	r0, r4
 800541c:	f000 fbca 	bl	8005bb4 <__pow5mult>
 8005420:	9b05      	ldr	r3, [sp, #20]
 8005422:	2b01      	cmp	r3, #1
 8005424:	4606      	mov	r6, r0
 8005426:	dd76      	ble.n	8005516 <_dtoa_r+0x8de>
 8005428:	2300      	movs	r3, #0
 800542a:	9306      	str	r3, [sp, #24]
 800542c:	6933      	ldr	r3, [r6, #16]
 800542e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005432:	6918      	ldr	r0, [r3, #16]
 8005434:	f000 fab2 	bl	800599c <__hi0bits>
 8005438:	f1c0 0020 	rsb	r0, r0, #32
 800543c:	9b04      	ldr	r3, [sp, #16]
 800543e:	4418      	add	r0, r3
 8005440:	f010 001f 	ands.w	r0, r0, #31
 8005444:	f000 8086 	beq.w	8005554 <_dtoa_r+0x91c>
 8005448:	f1c0 0320 	rsb	r3, r0, #32
 800544c:	2b04      	cmp	r3, #4
 800544e:	dd7f      	ble.n	8005550 <_dtoa_r+0x918>
 8005450:	f1c0 001c 	rsb	r0, r0, #28
 8005454:	9b04      	ldr	r3, [sp, #16]
 8005456:	4403      	add	r3, r0
 8005458:	4480      	add	r8, r0
 800545a:	4405      	add	r5, r0
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	f1b8 0f00 	cmp.w	r8, #0
 8005462:	dd05      	ble.n	8005470 <_dtoa_r+0x838>
 8005464:	4659      	mov	r1, fp
 8005466:	4642      	mov	r2, r8
 8005468:	4620      	mov	r0, r4
 800546a:	f000 fbfd 	bl	8005c68 <__lshift>
 800546e:	4683      	mov	fp, r0
 8005470:	9b04      	ldr	r3, [sp, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	dd05      	ble.n	8005482 <_dtoa_r+0x84a>
 8005476:	4631      	mov	r1, r6
 8005478:	461a      	mov	r2, r3
 800547a:	4620      	mov	r0, r4
 800547c:	f000 fbf4 	bl	8005c68 <__lshift>
 8005480:	4606      	mov	r6, r0
 8005482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d069      	beq.n	800555c <_dtoa_r+0x924>
 8005488:	4631      	mov	r1, r6
 800548a:	4658      	mov	r0, fp
 800548c:	f000 fc58 	bl	8005d40 <__mcmp>
 8005490:	2800      	cmp	r0, #0
 8005492:	da63      	bge.n	800555c <_dtoa_r+0x924>
 8005494:	2300      	movs	r3, #0
 8005496:	4659      	mov	r1, fp
 8005498:	220a      	movs	r2, #10
 800549a:	4620      	mov	r0, r4
 800549c:	f000 fa34 	bl	8005908 <__multadd>
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054a6:	4683      	mov	fp, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 818f 	beq.w	80057cc <_dtoa_r+0xb94>
 80054ae:	4639      	mov	r1, r7
 80054b0:	2300      	movs	r3, #0
 80054b2:	220a      	movs	r2, #10
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 fa27 	bl	8005908 <__multadd>
 80054ba:	f1b9 0f00 	cmp.w	r9, #0
 80054be:	4607      	mov	r7, r0
 80054c0:	f300 808e 	bgt.w	80055e0 <_dtoa_r+0x9a8>
 80054c4:	9b05      	ldr	r3, [sp, #20]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	dc50      	bgt.n	800556c <_dtoa_r+0x934>
 80054ca:	e089      	b.n	80055e0 <_dtoa_r+0x9a8>
 80054cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054d2:	e75d      	b.n	8005390 <_dtoa_r+0x758>
 80054d4:	9b01      	ldr	r3, [sp, #4]
 80054d6:	1e5e      	subs	r6, r3, #1
 80054d8:	9b06      	ldr	r3, [sp, #24]
 80054da:	42b3      	cmp	r3, r6
 80054dc:	bfbf      	itttt	lt
 80054de:	9b06      	ldrlt	r3, [sp, #24]
 80054e0:	9606      	strlt	r6, [sp, #24]
 80054e2:	1af2      	sublt	r2, r6, r3
 80054e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80054e6:	bfb6      	itet	lt
 80054e8:	189b      	addlt	r3, r3, r2
 80054ea:	1b9e      	subge	r6, r3, r6
 80054ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80054ee:	9b01      	ldr	r3, [sp, #4]
 80054f0:	bfb8      	it	lt
 80054f2:	2600      	movlt	r6, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bfb5      	itete	lt
 80054f8:	eba8 0503 	sublt.w	r5, r8, r3
 80054fc:	9b01      	ldrge	r3, [sp, #4]
 80054fe:	2300      	movlt	r3, #0
 8005500:	4645      	movge	r5, r8
 8005502:	e747      	b.n	8005394 <_dtoa_r+0x75c>
 8005504:	9e06      	ldr	r6, [sp, #24]
 8005506:	9f08      	ldr	r7, [sp, #32]
 8005508:	4645      	mov	r5, r8
 800550a:	e74c      	b.n	80053a6 <_dtoa_r+0x76e>
 800550c:	9a06      	ldr	r2, [sp, #24]
 800550e:	e775      	b.n	80053fc <_dtoa_r+0x7c4>
 8005510:	9b05      	ldr	r3, [sp, #20]
 8005512:	2b01      	cmp	r3, #1
 8005514:	dc18      	bgt.n	8005548 <_dtoa_r+0x910>
 8005516:	9b02      	ldr	r3, [sp, #8]
 8005518:	b9b3      	cbnz	r3, 8005548 <_dtoa_r+0x910>
 800551a:	9b03      	ldr	r3, [sp, #12]
 800551c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005520:	b9a3      	cbnz	r3, 800554c <_dtoa_r+0x914>
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005528:	0d1b      	lsrs	r3, r3, #20
 800552a:	051b      	lsls	r3, r3, #20
 800552c:	b12b      	cbz	r3, 800553a <_dtoa_r+0x902>
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	3301      	adds	r3, #1
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	f108 0801 	add.w	r8, r8, #1
 8005538:	2301      	movs	r3, #1
 800553a:	9306      	str	r3, [sp, #24]
 800553c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800553e:	2b00      	cmp	r3, #0
 8005540:	f47f af74 	bne.w	800542c <_dtoa_r+0x7f4>
 8005544:	2001      	movs	r0, #1
 8005546:	e779      	b.n	800543c <_dtoa_r+0x804>
 8005548:	2300      	movs	r3, #0
 800554a:	e7f6      	b.n	800553a <_dtoa_r+0x902>
 800554c:	9b02      	ldr	r3, [sp, #8]
 800554e:	e7f4      	b.n	800553a <_dtoa_r+0x902>
 8005550:	d085      	beq.n	800545e <_dtoa_r+0x826>
 8005552:	4618      	mov	r0, r3
 8005554:	301c      	adds	r0, #28
 8005556:	e77d      	b.n	8005454 <_dtoa_r+0x81c>
 8005558:	40240000 	.word	0x40240000
 800555c:	9b01      	ldr	r3, [sp, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	dc38      	bgt.n	80055d4 <_dtoa_r+0x99c>
 8005562:	9b05      	ldr	r3, [sp, #20]
 8005564:	2b02      	cmp	r3, #2
 8005566:	dd35      	ble.n	80055d4 <_dtoa_r+0x99c>
 8005568:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800556c:	f1b9 0f00 	cmp.w	r9, #0
 8005570:	d10d      	bne.n	800558e <_dtoa_r+0x956>
 8005572:	4631      	mov	r1, r6
 8005574:	464b      	mov	r3, r9
 8005576:	2205      	movs	r2, #5
 8005578:	4620      	mov	r0, r4
 800557a:	f000 f9c5 	bl	8005908 <__multadd>
 800557e:	4601      	mov	r1, r0
 8005580:	4606      	mov	r6, r0
 8005582:	4658      	mov	r0, fp
 8005584:	f000 fbdc 	bl	8005d40 <__mcmp>
 8005588:	2800      	cmp	r0, #0
 800558a:	f73f adbd 	bgt.w	8005108 <_dtoa_r+0x4d0>
 800558e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005590:	9d00      	ldr	r5, [sp, #0]
 8005592:	ea6f 0a03 	mvn.w	sl, r3
 8005596:	f04f 0800 	mov.w	r8, #0
 800559a:	4631      	mov	r1, r6
 800559c:	4620      	mov	r0, r4
 800559e:	f000 f991 	bl	80058c4 <_Bfree>
 80055a2:	2f00      	cmp	r7, #0
 80055a4:	f43f aeb4 	beq.w	8005310 <_dtoa_r+0x6d8>
 80055a8:	f1b8 0f00 	cmp.w	r8, #0
 80055ac:	d005      	beq.n	80055ba <_dtoa_r+0x982>
 80055ae:	45b8      	cmp	r8, r7
 80055b0:	d003      	beq.n	80055ba <_dtoa_r+0x982>
 80055b2:	4641      	mov	r1, r8
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 f985 	bl	80058c4 <_Bfree>
 80055ba:	4639      	mov	r1, r7
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 f981 	bl	80058c4 <_Bfree>
 80055c2:	e6a5      	b.n	8005310 <_dtoa_r+0x6d8>
 80055c4:	2600      	movs	r6, #0
 80055c6:	4637      	mov	r7, r6
 80055c8:	e7e1      	b.n	800558e <_dtoa_r+0x956>
 80055ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80055cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80055d0:	4637      	mov	r7, r6
 80055d2:	e599      	b.n	8005108 <_dtoa_r+0x4d0>
 80055d4:	9b08      	ldr	r3, [sp, #32]
 80055d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80fd 	beq.w	80057da <_dtoa_r+0xba2>
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	dd05      	ble.n	80055f0 <_dtoa_r+0x9b8>
 80055e4:	4639      	mov	r1, r7
 80055e6:	462a      	mov	r2, r5
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 fb3d 	bl	8005c68 <__lshift>
 80055ee:	4607      	mov	r7, r0
 80055f0:	9b06      	ldr	r3, [sp, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d05c      	beq.n	80056b0 <_dtoa_r+0xa78>
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4620      	mov	r0, r4
 80055fa:	f000 f923 	bl	8005844 <_Balloc>
 80055fe:	4605      	mov	r5, r0
 8005600:	b928      	cbnz	r0, 800560e <_dtoa_r+0x9d6>
 8005602:	4b80      	ldr	r3, [pc, #512]	; (8005804 <_dtoa_r+0xbcc>)
 8005604:	4602      	mov	r2, r0
 8005606:	f240 21ea 	movw	r1, #746	; 0x2ea
 800560a:	f7ff bb2e 	b.w	8004c6a <_dtoa_r+0x32>
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	3202      	adds	r2, #2
 8005612:	0092      	lsls	r2, r2, #2
 8005614:	f107 010c 	add.w	r1, r7, #12
 8005618:	300c      	adds	r0, #12
 800561a:	f000 f905 	bl	8005828 <memcpy>
 800561e:	2201      	movs	r2, #1
 8005620:	4629      	mov	r1, r5
 8005622:	4620      	mov	r0, r4
 8005624:	f000 fb20 	bl	8005c68 <__lshift>
 8005628:	9b00      	ldr	r3, [sp, #0]
 800562a:	3301      	adds	r3, #1
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	9b00      	ldr	r3, [sp, #0]
 8005630:	444b      	add	r3, r9
 8005632:	9307      	str	r3, [sp, #28]
 8005634:	9b02      	ldr	r3, [sp, #8]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	46b8      	mov	r8, r7
 800563c:	9306      	str	r3, [sp, #24]
 800563e:	4607      	mov	r7, r0
 8005640:	9b01      	ldr	r3, [sp, #4]
 8005642:	4631      	mov	r1, r6
 8005644:	3b01      	subs	r3, #1
 8005646:	4658      	mov	r0, fp
 8005648:	9302      	str	r3, [sp, #8]
 800564a:	f7ff fa69 	bl	8004b20 <quorem>
 800564e:	4603      	mov	r3, r0
 8005650:	3330      	adds	r3, #48	; 0x30
 8005652:	9004      	str	r0, [sp, #16]
 8005654:	4641      	mov	r1, r8
 8005656:	4658      	mov	r0, fp
 8005658:	9308      	str	r3, [sp, #32]
 800565a:	f000 fb71 	bl	8005d40 <__mcmp>
 800565e:	463a      	mov	r2, r7
 8005660:	4681      	mov	r9, r0
 8005662:	4631      	mov	r1, r6
 8005664:	4620      	mov	r0, r4
 8005666:	f000 fb87 	bl	8005d78 <__mdiff>
 800566a:	68c2      	ldr	r2, [r0, #12]
 800566c:	9b08      	ldr	r3, [sp, #32]
 800566e:	4605      	mov	r5, r0
 8005670:	bb02      	cbnz	r2, 80056b4 <_dtoa_r+0xa7c>
 8005672:	4601      	mov	r1, r0
 8005674:	4658      	mov	r0, fp
 8005676:	f000 fb63 	bl	8005d40 <__mcmp>
 800567a:	9b08      	ldr	r3, [sp, #32]
 800567c:	4602      	mov	r2, r0
 800567e:	4629      	mov	r1, r5
 8005680:	4620      	mov	r0, r4
 8005682:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005686:	f000 f91d 	bl	80058c4 <_Bfree>
 800568a:	9b05      	ldr	r3, [sp, #20]
 800568c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800568e:	9d01      	ldr	r5, [sp, #4]
 8005690:	ea43 0102 	orr.w	r1, r3, r2
 8005694:	9b06      	ldr	r3, [sp, #24]
 8005696:	430b      	orrs	r3, r1
 8005698:	9b08      	ldr	r3, [sp, #32]
 800569a:	d10d      	bne.n	80056b8 <_dtoa_r+0xa80>
 800569c:	2b39      	cmp	r3, #57	; 0x39
 800569e:	d029      	beq.n	80056f4 <_dtoa_r+0xabc>
 80056a0:	f1b9 0f00 	cmp.w	r9, #0
 80056a4:	dd01      	ble.n	80056aa <_dtoa_r+0xa72>
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	3331      	adds	r3, #49	; 0x31
 80056aa:	9a02      	ldr	r2, [sp, #8]
 80056ac:	7013      	strb	r3, [r2, #0]
 80056ae:	e774      	b.n	800559a <_dtoa_r+0x962>
 80056b0:	4638      	mov	r0, r7
 80056b2:	e7b9      	b.n	8005628 <_dtoa_r+0x9f0>
 80056b4:	2201      	movs	r2, #1
 80056b6:	e7e2      	b.n	800567e <_dtoa_r+0xa46>
 80056b8:	f1b9 0f00 	cmp.w	r9, #0
 80056bc:	db06      	blt.n	80056cc <_dtoa_r+0xa94>
 80056be:	9905      	ldr	r1, [sp, #20]
 80056c0:	ea41 0909 	orr.w	r9, r1, r9
 80056c4:	9906      	ldr	r1, [sp, #24]
 80056c6:	ea59 0101 	orrs.w	r1, r9, r1
 80056ca:	d120      	bne.n	800570e <_dtoa_r+0xad6>
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	ddec      	ble.n	80056aa <_dtoa_r+0xa72>
 80056d0:	4659      	mov	r1, fp
 80056d2:	2201      	movs	r2, #1
 80056d4:	4620      	mov	r0, r4
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	f000 fac6 	bl	8005c68 <__lshift>
 80056dc:	4631      	mov	r1, r6
 80056de:	4683      	mov	fp, r0
 80056e0:	f000 fb2e 	bl	8005d40 <__mcmp>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	9b01      	ldr	r3, [sp, #4]
 80056e8:	dc02      	bgt.n	80056f0 <_dtoa_r+0xab8>
 80056ea:	d1de      	bne.n	80056aa <_dtoa_r+0xa72>
 80056ec:	07da      	lsls	r2, r3, #31
 80056ee:	d5dc      	bpl.n	80056aa <_dtoa_r+0xa72>
 80056f0:	2b39      	cmp	r3, #57	; 0x39
 80056f2:	d1d8      	bne.n	80056a6 <_dtoa_r+0xa6e>
 80056f4:	9a02      	ldr	r2, [sp, #8]
 80056f6:	2339      	movs	r3, #57	; 0x39
 80056f8:	7013      	strb	r3, [r2, #0]
 80056fa:	462b      	mov	r3, r5
 80056fc:	461d      	mov	r5, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005704:	2a39      	cmp	r2, #57	; 0x39
 8005706:	d050      	beq.n	80057aa <_dtoa_r+0xb72>
 8005708:	3201      	adds	r2, #1
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	e745      	b.n	800559a <_dtoa_r+0x962>
 800570e:	2a00      	cmp	r2, #0
 8005710:	dd03      	ble.n	800571a <_dtoa_r+0xae2>
 8005712:	2b39      	cmp	r3, #57	; 0x39
 8005714:	d0ee      	beq.n	80056f4 <_dtoa_r+0xabc>
 8005716:	3301      	adds	r3, #1
 8005718:	e7c7      	b.n	80056aa <_dtoa_r+0xa72>
 800571a:	9a01      	ldr	r2, [sp, #4]
 800571c:	9907      	ldr	r1, [sp, #28]
 800571e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005722:	428a      	cmp	r2, r1
 8005724:	d02a      	beq.n	800577c <_dtoa_r+0xb44>
 8005726:	4659      	mov	r1, fp
 8005728:	2300      	movs	r3, #0
 800572a:	220a      	movs	r2, #10
 800572c:	4620      	mov	r0, r4
 800572e:	f000 f8eb 	bl	8005908 <__multadd>
 8005732:	45b8      	cmp	r8, r7
 8005734:	4683      	mov	fp, r0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	f04f 020a 	mov.w	r2, #10
 800573e:	4641      	mov	r1, r8
 8005740:	4620      	mov	r0, r4
 8005742:	d107      	bne.n	8005754 <_dtoa_r+0xb1c>
 8005744:	f000 f8e0 	bl	8005908 <__multadd>
 8005748:	4680      	mov	r8, r0
 800574a:	4607      	mov	r7, r0
 800574c:	9b01      	ldr	r3, [sp, #4]
 800574e:	3301      	adds	r3, #1
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	e775      	b.n	8005640 <_dtoa_r+0xa08>
 8005754:	f000 f8d8 	bl	8005908 <__multadd>
 8005758:	4639      	mov	r1, r7
 800575a:	4680      	mov	r8, r0
 800575c:	2300      	movs	r3, #0
 800575e:	220a      	movs	r2, #10
 8005760:	4620      	mov	r0, r4
 8005762:	f000 f8d1 	bl	8005908 <__multadd>
 8005766:	4607      	mov	r7, r0
 8005768:	e7f0      	b.n	800574c <_dtoa_r+0xb14>
 800576a:	f1b9 0f00 	cmp.w	r9, #0
 800576e:	9a00      	ldr	r2, [sp, #0]
 8005770:	bfcc      	ite	gt
 8005772:	464d      	movgt	r5, r9
 8005774:	2501      	movle	r5, #1
 8005776:	4415      	add	r5, r2
 8005778:	f04f 0800 	mov.w	r8, #0
 800577c:	4659      	mov	r1, fp
 800577e:	2201      	movs	r2, #1
 8005780:	4620      	mov	r0, r4
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	f000 fa70 	bl	8005c68 <__lshift>
 8005788:	4631      	mov	r1, r6
 800578a:	4683      	mov	fp, r0
 800578c:	f000 fad8 	bl	8005d40 <__mcmp>
 8005790:	2800      	cmp	r0, #0
 8005792:	dcb2      	bgt.n	80056fa <_dtoa_r+0xac2>
 8005794:	d102      	bne.n	800579c <_dtoa_r+0xb64>
 8005796:	9b01      	ldr	r3, [sp, #4]
 8005798:	07db      	lsls	r3, r3, #31
 800579a:	d4ae      	bmi.n	80056fa <_dtoa_r+0xac2>
 800579c:	462b      	mov	r3, r5
 800579e:	461d      	mov	r5, r3
 80057a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057a4:	2a30      	cmp	r2, #48	; 0x30
 80057a6:	d0fa      	beq.n	800579e <_dtoa_r+0xb66>
 80057a8:	e6f7      	b.n	800559a <_dtoa_r+0x962>
 80057aa:	9a00      	ldr	r2, [sp, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d1a5      	bne.n	80056fc <_dtoa_r+0xac4>
 80057b0:	f10a 0a01 	add.w	sl, sl, #1
 80057b4:	2331      	movs	r3, #49	; 0x31
 80057b6:	e779      	b.n	80056ac <_dtoa_r+0xa74>
 80057b8:	4b13      	ldr	r3, [pc, #76]	; (8005808 <_dtoa_r+0xbd0>)
 80057ba:	f7ff baaf 	b.w	8004d1c <_dtoa_r+0xe4>
 80057be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f47f aa86 	bne.w	8004cd2 <_dtoa_r+0x9a>
 80057c6:	4b11      	ldr	r3, [pc, #68]	; (800580c <_dtoa_r+0xbd4>)
 80057c8:	f7ff baa8 	b.w	8004d1c <_dtoa_r+0xe4>
 80057cc:	f1b9 0f00 	cmp.w	r9, #0
 80057d0:	dc03      	bgt.n	80057da <_dtoa_r+0xba2>
 80057d2:	9b05      	ldr	r3, [sp, #20]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	f73f aec9 	bgt.w	800556c <_dtoa_r+0x934>
 80057da:	9d00      	ldr	r5, [sp, #0]
 80057dc:	4631      	mov	r1, r6
 80057de:	4658      	mov	r0, fp
 80057e0:	f7ff f99e 	bl	8004b20 <quorem>
 80057e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80057e8:	f805 3b01 	strb.w	r3, [r5], #1
 80057ec:	9a00      	ldr	r2, [sp, #0]
 80057ee:	1aaa      	subs	r2, r5, r2
 80057f0:	4591      	cmp	r9, r2
 80057f2:	ddba      	ble.n	800576a <_dtoa_r+0xb32>
 80057f4:	4659      	mov	r1, fp
 80057f6:	2300      	movs	r3, #0
 80057f8:	220a      	movs	r2, #10
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 f884 	bl	8005908 <__multadd>
 8005800:	4683      	mov	fp, r0
 8005802:	e7eb      	b.n	80057dc <_dtoa_r+0xba4>
 8005804:	08007097 	.word	0x08007097
 8005808:	08006ff0 	.word	0x08006ff0
 800580c:	08007014 	.word	0x08007014

08005810 <_localeconv_r>:
 8005810:	4800      	ldr	r0, [pc, #0]	; (8005814 <_localeconv_r+0x4>)
 8005812:	4770      	bx	lr
 8005814:	20000160 	.word	0x20000160

08005818 <malloc>:
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <malloc+0xc>)
 800581a:	4601      	mov	r1, r0
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f000 bbef 	b.w	8006000 <_malloc_r>
 8005822:	bf00      	nop
 8005824:	2000000c 	.word	0x2000000c

08005828 <memcpy>:
 8005828:	440a      	add	r2, r1
 800582a:	4291      	cmp	r1, r2
 800582c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005830:	d100      	bne.n	8005834 <memcpy+0xc>
 8005832:	4770      	bx	lr
 8005834:	b510      	push	{r4, lr}
 8005836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800583a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800583e:	4291      	cmp	r1, r2
 8005840:	d1f9      	bne.n	8005836 <memcpy+0xe>
 8005842:	bd10      	pop	{r4, pc}

08005844 <_Balloc>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005848:	4604      	mov	r4, r0
 800584a:	460d      	mov	r5, r1
 800584c:	b976      	cbnz	r6, 800586c <_Balloc+0x28>
 800584e:	2010      	movs	r0, #16
 8005850:	f7ff ffe2 	bl	8005818 <malloc>
 8005854:	4602      	mov	r2, r0
 8005856:	6260      	str	r0, [r4, #36]	; 0x24
 8005858:	b920      	cbnz	r0, 8005864 <_Balloc+0x20>
 800585a:	4b18      	ldr	r3, [pc, #96]	; (80058bc <_Balloc+0x78>)
 800585c:	4818      	ldr	r0, [pc, #96]	; (80058c0 <_Balloc+0x7c>)
 800585e:	2166      	movs	r1, #102	; 0x66
 8005860:	f000 fd94 	bl	800638c <__assert_func>
 8005864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005868:	6006      	str	r6, [r0, #0]
 800586a:	60c6      	str	r6, [r0, #12]
 800586c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800586e:	68f3      	ldr	r3, [r6, #12]
 8005870:	b183      	cbz	r3, 8005894 <_Balloc+0x50>
 8005872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800587a:	b9b8      	cbnz	r0, 80058ac <_Balloc+0x68>
 800587c:	2101      	movs	r1, #1
 800587e:	fa01 f605 	lsl.w	r6, r1, r5
 8005882:	1d72      	adds	r2, r6, #5
 8005884:	0092      	lsls	r2, r2, #2
 8005886:	4620      	mov	r0, r4
 8005888:	f000 fb5a 	bl	8005f40 <_calloc_r>
 800588c:	b160      	cbz	r0, 80058a8 <_Balloc+0x64>
 800588e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005892:	e00e      	b.n	80058b2 <_Balloc+0x6e>
 8005894:	2221      	movs	r2, #33	; 0x21
 8005896:	2104      	movs	r1, #4
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fb51 	bl	8005f40 <_calloc_r>
 800589e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058a0:	60f0      	str	r0, [r6, #12]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e4      	bne.n	8005872 <_Balloc+0x2e>
 80058a8:	2000      	movs	r0, #0
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	6802      	ldr	r2, [r0, #0]
 80058ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058b2:	2300      	movs	r3, #0
 80058b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058b8:	e7f7      	b.n	80058aa <_Balloc+0x66>
 80058ba:	bf00      	nop
 80058bc:	08007021 	.word	0x08007021
 80058c0:	080070a8 	.word	0x080070a8

080058c4 <_Bfree>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058c8:	4605      	mov	r5, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	b976      	cbnz	r6, 80058ec <_Bfree+0x28>
 80058ce:	2010      	movs	r0, #16
 80058d0:	f7ff ffa2 	bl	8005818 <malloc>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6268      	str	r0, [r5, #36]	; 0x24
 80058d8:	b920      	cbnz	r0, 80058e4 <_Bfree+0x20>
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <_Bfree+0x3c>)
 80058dc:	4809      	ldr	r0, [pc, #36]	; (8005904 <_Bfree+0x40>)
 80058de:	218a      	movs	r1, #138	; 0x8a
 80058e0:	f000 fd54 	bl	800638c <__assert_func>
 80058e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058e8:	6006      	str	r6, [r0, #0]
 80058ea:	60c6      	str	r6, [r0, #12]
 80058ec:	b13c      	cbz	r4, 80058fe <_Bfree+0x3a>
 80058ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058f0:	6862      	ldr	r2, [r4, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058f8:	6021      	str	r1, [r4, #0]
 80058fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	08007021 	.word	0x08007021
 8005904:	080070a8 	.word	0x080070a8

08005908 <__multadd>:
 8005908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	690e      	ldr	r6, [r1, #16]
 800590e:	4607      	mov	r7, r0
 8005910:	4698      	mov	r8, r3
 8005912:	460c      	mov	r4, r1
 8005914:	f101 0014 	add.w	r0, r1, #20
 8005918:	2300      	movs	r3, #0
 800591a:	6805      	ldr	r5, [r0, #0]
 800591c:	b2a9      	uxth	r1, r5
 800591e:	fb02 8101 	mla	r1, r2, r1, r8
 8005922:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005926:	0c2d      	lsrs	r5, r5, #16
 8005928:	fb02 c505 	mla	r5, r2, r5, ip
 800592c:	b289      	uxth	r1, r1
 800592e:	3301      	adds	r3, #1
 8005930:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005934:	429e      	cmp	r6, r3
 8005936:	f840 1b04 	str.w	r1, [r0], #4
 800593a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800593e:	dcec      	bgt.n	800591a <__multadd+0x12>
 8005940:	f1b8 0f00 	cmp.w	r8, #0
 8005944:	d022      	beq.n	800598c <__multadd+0x84>
 8005946:	68a3      	ldr	r3, [r4, #8]
 8005948:	42b3      	cmp	r3, r6
 800594a:	dc19      	bgt.n	8005980 <__multadd+0x78>
 800594c:	6861      	ldr	r1, [r4, #4]
 800594e:	4638      	mov	r0, r7
 8005950:	3101      	adds	r1, #1
 8005952:	f7ff ff77 	bl	8005844 <_Balloc>
 8005956:	4605      	mov	r5, r0
 8005958:	b928      	cbnz	r0, 8005966 <__multadd+0x5e>
 800595a:	4602      	mov	r2, r0
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <__multadd+0x8c>)
 800595e:	480e      	ldr	r0, [pc, #56]	; (8005998 <__multadd+0x90>)
 8005960:	21b5      	movs	r1, #181	; 0xb5
 8005962:	f000 fd13 	bl	800638c <__assert_func>
 8005966:	6922      	ldr	r2, [r4, #16]
 8005968:	3202      	adds	r2, #2
 800596a:	f104 010c 	add.w	r1, r4, #12
 800596e:	0092      	lsls	r2, r2, #2
 8005970:	300c      	adds	r0, #12
 8005972:	f7ff ff59 	bl	8005828 <memcpy>
 8005976:	4621      	mov	r1, r4
 8005978:	4638      	mov	r0, r7
 800597a:	f7ff ffa3 	bl	80058c4 <_Bfree>
 800597e:	462c      	mov	r4, r5
 8005980:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005984:	3601      	adds	r6, #1
 8005986:	f8c3 8014 	str.w	r8, [r3, #20]
 800598a:	6126      	str	r6, [r4, #16]
 800598c:	4620      	mov	r0, r4
 800598e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005992:	bf00      	nop
 8005994:	08007097 	.word	0x08007097
 8005998:	080070a8 	.word	0x080070a8

0800599c <__hi0bits>:
 800599c:	0c03      	lsrs	r3, r0, #16
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	b9d3      	cbnz	r3, 80059d8 <__hi0bits+0x3c>
 80059a2:	0400      	lsls	r0, r0, #16
 80059a4:	2310      	movs	r3, #16
 80059a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059aa:	bf04      	itt	eq
 80059ac:	0200      	lsleq	r0, r0, #8
 80059ae:	3308      	addeq	r3, #8
 80059b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059b4:	bf04      	itt	eq
 80059b6:	0100      	lsleq	r0, r0, #4
 80059b8:	3304      	addeq	r3, #4
 80059ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059be:	bf04      	itt	eq
 80059c0:	0080      	lsleq	r0, r0, #2
 80059c2:	3302      	addeq	r3, #2
 80059c4:	2800      	cmp	r0, #0
 80059c6:	db05      	blt.n	80059d4 <__hi0bits+0x38>
 80059c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80059cc:	f103 0301 	add.w	r3, r3, #1
 80059d0:	bf08      	it	eq
 80059d2:	2320      	moveq	r3, #32
 80059d4:	4618      	mov	r0, r3
 80059d6:	4770      	bx	lr
 80059d8:	2300      	movs	r3, #0
 80059da:	e7e4      	b.n	80059a6 <__hi0bits+0xa>

080059dc <__lo0bits>:
 80059dc:	6803      	ldr	r3, [r0, #0]
 80059de:	f013 0207 	ands.w	r2, r3, #7
 80059e2:	4601      	mov	r1, r0
 80059e4:	d00b      	beq.n	80059fe <__lo0bits+0x22>
 80059e6:	07da      	lsls	r2, r3, #31
 80059e8:	d424      	bmi.n	8005a34 <__lo0bits+0x58>
 80059ea:	0798      	lsls	r0, r3, #30
 80059ec:	bf49      	itett	mi
 80059ee:	085b      	lsrmi	r3, r3, #1
 80059f0:	089b      	lsrpl	r3, r3, #2
 80059f2:	2001      	movmi	r0, #1
 80059f4:	600b      	strmi	r3, [r1, #0]
 80059f6:	bf5c      	itt	pl
 80059f8:	600b      	strpl	r3, [r1, #0]
 80059fa:	2002      	movpl	r0, #2
 80059fc:	4770      	bx	lr
 80059fe:	b298      	uxth	r0, r3
 8005a00:	b9b0      	cbnz	r0, 8005a30 <__lo0bits+0x54>
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	2010      	movs	r0, #16
 8005a06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a0a:	bf04      	itt	eq
 8005a0c:	0a1b      	lsreq	r3, r3, #8
 8005a0e:	3008      	addeq	r0, #8
 8005a10:	071a      	lsls	r2, r3, #28
 8005a12:	bf04      	itt	eq
 8005a14:	091b      	lsreq	r3, r3, #4
 8005a16:	3004      	addeq	r0, #4
 8005a18:	079a      	lsls	r2, r3, #30
 8005a1a:	bf04      	itt	eq
 8005a1c:	089b      	lsreq	r3, r3, #2
 8005a1e:	3002      	addeq	r0, #2
 8005a20:	07da      	lsls	r2, r3, #31
 8005a22:	d403      	bmi.n	8005a2c <__lo0bits+0x50>
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	f100 0001 	add.w	r0, r0, #1
 8005a2a:	d005      	beq.n	8005a38 <__lo0bits+0x5c>
 8005a2c:	600b      	str	r3, [r1, #0]
 8005a2e:	4770      	bx	lr
 8005a30:	4610      	mov	r0, r2
 8005a32:	e7e8      	b.n	8005a06 <__lo0bits+0x2a>
 8005a34:	2000      	movs	r0, #0
 8005a36:	4770      	bx	lr
 8005a38:	2020      	movs	r0, #32
 8005a3a:	4770      	bx	lr

08005a3c <__i2b>:
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	460c      	mov	r4, r1
 8005a40:	2101      	movs	r1, #1
 8005a42:	f7ff feff 	bl	8005844 <_Balloc>
 8005a46:	4602      	mov	r2, r0
 8005a48:	b928      	cbnz	r0, 8005a56 <__i2b+0x1a>
 8005a4a:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <__i2b+0x24>)
 8005a4c:	4805      	ldr	r0, [pc, #20]	; (8005a64 <__i2b+0x28>)
 8005a4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a52:	f000 fc9b 	bl	800638c <__assert_func>
 8005a56:	2301      	movs	r3, #1
 8005a58:	6144      	str	r4, [r0, #20]
 8005a5a:	6103      	str	r3, [r0, #16]
 8005a5c:	bd10      	pop	{r4, pc}
 8005a5e:	bf00      	nop
 8005a60:	08007097 	.word	0x08007097
 8005a64:	080070a8 	.word	0x080070a8

08005a68 <__multiply>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	4614      	mov	r4, r2
 8005a6e:	690a      	ldr	r2, [r1, #16]
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	bfb8      	it	lt
 8005a76:	460b      	movlt	r3, r1
 8005a78:	460d      	mov	r5, r1
 8005a7a:	bfbc      	itt	lt
 8005a7c:	4625      	movlt	r5, r4
 8005a7e:	461c      	movlt	r4, r3
 8005a80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005a84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005a88:	68ab      	ldr	r3, [r5, #8]
 8005a8a:	6869      	ldr	r1, [r5, #4]
 8005a8c:	eb0a 0709 	add.w	r7, sl, r9
 8005a90:	42bb      	cmp	r3, r7
 8005a92:	b085      	sub	sp, #20
 8005a94:	bfb8      	it	lt
 8005a96:	3101      	addlt	r1, #1
 8005a98:	f7ff fed4 	bl	8005844 <_Balloc>
 8005a9c:	b930      	cbnz	r0, 8005aac <__multiply+0x44>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	4b42      	ldr	r3, [pc, #264]	; (8005bac <__multiply+0x144>)
 8005aa2:	4843      	ldr	r0, [pc, #268]	; (8005bb0 <__multiply+0x148>)
 8005aa4:	f240 115d 	movw	r1, #349	; 0x15d
 8005aa8:	f000 fc70 	bl	800638c <__assert_func>
 8005aac:	f100 0614 	add.w	r6, r0, #20
 8005ab0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005ab4:	4633      	mov	r3, r6
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4543      	cmp	r3, r8
 8005aba:	d31e      	bcc.n	8005afa <__multiply+0x92>
 8005abc:	f105 0c14 	add.w	ip, r5, #20
 8005ac0:	f104 0314 	add.w	r3, r4, #20
 8005ac4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005ac8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005acc:	9202      	str	r2, [sp, #8]
 8005ace:	ebac 0205 	sub.w	r2, ip, r5
 8005ad2:	3a15      	subs	r2, #21
 8005ad4:	f022 0203 	bic.w	r2, r2, #3
 8005ad8:	3204      	adds	r2, #4
 8005ada:	f105 0115 	add.w	r1, r5, #21
 8005ade:	458c      	cmp	ip, r1
 8005ae0:	bf38      	it	cc
 8005ae2:	2204      	movcc	r2, #4
 8005ae4:	9201      	str	r2, [sp, #4]
 8005ae6:	9a02      	ldr	r2, [sp, #8]
 8005ae8:	9303      	str	r3, [sp, #12]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d808      	bhi.n	8005b00 <__multiply+0x98>
 8005aee:	2f00      	cmp	r7, #0
 8005af0:	dc55      	bgt.n	8005b9e <__multiply+0x136>
 8005af2:	6107      	str	r7, [r0, #16]
 8005af4:	b005      	add	sp, #20
 8005af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afa:	f843 2b04 	str.w	r2, [r3], #4
 8005afe:	e7db      	b.n	8005ab8 <__multiply+0x50>
 8005b00:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b04:	f1ba 0f00 	cmp.w	sl, #0
 8005b08:	d020      	beq.n	8005b4c <__multiply+0xe4>
 8005b0a:	f105 0e14 	add.w	lr, r5, #20
 8005b0e:	46b1      	mov	r9, r6
 8005b10:	2200      	movs	r2, #0
 8005b12:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005b16:	f8d9 b000 	ldr.w	fp, [r9]
 8005b1a:	b2a1      	uxth	r1, r4
 8005b1c:	fa1f fb8b 	uxth.w	fp, fp
 8005b20:	fb0a b101 	mla	r1, sl, r1, fp
 8005b24:	4411      	add	r1, r2
 8005b26:	f8d9 2000 	ldr.w	r2, [r9]
 8005b2a:	0c24      	lsrs	r4, r4, #16
 8005b2c:	0c12      	lsrs	r2, r2, #16
 8005b2e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005b32:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005b36:	b289      	uxth	r1, r1
 8005b38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b3c:	45f4      	cmp	ip, lr
 8005b3e:	f849 1b04 	str.w	r1, [r9], #4
 8005b42:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005b46:	d8e4      	bhi.n	8005b12 <__multiply+0xaa>
 8005b48:	9901      	ldr	r1, [sp, #4]
 8005b4a:	5072      	str	r2, [r6, r1]
 8005b4c:	9a03      	ldr	r2, [sp, #12]
 8005b4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b52:	3304      	adds	r3, #4
 8005b54:	f1b9 0f00 	cmp.w	r9, #0
 8005b58:	d01f      	beq.n	8005b9a <__multiply+0x132>
 8005b5a:	6834      	ldr	r4, [r6, #0]
 8005b5c:	f105 0114 	add.w	r1, r5, #20
 8005b60:	46b6      	mov	lr, r6
 8005b62:	f04f 0a00 	mov.w	sl, #0
 8005b66:	880a      	ldrh	r2, [r1, #0]
 8005b68:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005b6c:	fb09 b202 	mla	r2, r9, r2, fp
 8005b70:	4492      	add	sl, r2
 8005b72:	b2a4      	uxth	r4, r4
 8005b74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005b78:	f84e 4b04 	str.w	r4, [lr], #4
 8005b7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005b80:	f8be 2000 	ldrh.w	r2, [lr]
 8005b84:	0c24      	lsrs	r4, r4, #16
 8005b86:	fb09 2404 	mla	r4, r9, r4, r2
 8005b8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005b8e:	458c      	cmp	ip, r1
 8005b90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005b94:	d8e7      	bhi.n	8005b66 <__multiply+0xfe>
 8005b96:	9a01      	ldr	r2, [sp, #4]
 8005b98:	50b4      	str	r4, [r6, r2]
 8005b9a:	3604      	adds	r6, #4
 8005b9c:	e7a3      	b.n	8005ae6 <__multiply+0x7e>
 8005b9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1a5      	bne.n	8005af2 <__multiply+0x8a>
 8005ba6:	3f01      	subs	r7, #1
 8005ba8:	e7a1      	b.n	8005aee <__multiply+0x86>
 8005baa:	bf00      	nop
 8005bac:	08007097 	.word	0x08007097
 8005bb0:	080070a8 	.word	0x080070a8

08005bb4 <__pow5mult>:
 8005bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb8:	4615      	mov	r5, r2
 8005bba:	f012 0203 	ands.w	r2, r2, #3
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	d007      	beq.n	8005bd4 <__pow5mult+0x20>
 8005bc4:	4c25      	ldr	r4, [pc, #148]	; (8005c5c <__pow5mult+0xa8>)
 8005bc6:	3a01      	subs	r2, #1
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bce:	f7ff fe9b 	bl	8005908 <__multadd>
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	10ad      	asrs	r5, r5, #2
 8005bd6:	d03d      	beq.n	8005c54 <__pow5mult+0xa0>
 8005bd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bda:	b97c      	cbnz	r4, 8005bfc <__pow5mult+0x48>
 8005bdc:	2010      	movs	r0, #16
 8005bde:	f7ff fe1b 	bl	8005818 <malloc>
 8005be2:	4602      	mov	r2, r0
 8005be4:	6270      	str	r0, [r6, #36]	; 0x24
 8005be6:	b928      	cbnz	r0, 8005bf4 <__pow5mult+0x40>
 8005be8:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <__pow5mult+0xac>)
 8005bea:	481e      	ldr	r0, [pc, #120]	; (8005c64 <__pow5mult+0xb0>)
 8005bec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005bf0:	f000 fbcc 	bl	800638c <__assert_func>
 8005bf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bf8:	6004      	str	r4, [r0, #0]
 8005bfa:	60c4      	str	r4, [r0, #12]
 8005bfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c04:	b94c      	cbnz	r4, 8005c1a <__pow5mult+0x66>
 8005c06:	f240 2171 	movw	r1, #625	; 0x271
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7ff ff16 	bl	8005a3c <__i2b>
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c16:	4604      	mov	r4, r0
 8005c18:	6003      	str	r3, [r0, #0]
 8005c1a:	f04f 0900 	mov.w	r9, #0
 8005c1e:	07eb      	lsls	r3, r5, #31
 8005c20:	d50a      	bpl.n	8005c38 <__pow5mult+0x84>
 8005c22:	4639      	mov	r1, r7
 8005c24:	4622      	mov	r2, r4
 8005c26:	4630      	mov	r0, r6
 8005c28:	f7ff ff1e 	bl	8005a68 <__multiply>
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	4680      	mov	r8, r0
 8005c30:	4630      	mov	r0, r6
 8005c32:	f7ff fe47 	bl	80058c4 <_Bfree>
 8005c36:	4647      	mov	r7, r8
 8005c38:	106d      	asrs	r5, r5, #1
 8005c3a:	d00b      	beq.n	8005c54 <__pow5mult+0xa0>
 8005c3c:	6820      	ldr	r0, [r4, #0]
 8005c3e:	b938      	cbnz	r0, 8005c50 <__pow5mult+0x9c>
 8005c40:	4622      	mov	r2, r4
 8005c42:	4621      	mov	r1, r4
 8005c44:	4630      	mov	r0, r6
 8005c46:	f7ff ff0f 	bl	8005a68 <__multiply>
 8005c4a:	6020      	str	r0, [r4, #0]
 8005c4c:	f8c0 9000 	str.w	r9, [r0]
 8005c50:	4604      	mov	r4, r0
 8005c52:	e7e4      	b.n	8005c1e <__pow5mult+0x6a>
 8005c54:	4638      	mov	r0, r7
 8005c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c5a:	bf00      	nop
 8005c5c:	080071f8 	.word	0x080071f8
 8005c60:	08007021 	.word	0x08007021
 8005c64:	080070a8 	.word	0x080070a8

08005c68 <__lshift>:
 8005c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	6849      	ldr	r1, [r1, #4]
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c76:	68a3      	ldr	r3, [r4, #8]
 8005c78:	4607      	mov	r7, r0
 8005c7a:	4691      	mov	r9, r2
 8005c7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c80:	f108 0601 	add.w	r6, r8, #1
 8005c84:	42b3      	cmp	r3, r6
 8005c86:	db0b      	blt.n	8005ca0 <__lshift+0x38>
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f7ff fddb 	bl	8005844 <_Balloc>
 8005c8e:	4605      	mov	r5, r0
 8005c90:	b948      	cbnz	r0, 8005ca6 <__lshift+0x3e>
 8005c92:	4602      	mov	r2, r0
 8005c94:	4b28      	ldr	r3, [pc, #160]	; (8005d38 <__lshift+0xd0>)
 8005c96:	4829      	ldr	r0, [pc, #164]	; (8005d3c <__lshift+0xd4>)
 8005c98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005c9c:	f000 fb76 	bl	800638c <__assert_func>
 8005ca0:	3101      	adds	r1, #1
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	e7ee      	b.n	8005c84 <__lshift+0x1c>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f100 0114 	add.w	r1, r0, #20
 8005cac:	f100 0210 	add.w	r2, r0, #16
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	4553      	cmp	r3, sl
 8005cb4:	db33      	blt.n	8005d1e <__lshift+0xb6>
 8005cb6:	6920      	ldr	r0, [r4, #16]
 8005cb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cbc:	f104 0314 	add.w	r3, r4, #20
 8005cc0:	f019 091f 	ands.w	r9, r9, #31
 8005cc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ccc:	d02b      	beq.n	8005d26 <__lshift+0xbe>
 8005cce:	f1c9 0e20 	rsb	lr, r9, #32
 8005cd2:	468a      	mov	sl, r1
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	fa00 f009 	lsl.w	r0, r0, r9
 8005cdc:	4302      	orrs	r2, r0
 8005cde:	f84a 2b04 	str.w	r2, [sl], #4
 8005ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce6:	459c      	cmp	ip, r3
 8005ce8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005cec:	d8f3      	bhi.n	8005cd6 <__lshift+0x6e>
 8005cee:	ebac 0304 	sub.w	r3, ip, r4
 8005cf2:	3b15      	subs	r3, #21
 8005cf4:	f023 0303 	bic.w	r3, r3, #3
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	f104 0015 	add.w	r0, r4, #21
 8005cfe:	4584      	cmp	ip, r0
 8005d00:	bf38      	it	cc
 8005d02:	2304      	movcc	r3, #4
 8005d04:	50ca      	str	r2, [r1, r3]
 8005d06:	b10a      	cbz	r2, 8005d0c <__lshift+0xa4>
 8005d08:	f108 0602 	add.w	r6, r8, #2
 8005d0c:	3e01      	subs	r6, #1
 8005d0e:	4638      	mov	r0, r7
 8005d10:	612e      	str	r6, [r5, #16]
 8005d12:	4621      	mov	r1, r4
 8005d14:	f7ff fdd6 	bl	80058c4 <_Bfree>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d22:	3301      	adds	r3, #1
 8005d24:	e7c5      	b.n	8005cb2 <__lshift+0x4a>
 8005d26:	3904      	subs	r1, #4
 8005d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d30:	459c      	cmp	ip, r3
 8005d32:	d8f9      	bhi.n	8005d28 <__lshift+0xc0>
 8005d34:	e7ea      	b.n	8005d0c <__lshift+0xa4>
 8005d36:	bf00      	nop
 8005d38:	08007097 	.word	0x08007097
 8005d3c:	080070a8 	.word	0x080070a8

08005d40 <__mcmp>:
 8005d40:	b530      	push	{r4, r5, lr}
 8005d42:	6902      	ldr	r2, [r0, #16]
 8005d44:	690c      	ldr	r4, [r1, #16]
 8005d46:	1b12      	subs	r2, r2, r4
 8005d48:	d10e      	bne.n	8005d68 <__mcmp+0x28>
 8005d4a:	f100 0314 	add.w	r3, r0, #20
 8005d4e:	3114      	adds	r1, #20
 8005d50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d60:	42a5      	cmp	r5, r4
 8005d62:	d003      	beq.n	8005d6c <__mcmp+0x2c>
 8005d64:	d305      	bcc.n	8005d72 <__mcmp+0x32>
 8005d66:	2201      	movs	r2, #1
 8005d68:	4610      	mov	r0, r2
 8005d6a:	bd30      	pop	{r4, r5, pc}
 8005d6c:	4283      	cmp	r3, r0
 8005d6e:	d3f3      	bcc.n	8005d58 <__mcmp+0x18>
 8005d70:	e7fa      	b.n	8005d68 <__mcmp+0x28>
 8005d72:	f04f 32ff 	mov.w	r2, #4294967295
 8005d76:	e7f7      	b.n	8005d68 <__mcmp+0x28>

08005d78 <__mdiff>:
 8005d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	4606      	mov	r6, r0
 8005d80:	4611      	mov	r1, r2
 8005d82:	4620      	mov	r0, r4
 8005d84:	4617      	mov	r7, r2
 8005d86:	f7ff ffdb 	bl	8005d40 <__mcmp>
 8005d8a:	1e05      	subs	r5, r0, #0
 8005d8c:	d110      	bne.n	8005db0 <__mdiff+0x38>
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff fd57 	bl	8005844 <_Balloc>
 8005d96:	b930      	cbnz	r0, 8005da6 <__mdiff+0x2e>
 8005d98:	4b39      	ldr	r3, [pc, #228]	; (8005e80 <__mdiff+0x108>)
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	f240 2132 	movw	r1, #562	; 0x232
 8005da0:	4838      	ldr	r0, [pc, #224]	; (8005e84 <__mdiff+0x10c>)
 8005da2:	f000 faf3 	bl	800638c <__assert_func>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	bfa4      	itt	ge
 8005db2:	463b      	movge	r3, r7
 8005db4:	4627      	movge	r7, r4
 8005db6:	4630      	mov	r0, r6
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	bfa6      	itte	ge
 8005dbc:	461c      	movge	r4, r3
 8005dbe:	2500      	movge	r5, #0
 8005dc0:	2501      	movlt	r5, #1
 8005dc2:	f7ff fd3f 	bl	8005844 <_Balloc>
 8005dc6:	b920      	cbnz	r0, 8005dd2 <__mdiff+0x5a>
 8005dc8:	4b2d      	ldr	r3, [pc, #180]	; (8005e80 <__mdiff+0x108>)
 8005dca:	4602      	mov	r2, r0
 8005dcc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005dd0:	e7e6      	b.n	8005da0 <__mdiff+0x28>
 8005dd2:	693e      	ldr	r6, [r7, #16]
 8005dd4:	60c5      	str	r5, [r0, #12]
 8005dd6:	6925      	ldr	r5, [r4, #16]
 8005dd8:	f107 0114 	add.w	r1, r7, #20
 8005ddc:	f104 0914 	add.w	r9, r4, #20
 8005de0:	f100 0e14 	add.w	lr, r0, #20
 8005de4:	f107 0210 	add.w	r2, r7, #16
 8005de8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005dec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005df0:	46f2      	mov	sl, lr
 8005df2:	2700      	movs	r7, #0
 8005df4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005df8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005dfc:	fa1f f883 	uxth.w	r8, r3
 8005e00:	fa17 f78b 	uxtah	r7, r7, fp
 8005e04:	0c1b      	lsrs	r3, r3, #16
 8005e06:	eba7 0808 	sub.w	r8, r7, r8
 8005e0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e12:	fa1f f888 	uxth.w	r8, r8
 8005e16:	141f      	asrs	r7, r3, #16
 8005e18:	454d      	cmp	r5, r9
 8005e1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e1e:	f84a 3b04 	str.w	r3, [sl], #4
 8005e22:	d8e7      	bhi.n	8005df4 <__mdiff+0x7c>
 8005e24:	1b2b      	subs	r3, r5, r4
 8005e26:	3b15      	subs	r3, #21
 8005e28:	f023 0303 	bic.w	r3, r3, #3
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	3415      	adds	r4, #21
 8005e30:	42a5      	cmp	r5, r4
 8005e32:	bf38      	it	cc
 8005e34:	2304      	movcc	r3, #4
 8005e36:	4419      	add	r1, r3
 8005e38:	4473      	add	r3, lr
 8005e3a:	469e      	mov	lr, r3
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	4565      	cmp	r5, ip
 8005e40:	d30e      	bcc.n	8005e60 <__mdiff+0xe8>
 8005e42:	f10c 0203 	add.w	r2, ip, #3
 8005e46:	1a52      	subs	r2, r2, r1
 8005e48:	f022 0203 	bic.w	r2, r2, #3
 8005e4c:	3903      	subs	r1, #3
 8005e4e:	458c      	cmp	ip, r1
 8005e50:	bf38      	it	cc
 8005e52:	2200      	movcc	r2, #0
 8005e54:	441a      	add	r2, r3
 8005e56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005e5a:	b17b      	cbz	r3, 8005e7c <__mdiff+0x104>
 8005e5c:	6106      	str	r6, [r0, #16]
 8005e5e:	e7a5      	b.n	8005dac <__mdiff+0x34>
 8005e60:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e64:	fa17 f488 	uxtah	r4, r7, r8
 8005e68:	1422      	asrs	r2, r4, #16
 8005e6a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005e6e:	b2a4      	uxth	r4, r4
 8005e70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005e74:	f84e 4b04 	str.w	r4, [lr], #4
 8005e78:	1417      	asrs	r7, r2, #16
 8005e7a:	e7e0      	b.n	8005e3e <__mdiff+0xc6>
 8005e7c:	3e01      	subs	r6, #1
 8005e7e:	e7ea      	b.n	8005e56 <__mdiff+0xde>
 8005e80:	08007097 	.word	0x08007097
 8005e84:	080070a8 	.word	0x080070a8

08005e88 <__d2b>:
 8005e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e8c:	4689      	mov	r9, r1
 8005e8e:	2101      	movs	r1, #1
 8005e90:	ec57 6b10 	vmov	r6, r7, d0
 8005e94:	4690      	mov	r8, r2
 8005e96:	f7ff fcd5 	bl	8005844 <_Balloc>
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	b930      	cbnz	r0, 8005eac <__d2b+0x24>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <__d2b+0xb0>)
 8005ea2:	4826      	ldr	r0, [pc, #152]	; (8005f3c <__d2b+0xb4>)
 8005ea4:	f240 310a 	movw	r1, #778	; 0x30a
 8005ea8:	f000 fa70 	bl	800638c <__assert_func>
 8005eac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005eb4:	bb35      	cbnz	r5, 8005f04 <__d2b+0x7c>
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	d028      	beq.n	8005f0e <__d2b+0x86>
 8005ebc:	4668      	mov	r0, sp
 8005ebe:	9600      	str	r6, [sp, #0]
 8005ec0:	f7ff fd8c 	bl	80059dc <__lo0bits>
 8005ec4:	9900      	ldr	r1, [sp, #0]
 8005ec6:	b300      	cbz	r0, 8005f0a <__d2b+0x82>
 8005ec8:	9a01      	ldr	r2, [sp, #4]
 8005eca:	f1c0 0320 	rsb	r3, r0, #32
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	40c2      	lsrs	r2, r0
 8005ed6:	6163      	str	r3, [r4, #20]
 8005ed8:	9201      	str	r2, [sp, #4]
 8005eda:	9b01      	ldr	r3, [sp, #4]
 8005edc:	61a3      	str	r3, [r4, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bf14      	ite	ne
 8005ee2:	2202      	movne	r2, #2
 8005ee4:	2201      	moveq	r2, #1
 8005ee6:	6122      	str	r2, [r4, #16]
 8005ee8:	b1d5      	cbz	r5, 8005f20 <__d2b+0x98>
 8005eea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005eee:	4405      	add	r5, r0
 8005ef0:	f8c9 5000 	str.w	r5, [r9]
 8005ef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ef8:	f8c8 0000 	str.w	r0, [r8]
 8005efc:	4620      	mov	r0, r4
 8005efe:	b003      	add	sp, #12
 8005f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f08:	e7d5      	b.n	8005eb6 <__d2b+0x2e>
 8005f0a:	6161      	str	r1, [r4, #20]
 8005f0c:	e7e5      	b.n	8005eda <__d2b+0x52>
 8005f0e:	a801      	add	r0, sp, #4
 8005f10:	f7ff fd64 	bl	80059dc <__lo0bits>
 8005f14:	9b01      	ldr	r3, [sp, #4]
 8005f16:	6163      	str	r3, [r4, #20]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	6122      	str	r2, [r4, #16]
 8005f1c:	3020      	adds	r0, #32
 8005f1e:	e7e3      	b.n	8005ee8 <__d2b+0x60>
 8005f20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f28:	f8c9 0000 	str.w	r0, [r9]
 8005f2c:	6918      	ldr	r0, [r3, #16]
 8005f2e:	f7ff fd35 	bl	800599c <__hi0bits>
 8005f32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f36:	e7df      	b.n	8005ef8 <__d2b+0x70>
 8005f38:	08007097 	.word	0x08007097
 8005f3c:	080070a8 	.word	0x080070a8

08005f40 <_calloc_r>:
 8005f40:	b513      	push	{r0, r1, r4, lr}
 8005f42:	434a      	muls	r2, r1
 8005f44:	4611      	mov	r1, r2
 8005f46:	9201      	str	r2, [sp, #4]
 8005f48:	f000 f85a 	bl	8006000 <_malloc_r>
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	b118      	cbz	r0, 8005f58 <_calloc_r+0x18>
 8005f50:	9a01      	ldr	r2, [sp, #4]
 8005f52:	2100      	movs	r1, #0
 8005f54:	f7fe f952 	bl	80041fc <memset>
 8005f58:	4620      	mov	r0, r4
 8005f5a:	b002      	add	sp, #8
 8005f5c:	bd10      	pop	{r4, pc}
	...

08005f60 <_free_r>:
 8005f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f62:	2900      	cmp	r1, #0
 8005f64:	d048      	beq.n	8005ff8 <_free_r+0x98>
 8005f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6a:	9001      	str	r0, [sp, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f72:	bfb8      	it	lt
 8005f74:	18e4      	addlt	r4, r4, r3
 8005f76:	f000 fa65 	bl	8006444 <__malloc_lock>
 8005f7a:	4a20      	ldr	r2, [pc, #128]	; (8005ffc <_free_r+0x9c>)
 8005f7c:	9801      	ldr	r0, [sp, #4]
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	4615      	mov	r5, r2
 8005f82:	b933      	cbnz	r3, 8005f92 <_free_r+0x32>
 8005f84:	6063      	str	r3, [r4, #4]
 8005f86:	6014      	str	r4, [r2, #0]
 8005f88:	b003      	add	sp, #12
 8005f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f8e:	f000 ba5f 	b.w	8006450 <__malloc_unlock>
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	d90b      	bls.n	8005fae <_free_r+0x4e>
 8005f96:	6821      	ldr	r1, [r4, #0]
 8005f98:	1862      	adds	r2, r4, r1
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	bf04      	itt	eq
 8005f9e:	681a      	ldreq	r2, [r3, #0]
 8005fa0:	685b      	ldreq	r3, [r3, #4]
 8005fa2:	6063      	str	r3, [r4, #4]
 8005fa4:	bf04      	itt	eq
 8005fa6:	1852      	addeq	r2, r2, r1
 8005fa8:	6022      	streq	r2, [r4, #0]
 8005faa:	602c      	str	r4, [r5, #0]
 8005fac:	e7ec      	b.n	8005f88 <_free_r+0x28>
 8005fae:	461a      	mov	r2, r3
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b10b      	cbz	r3, 8005fb8 <_free_r+0x58>
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d9fa      	bls.n	8005fae <_free_r+0x4e>
 8005fb8:	6811      	ldr	r1, [r2, #0]
 8005fba:	1855      	adds	r5, r2, r1
 8005fbc:	42a5      	cmp	r5, r4
 8005fbe:	d10b      	bne.n	8005fd8 <_free_r+0x78>
 8005fc0:	6824      	ldr	r4, [r4, #0]
 8005fc2:	4421      	add	r1, r4
 8005fc4:	1854      	adds	r4, r2, r1
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	6011      	str	r1, [r2, #0]
 8005fca:	d1dd      	bne.n	8005f88 <_free_r+0x28>
 8005fcc:	681c      	ldr	r4, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	6053      	str	r3, [r2, #4]
 8005fd2:	4421      	add	r1, r4
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	e7d7      	b.n	8005f88 <_free_r+0x28>
 8005fd8:	d902      	bls.n	8005fe0 <_free_r+0x80>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	6003      	str	r3, [r0, #0]
 8005fde:	e7d3      	b.n	8005f88 <_free_r+0x28>
 8005fe0:	6825      	ldr	r5, [r4, #0]
 8005fe2:	1961      	adds	r1, r4, r5
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	bf04      	itt	eq
 8005fe8:	6819      	ldreq	r1, [r3, #0]
 8005fea:	685b      	ldreq	r3, [r3, #4]
 8005fec:	6063      	str	r3, [r4, #4]
 8005fee:	bf04      	itt	eq
 8005ff0:	1949      	addeq	r1, r1, r5
 8005ff2:	6021      	streq	r1, [r4, #0]
 8005ff4:	6054      	str	r4, [r2, #4]
 8005ff6:	e7c7      	b.n	8005f88 <_free_r+0x28>
 8005ff8:	b003      	add	sp, #12
 8005ffa:	bd30      	pop	{r4, r5, pc}
 8005ffc:	200001fc 	.word	0x200001fc

08006000 <_malloc_r>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	1ccd      	adds	r5, r1, #3
 8006004:	f025 0503 	bic.w	r5, r5, #3
 8006008:	3508      	adds	r5, #8
 800600a:	2d0c      	cmp	r5, #12
 800600c:	bf38      	it	cc
 800600e:	250c      	movcc	r5, #12
 8006010:	2d00      	cmp	r5, #0
 8006012:	4606      	mov	r6, r0
 8006014:	db01      	blt.n	800601a <_malloc_r+0x1a>
 8006016:	42a9      	cmp	r1, r5
 8006018:	d903      	bls.n	8006022 <_malloc_r+0x22>
 800601a:	230c      	movs	r3, #12
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	2000      	movs	r0, #0
 8006020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006022:	f000 fa0f 	bl	8006444 <__malloc_lock>
 8006026:	4921      	ldr	r1, [pc, #132]	; (80060ac <_malloc_r+0xac>)
 8006028:	680a      	ldr	r2, [r1, #0]
 800602a:	4614      	mov	r4, r2
 800602c:	b99c      	cbnz	r4, 8006056 <_malloc_r+0x56>
 800602e:	4f20      	ldr	r7, [pc, #128]	; (80060b0 <_malloc_r+0xb0>)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	b923      	cbnz	r3, 800603e <_malloc_r+0x3e>
 8006034:	4621      	mov	r1, r4
 8006036:	4630      	mov	r0, r6
 8006038:	f000 f998 	bl	800636c <_sbrk_r>
 800603c:	6038      	str	r0, [r7, #0]
 800603e:	4629      	mov	r1, r5
 8006040:	4630      	mov	r0, r6
 8006042:	f000 f993 	bl	800636c <_sbrk_r>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d123      	bne.n	8006092 <_malloc_r+0x92>
 800604a:	230c      	movs	r3, #12
 800604c:	6033      	str	r3, [r6, #0]
 800604e:	4630      	mov	r0, r6
 8006050:	f000 f9fe 	bl	8006450 <__malloc_unlock>
 8006054:	e7e3      	b.n	800601e <_malloc_r+0x1e>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	1b5b      	subs	r3, r3, r5
 800605a:	d417      	bmi.n	800608c <_malloc_r+0x8c>
 800605c:	2b0b      	cmp	r3, #11
 800605e:	d903      	bls.n	8006068 <_malloc_r+0x68>
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	441c      	add	r4, r3
 8006064:	6025      	str	r5, [r4, #0]
 8006066:	e004      	b.n	8006072 <_malloc_r+0x72>
 8006068:	6863      	ldr	r3, [r4, #4]
 800606a:	42a2      	cmp	r2, r4
 800606c:	bf0c      	ite	eq
 800606e:	600b      	streq	r3, [r1, #0]
 8006070:	6053      	strne	r3, [r2, #4]
 8006072:	4630      	mov	r0, r6
 8006074:	f000 f9ec 	bl	8006450 <__malloc_unlock>
 8006078:	f104 000b 	add.w	r0, r4, #11
 800607c:	1d23      	adds	r3, r4, #4
 800607e:	f020 0007 	bic.w	r0, r0, #7
 8006082:	1ac2      	subs	r2, r0, r3
 8006084:	d0cc      	beq.n	8006020 <_malloc_r+0x20>
 8006086:	1a1b      	subs	r3, r3, r0
 8006088:	50a3      	str	r3, [r4, r2]
 800608a:	e7c9      	b.n	8006020 <_malloc_r+0x20>
 800608c:	4622      	mov	r2, r4
 800608e:	6864      	ldr	r4, [r4, #4]
 8006090:	e7cc      	b.n	800602c <_malloc_r+0x2c>
 8006092:	1cc4      	adds	r4, r0, #3
 8006094:	f024 0403 	bic.w	r4, r4, #3
 8006098:	42a0      	cmp	r0, r4
 800609a:	d0e3      	beq.n	8006064 <_malloc_r+0x64>
 800609c:	1a21      	subs	r1, r4, r0
 800609e:	4630      	mov	r0, r6
 80060a0:	f000 f964 	bl	800636c <_sbrk_r>
 80060a4:	3001      	adds	r0, #1
 80060a6:	d1dd      	bne.n	8006064 <_malloc_r+0x64>
 80060a8:	e7cf      	b.n	800604a <_malloc_r+0x4a>
 80060aa:	bf00      	nop
 80060ac:	200001fc 	.word	0x200001fc
 80060b0:	20000200 	.word	0x20000200

080060b4 <__ssputs_r>:
 80060b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	688e      	ldr	r6, [r1, #8]
 80060ba:	429e      	cmp	r6, r3
 80060bc:	4682      	mov	sl, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	4690      	mov	r8, r2
 80060c2:	461f      	mov	r7, r3
 80060c4:	d838      	bhi.n	8006138 <__ssputs_r+0x84>
 80060c6:	898a      	ldrh	r2, [r1, #12]
 80060c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060cc:	d032      	beq.n	8006134 <__ssputs_r+0x80>
 80060ce:	6825      	ldr	r5, [r4, #0]
 80060d0:	6909      	ldr	r1, [r1, #16]
 80060d2:	eba5 0901 	sub.w	r9, r5, r1
 80060d6:	6965      	ldr	r5, [r4, #20]
 80060d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060e0:	3301      	adds	r3, #1
 80060e2:	444b      	add	r3, r9
 80060e4:	106d      	asrs	r5, r5, #1
 80060e6:	429d      	cmp	r5, r3
 80060e8:	bf38      	it	cc
 80060ea:	461d      	movcc	r5, r3
 80060ec:	0553      	lsls	r3, r2, #21
 80060ee:	d531      	bpl.n	8006154 <__ssputs_r+0xa0>
 80060f0:	4629      	mov	r1, r5
 80060f2:	f7ff ff85 	bl	8006000 <_malloc_r>
 80060f6:	4606      	mov	r6, r0
 80060f8:	b950      	cbnz	r0, 8006110 <__ssputs_r+0x5c>
 80060fa:	230c      	movs	r3, #12
 80060fc:	f8ca 3000 	str.w	r3, [sl]
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	6921      	ldr	r1, [r4, #16]
 8006112:	464a      	mov	r2, r9
 8006114:	f7ff fb88 	bl	8005828 <memcpy>
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	81a3      	strh	r3, [r4, #12]
 8006124:	6126      	str	r6, [r4, #16]
 8006126:	6165      	str	r5, [r4, #20]
 8006128:	444e      	add	r6, r9
 800612a:	eba5 0509 	sub.w	r5, r5, r9
 800612e:	6026      	str	r6, [r4, #0]
 8006130:	60a5      	str	r5, [r4, #8]
 8006132:	463e      	mov	r6, r7
 8006134:	42be      	cmp	r6, r7
 8006136:	d900      	bls.n	800613a <__ssputs_r+0x86>
 8006138:	463e      	mov	r6, r7
 800613a:	4632      	mov	r2, r6
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	4641      	mov	r1, r8
 8006140:	f000 f966 	bl	8006410 <memmove>
 8006144:	68a3      	ldr	r3, [r4, #8]
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	1b9b      	subs	r3, r3, r6
 800614a:	4432      	add	r2, r6
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	2000      	movs	r0, #0
 8006152:	e7db      	b.n	800610c <__ssputs_r+0x58>
 8006154:	462a      	mov	r2, r5
 8006156:	f000 f981 	bl	800645c <_realloc_r>
 800615a:	4606      	mov	r6, r0
 800615c:	2800      	cmp	r0, #0
 800615e:	d1e1      	bne.n	8006124 <__ssputs_r+0x70>
 8006160:	6921      	ldr	r1, [r4, #16]
 8006162:	4650      	mov	r0, sl
 8006164:	f7ff fefc 	bl	8005f60 <_free_r>
 8006168:	e7c7      	b.n	80060fa <__ssputs_r+0x46>
	...

0800616c <_svfiprintf_r>:
 800616c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006170:	4698      	mov	r8, r3
 8006172:	898b      	ldrh	r3, [r1, #12]
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	b09d      	sub	sp, #116	; 0x74
 8006178:	4607      	mov	r7, r0
 800617a:	460d      	mov	r5, r1
 800617c:	4614      	mov	r4, r2
 800617e:	d50e      	bpl.n	800619e <_svfiprintf_r+0x32>
 8006180:	690b      	ldr	r3, [r1, #16]
 8006182:	b963      	cbnz	r3, 800619e <_svfiprintf_r+0x32>
 8006184:	2140      	movs	r1, #64	; 0x40
 8006186:	f7ff ff3b 	bl	8006000 <_malloc_r>
 800618a:	6028      	str	r0, [r5, #0]
 800618c:	6128      	str	r0, [r5, #16]
 800618e:	b920      	cbnz	r0, 800619a <_svfiprintf_r+0x2e>
 8006190:	230c      	movs	r3, #12
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	e0d1      	b.n	800633e <_svfiprintf_r+0x1d2>
 800619a:	2340      	movs	r3, #64	; 0x40
 800619c:	616b      	str	r3, [r5, #20]
 800619e:	2300      	movs	r3, #0
 80061a0:	9309      	str	r3, [sp, #36]	; 0x24
 80061a2:	2320      	movs	r3, #32
 80061a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ac:	2330      	movs	r3, #48	; 0x30
 80061ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006358 <_svfiprintf_r+0x1ec>
 80061b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061b6:	f04f 0901 	mov.w	r9, #1
 80061ba:	4623      	mov	r3, r4
 80061bc:	469a      	mov	sl, r3
 80061be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061c2:	b10a      	cbz	r2, 80061c8 <_svfiprintf_r+0x5c>
 80061c4:	2a25      	cmp	r2, #37	; 0x25
 80061c6:	d1f9      	bne.n	80061bc <_svfiprintf_r+0x50>
 80061c8:	ebba 0b04 	subs.w	fp, sl, r4
 80061cc:	d00b      	beq.n	80061e6 <_svfiprintf_r+0x7a>
 80061ce:	465b      	mov	r3, fp
 80061d0:	4622      	mov	r2, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	4638      	mov	r0, r7
 80061d6:	f7ff ff6d 	bl	80060b4 <__ssputs_r>
 80061da:	3001      	adds	r0, #1
 80061dc:	f000 80aa 	beq.w	8006334 <_svfiprintf_r+0x1c8>
 80061e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061e2:	445a      	add	r2, fp
 80061e4:	9209      	str	r2, [sp, #36]	; 0x24
 80061e6:	f89a 3000 	ldrb.w	r3, [sl]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 80a2 	beq.w	8006334 <_svfiprintf_r+0x1c8>
 80061f0:	2300      	movs	r3, #0
 80061f2:	f04f 32ff 	mov.w	r2, #4294967295
 80061f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061fa:	f10a 0a01 	add.w	sl, sl, #1
 80061fe:	9304      	str	r3, [sp, #16]
 8006200:	9307      	str	r3, [sp, #28]
 8006202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006206:	931a      	str	r3, [sp, #104]	; 0x68
 8006208:	4654      	mov	r4, sl
 800620a:	2205      	movs	r2, #5
 800620c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006210:	4851      	ldr	r0, [pc, #324]	; (8006358 <_svfiprintf_r+0x1ec>)
 8006212:	f7f9 fff5 	bl	8000200 <memchr>
 8006216:	9a04      	ldr	r2, [sp, #16]
 8006218:	b9d8      	cbnz	r0, 8006252 <_svfiprintf_r+0xe6>
 800621a:	06d0      	lsls	r0, r2, #27
 800621c:	bf44      	itt	mi
 800621e:	2320      	movmi	r3, #32
 8006220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006224:	0711      	lsls	r1, r2, #28
 8006226:	bf44      	itt	mi
 8006228:	232b      	movmi	r3, #43	; 0x2b
 800622a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800622e:	f89a 3000 	ldrb.w	r3, [sl]
 8006232:	2b2a      	cmp	r3, #42	; 0x2a
 8006234:	d015      	beq.n	8006262 <_svfiprintf_r+0xf6>
 8006236:	9a07      	ldr	r2, [sp, #28]
 8006238:	4654      	mov	r4, sl
 800623a:	2000      	movs	r0, #0
 800623c:	f04f 0c0a 	mov.w	ip, #10
 8006240:	4621      	mov	r1, r4
 8006242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006246:	3b30      	subs	r3, #48	; 0x30
 8006248:	2b09      	cmp	r3, #9
 800624a:	d94e      	bls.n	80062ea <_svfiprintf_r+0x17e>
 800624c:	b1b0      	cbz	r0, 800627c <_svfiprintf_r+0x110>
 800624e:	9207      	str	r2, [sp, #28]
 8006250:	e014      	b.n	800627c <_svfiprintf_r+0x110>
 8006252:	eba0 0308 	sub.w	r3, r0, r8
 8006256:	fa09 f303 	lsl.w	r3, r9, r3
 800625a:	4313      	orrs	r3, r2
 800625c:	9304      	str	r3, [sp, #16]
 800625e:	46a2      	mov	sl, r4
 8006260:	e7d2      	b.n	8006208 <_svfiprintf_r+0x9c>
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	9103      	str	r1, [sp, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	bfbb      	ittet	lt
 800626e:	425b      	neglt	r3, r3
 8006270:	f042 0202 	orrlt.w	r2, r2, #2
 8006274:	9307      	strge	r3, [sp, #28]
 8006276:	9307      	strlt	r3, [sp, #28]
 8006278:	bfb8      	it	lt
 800627a:	9204      	strlt	r2, [sp, #16]
 800627c:	7823      	ldrb	r3, [r4, #0]
 800627e:	2b2e      	cmp	r3, #46	; 0x2e
 8006280:	d10c      	bne.n	800629c <_svfiprintf_r+0x130>
 8006282:	7863      	ldrb	r3, [r4, #1]
 8006284:	2b2a      	cmp	r3, #42	; 0x2a
 8006286:	d135      	bne.n	80062f4 <_svfiprintf_r+0x188>
 8006288:	9b03      	ldr	r3, [sp, #12]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	9203      	str	r2, [sp, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	bfb8      	it	lt
 8006294:	f04f 33ff 	movlt.w	r3, #4294967295
 8006298:	3402      	adds	r4, #2
 800629a:	9305      	str	r3, [sp, #20]
 800629c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006368 <_svfiprintf_r+0x1fc>
 80062a0:	7821      	ldrb	r1, [r4, #0]
 80062a2:	2203      	movs	r2, #3
 80062a4:	4650      	mov	r0, sl
 80062a6:	f7f9 ffab 	bl	8000200 <memchr>
 80062aa:	b140      	cbz	r0, 80062be <_svfiprintf_r+0x152>
 80062ac:	2340      	movs	r3, #64	; 0x40
 80062ae:	eba0 000a 	sub.w	r0, r0, sl
 80062b2:	fa03 f000 	lsl.w	r0, r3, r0
 80062b6:	9b04      	ldr	r3, [sp, #16]
 80062b8:	4303      	orrs	r3, r0
 80062ba:	3401      	adds	r4, #1
 80062bc:	9304      	str	r3, [sp, #16]
 80062be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c2:	4826      	ldr	r0, [pc, #152]	; (800635c <_svfiprintf_r+0x1f0>)
 80062c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062c8:	2206      	movs	r2, #6
 80062ca:	f7f9 ff99 	bl	8000200 <memchr>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d038      	beq.n	8006344 <_svfiprintf_r+0x1d8>
 80062d2:	4b23      	ldr	r3, [pc, #140]	; (8006360 <_svfiprintf_r+0x1f4>)
 80062d4:	bb1b      	cbnz	r3, 800631e <_svfiprintf_r+0x1b2>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	3307      	adds	r3, #7
 80062da:	f023 0307 	bic.w	r3, r3, #7
 80062de:	3308      	adds	r3, #8
 80062e0:	9303      	str	r3, [sp, #12]
 80062e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e4:	4433      	add	r3, r6
 80062e6:	9309      	str	r3, [sp, #36]	; 0x24
 80062e8:	e767      	b.n	80061ba <_svfiprintf_r+0x4e>
 80062ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ee:	460c      	mov	r4, r1
 80062f0:	2001      	movs	r0, #1
 80062f2:	e7a5      	b.n	8006240 <_svfiprintf_r+0xd4>
 80062f4:	2300      	movs	r3, #0
 80062f6:	3401      	adds	r4, #1
 80062f8:	9305      	str	r3, [sp, #20]
 80062fa:	4619      	mov	r1, r3
 80062fc:	f04f 0c0a 	mov.w	ip, #10
 8006300:	4620      	mov	r0, r4
 8006302:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006306:	3a30      	subs	r2, #48	; 0x30
 8006308:	2a09      	cmp	r2, #9
 800630a:	d903      	bls.n	8006314 <_svfiprintf_r+0x1a8>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0c5      	beq.n	800629c <_svfiprintf_r+0x130>
 8006310:	9105      	str	r1, [sp, #20]
 8006312:	e7c3      	b.n	800629c <_svfiprintf_r+0x130>
 8006314:	fb0c 2101 	mla	r1, ip, r1, r2
 8006318:	4604      	mov	r4, r0
 800631a:	2301      	movs	r3, #1
 800631c:	e7f0      	b.n	8006300 <_svfiprintf_r+0x194>
 800631e:	ab03      	add	r3, sp, #12
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	462a      	mov	r2, r5
 8006324:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <_svfiprintf_r+0x1f8>)
 8006326:	a904      	add	r1, sp, #16
 8006328:	4638      	mov	r0, r7
 800632a:	f7fe f80f 	bl	800434c <_printf_float>
 800632e:	1c42      	adds	r2, r0, #1
 8006330:	4606      	mov	r6, r0
 8006332:	d1d6      	bne.n	80062e2 <_svfiprintf_r+0x176>
 8006334:	89ab      	ldrh	r3, [r5, #12]
 8006336:	065b      	lsls	r3, r3, #25
 8006338:	f53f af2c 	bmi.w	8006194 <_svfiprintf_r+0x28>
 800633c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800633e:	b01d      	add	sp, #116	; 0x74
 8006340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006344:	ab03      	add	r3, sp, #12
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	462a      	mov	r2, r5
 800634a:	4b06      	ldr	r3, [pc, #24]	; (8006364 <_svfiprintf_r+0x1f8>)
 800634c:	a904      	add	r1, sp, #16
 800634e:	4638      	mov	r0, r7
 8006350:	f7fe faa0 	bl	8004894 <_printf_i>
 8006354:	e7eb      	b.n	800632e <_svfiprintf_r+0x1c2>
 8006356:	bf00      	nop
 8006358:	08007204 	.word	0x08007204
 800635c:	0800720e 	.word	0x0800720e
 8006360:	0800434d 	.word	0x0800434d
 8006364:	080060b5 	.word	0x080060b5
 8006368:	0800720a 	.word	0x0800720a

0800636c <_sbrk_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d06      	ldr	r5, [pc, #24]	; (8006388 <_sbrk_r+0x1c>)
 8006370:	2300      	movs	r3, #0
 8006372:	4604      	mov	r4, r0
 8006374:	4608      	mov	r0, r1
 8006376:	602b      	str	r3, [r5, #0]
 8006378:	f7fb fb98 	bl	8001aac <_sbrk>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_sbrk_r+0x1a>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_sbrk_r+0x1a>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	2000030c 	.word	0x2000030c

0800638c <__assert_func>:
 800638c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800638e:	4614      	mov	r4, r2
 8006390:	461a      	mov	r2, r3
 8006392:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <__assert_func+0x2c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4605      	mov	r5, r0
 8006398:	68d8      	ldr	r0, [r3, #12]
 800639a:	b14c      	cbz	r4, 80063b0 <__assert_func+0x24>
 800639c:	4b07      	ldr	r3, [pc, #28]	; (80063bc <__assert_func+0x30>)
 800639e:	9100      	str	r1, [sp, #0]
 80063a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063a4:	4906      	ldr	r1, [pc, #24]	; (80063c0 <__assert_func+0x34>)
 80063a6:	462b      	mov	r3, r5
 80063a8:	f000 f80e 	bl	80063c8 <fiprintf>
 80063ac:	f000 faa4 	bl	80068f8 <abort>
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <__assert_func+0x38>)
 80063b2:	461c      	mov	r4, r3
 80063b4:	e7f3      	b.n	800639e <__assert_func+0x12>
 80063b6:	bf00      	nop
 80063b8:	2000000c 	.word	0x2000000c
 80063bc:	08007215 	.word	0x08007215
 80063c0:	08007222 	.word	0x08007222
 80063c4:	08007250 	.word	0x08007250

080063c8 <fiprintf>:
 80063c8:	b40e      	push	{r1, r2, r3}
 80063ca:	b503      	push	{r0, r1, lr}
 80063cc:	4601      	mov	r1, r0
 80063ce:	ab03      	add	r3, sp, #12
 80063d0:	4805      	ldr	r0, [pc, #20]	; (80063e8 <fiprintf+0x20>)
 80063d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063d6:	6800      	ldr	r0, [r0, #0]
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	f000 f88f 	bl	80064fc <_vfiprintf_r>
 80063de:	b002      	add	sp, #8
 80063e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063e4:	b003      	add	sp, #12
 80063e6:	4770      	bx	lr
 80063e8:	2000000c 	.word	0x2000000c

080063ec <__ascii_mbtowc>:
 80063ec:	b082      	sub	sp, #8
 80063ee:	b901      	cbnz	r1, 80063f2 <__ascii_mbtowc+0x6>
 80063f0:	a901      	add	r1, sp, #4
 80063f2:	b142      	cbz	r2, 8006406 <__ascii_mbtowc+0x1a>
 80063f4:	b14b      	cbz	r3, 800640a <__ascii_mbtowc+0x1e>
 80063f6:	7813      	ldrb	r3, [r2, #0]
 80063f8:	600b      	str	r3, [r1, #0]
 80063fa:	7812      	ldrb	r2, [r2, #0]
 80063fc:	1e10      	subs	r0, r2, #0
 80063fe:	bf18      	it	ne
 8006400:	2001      	movne	r0, #1
 8006402:	b002      	add	sp, #8
 8006404:	4770      	bx	lr
 8006406:	4610      	mov	r0, r2
 8006408:	e7fb      	b.n	8006402 <__ascii_mbtowc+0x16>
 800640a:	f06f 0001 	mvn.w	r0, #1
 800640e:	e7f8      	b.n	8006402 <__ascii_mbtowc+0x16>

08006410 <memmove>:
 8006410:	4288      	cmp	r0, r1
 8006412:	b510      	push	{r4, lr}
 8006414:	eb01 0402 	add.w	r4, r1, r2
 8006418:	d902      	bls.n	8006420 <memmove+0x10>
 800641a:	4284      	cmp	r4, r0
 800641c:	4623      	mov	r3, r4
 800641e:	d807      	bhi.n	8006430 <memmove+0x20>
 8006420:	1e43      	subs	r3, r0, #1
 8006422:	42a1      	cmp	r1, r4
 8006424:	d008      	beq.n	8006438 <memmove+0x28>
 8006426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800642a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800642e:	e7f8      	b.n	8006422 <memmove+0x12>
 8006430:	4402      	add	r2, r0
 8006432:	4601      	mov	r1, r0
 8006434:	428a      	cmp	r2, r1
 8006436:	d100      	bne.n	800643a <memmove+0x2a>
 8006438:	bd10      	pop	{r4, pc}
 800643a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800643e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006442:	e7f7      	b.n	8006434 <memmove+0x24>

08006444 <__malloc_lock>:
 8006444:	4801      	ldr	r0, [pc, #4]	; (800644c <__malloc_lock+0x8>)
 8006446:	f000 bc17 	b.w	8006c78 <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	20000314 	.word	0x20000314

08006450 <__malloc_unlock>:
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <__malloc_unlock+0x8>)
 8006452:	f000 bc12 	b.w	8006c7a <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	20000314 	.word	0x20000314

0800645c <_realloc_r>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	4607      	mov	r7, r0
 8006460:	4614      	mov	r4, r2
 8006462:	460e      	mov	r6, r1
 8006464:	b921      	cbnz	r1, 8006470 <_realloc_r+0x14>
 8006466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800646a:	4611      	mov	r1, r2
 800646c:	f7ff bdc8 	b.w	8006000 <_malloc_r>
 8006470:	b922      	cbnz	r2, 800647c <_realloc_r+0x20>
 8006472:	f7ff fd75 	bl	8005f60 <_free_r>
 8006476:	4625      	mov	r5, r4
 8006478:	4628      	mov	r0, r5
 800647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800647c:	f000 fc62 	bl	8006d44 <_malloc_usable_size_r>
 8006480:	42a0      	cmp	r0, r4
 8006482:	d20f      	bcs.n	80064a4 <_realloc_r+0x48>
 8006484:	4621      	mov	r1, r4
 8006486:	4638      	mov	r0, r7
 8006488:	f7ff fdba 	bl	8006000 <_malloc_r>
 800648c:	4605      	mov	r5, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	d0f2      	beq.n	8006478 <_realloc_r+0x1c>
 8006492:	4631      	mov	r1, r6
 8006494:	4622      	mov	r2, r4
 8006496:	f7ff f9c7 	bl	8005828 <memcpy>
 800649a:	4631      	mov	r1, r6
 800649c:	4638      	mov	r0, r7
 800649e:	f7ff fd5f 	bl	8005f60 <_free_r>
 80064a2:	e7e9      	b.n	8006478 <_realloc_r+0x1c>
 80064a4:	4635      	mov	r5, r6
 80064a6:	e7e7      	b.n	8006478 <_realloc_r+0x1c>

080064a8 <__sfputc_r>:
 80064a8:	6893      	ldr	r3, [r2, #8]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	b410      	push	{r4}
 80064b0:	6093      	str	r3, [r2, #8]
 80064b2:	da08      	bge.n	80064c6 <__sfputc_r+0x1e>
 80064b4:	6994      	ldr	r4, [r2, #24]
 80064b6:	42a3      	cmp	r3, r4
 80064b8:	db01      	blt.n	80064be <__sfputc_r+0x16>
 80064ba:	290a      	cmp	r1, #10
 80064bc:	d103      	bne.n	80064c6 <__sfputc_r+0x1e>
 80064be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064c2:	f000 b94b 	b.w	800675c <__swbuf_r>
 80064c6:	6813      	ldr	r3, [r2, #0]
 80064c8:	1c58      	adds	r0, r3, #1
 80064ca:	6010      	str	r0, [r2, #0]
 80064cc:	7019      	strb	r1, [r3, #0]
 80064ce:	4608      	mov	r0, r1
 80064d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <__sfputs_r>:
 80064d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d8:	4606      	mov	r6, r0
 80064da:	460f      	mov	r7, r1
 80064dc:	4614      	mov	r4, r2
 80064de:	18d5      	adds	r5, r2, r3
 80064e0:	42ac      	cmp	r4, r5
 80064e2:	d101      	bne.n	80064e8 <__sfputs_r+0x12>
 80064e4:	2000      	movs	r0, #0
 80064e6:	e007      	b.n	80064f8 <__sfputs_r+0x22>
 80064e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ec:	463a      	mov	r2, r7
 80064ee:	4630      	mov	r0, r6
 80064f0:	f7ff ffda 	bl	80064a8 <__sfputc_r>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d1f3      	bne.n	80064e0 <__sfputs_r+0xa>
 80064f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064fc <_vfiprintf_r>:
 80064fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	460d      	mov	r5, r1
 8006502:	b09d      	sub	sp, #116	; 0x74
 8006504:	4614      	mov	r4, r2
 8006506:	4698      	mov	r8, r3
 8006508:	4606      	mov	r6, r0
 800650a:	b118      	cbz	r0, 8006514 <_vfiprintf_r+0x18>
 800650c:	6983      	ldr	r3, [r0, #24]
 800650e:	b90b      	cbnz	r3, 8006514 <_vfiprintf_r+0x18>
 8006510:	f000 fb14 	bl	8006b3c <__sinit>
 8006514:	4b89      	ldr	r3, [pc, #548]	; (800673c <_vfiprintf_r+0x240>)
 8006516:	429d      	cmp	r5, r3
 8006518:	d11b      	bne.n	8006552 <_vfiprintf_r+0x56>
 800651a:	6875      	ldr	r5, [r6, #4]
 800651c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800651e:	07d9      	lsls	r1, r3, #31
 8006520:	d405      	bmi.n	800652e <_vfiprintf_r+0x32>
 8006522:	89ab      	ldrh	r3, [r5, #12]
 8006524:	059a      	lsls	r2, r3, #22
 8006526:	d402      	bmi.n	800652e <_vfiprintf_r+0x32>
 8006528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800652a:	f000 fba5 	bl	8006c78 <__retarget_lock_acquire_recursive>
 800652e:	89ab      	ldrh	r3, [r5, #12]
 8006530:	071b      	lsls	r3, r3, #28
 8006532:	d501      	bpl.n	8006538 <_vfiprintf_r+0x3c>
 8006534:	692b      	ldr	r3, [r5, #16]
 8006536:	b9eb      	cbnz	r3, 8006574 <_vfiprintf_r+0x78>
 8006538:	4629      	mov	r1, r5
 800653a:	4630      	mov	r0, r6
 800653c:	f000 f96e 	bl	800681c <__swsetup_r>
 8006540:	b1c0      	cbz	r0, 8006574 <_vfiprintf_r+0x78>
 8006542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006544:	07dc      	lsls	r4, r3, #31
 8006546:	d50e      	bpl.n	8006566 <_vfiprintf_r+0x6a>
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	b01d      	add	sp, #116	; 0x74
 800654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006552:	4b7b      	ldr	r3, [pc, #492]	; (8006740 <_vfiprintf_r+0x244>)
 8006554:	429d      	cmp	r5, r3
 8006556:	d101      	bne.n	800655c <_vfiprintf_r+0x60>
 8006558:	68b5      	ldr	r5, [r6, #8]
 800655a:	e7df      	b.n	800651c <_vfiprintf_r+0x20>
 800655c:	4b79      	ldr	r3, [pc, #484]	; (8006744 <_vfiprintf_r+0x248>)
 800655e:	429d      	cmp	r5, r3
 8006560:	bf08      	it	eq
 8006562:	68f5      	ldreq	r5, [r6, #12]
 8006564:	e7da      	b.n	800651c <_vfiprintf_r+0x20>
 8006566:	89ab      	ldrh	r3, [r5, #12]
 8006568:	0598      	lsls	r0, r3, #22
 800656a:	d4ed      	bmi.n	8006548 <_vfiprintf_r+0x4c>
 800656c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800656e:	f000 fb84 	bl	8006c7a <__retarget_lock_release_recursive>
 8006572:	e7e9      	b.n	8006548 <_vfiprintf_r+0x4c>
 8006574:	2300      	movs	r3, #0
 8006576:	9309      	str	r3, [sp, #36]	; 0x24
 8006578:	2320      	movs	r3, #32
 800657a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800657e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006582:	2330      	movs	r3, #48	; 0x30
 8006584:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006748 <_vfiprintf_r+0x24c>
 8006588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800658c:	f04f 0901 	mov.w	r9, #1
 8006590:	4623      	mov	r3, r4
 8006592:	469a      	mov	sl, r3
 8006594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006598:	b10a      	cbz	r2, 800659e <_vfiprintf_r+0xa2>
 800659a:	2a25      	cmp	r2, #37	; 0x25
 800659c:	d1f9      	bne.n	8006592 <_vfiprintf_r+0x96>
 800659e:	ebba 0b04 	subs.w	fp, sl, r4
 80065a2:	d00b      	beq.n	80065bc <_vfiprintf_r+0xc0>
 80065a4:	465b      	mov	r3, fp
 80065a6:	4622      	mov	r2, r4
 80065a8:	4629      	mov	r1, r5
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7ff ff93 	bl	80064d6 <__sfputs_r>
 80065b0:	3001      	adds	r0, #1
 80065b2:	f000 80aa 	beq.w	800670a <_vfiprintf_r+0x20e>
 80065b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065b8:	445a      	add	r2, fp
 80065ba:	9209      	str	r2, [sp, #36]	; 0x24
 80065bc:	f89a 3000 	ldrb.w	r3, [sl]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80a2 	beq.w	800670a <_vfiprintf_r+0x20e>
 80065c6:	2300      	movs	r3, #0
 80065c8:	f04f 32ff 	mov.w	r2, #4294967295
 80065cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065d0:	f10a 0a01 	add.w	sl, sl, #1
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	9307      	str	r3, [sp, #28]
 80065d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065dc:	931a      	str	r3, [sp, #104]	; 0x68
 80065de:	4654      	mov	r4, sl
 80065e0:	2205      	movs	r2, #5
 80065e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e6:	4858      	ldr	r0, [pc, #352]	; (8006748 <_vfiprintf_r+0x24c>)
 80065e8:	f7f9 fe0a 	bl	8000200 <memchr>
 80065ec:	9a04      	ldr	r2, [sp, #16]
 80065ee:	b9d8      	cbnz	r0, 8006628 <_vfiprintf_r+0x12c>
 80065f0:	06d1      	lsls	r1, r2, #27
 80065f2:	bf44      	itt	mi
 80065f4:	2320      	movmi	r3, #32
 80065f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065fa:	0713      	lsls	r3, r2, #28
 80065fc:	bf44      	itt	mi
 80065fe:	232b      	movmi	r3, #43	; 0x2b
 8006600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006604:	f89a 3000 	ldrb.w	r3, [sl]
 8006608:	2b2a      	cmp	r3, #42	; 0x2a
 800660a:	d015      	beq.n	8006638 <_vfiprintf_r+0x13c>
 800660c:	9a07      	ldr	r2, [sp, #28]
 800660e:	4654      	mov	r4, sl
 8006610:	2000      	movs	r0, #0
 8006612:	f04f 0c0a 	mov.w	ip, #10
 8006616:	4621      	mov	r1, r4
 8006618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800661c:	3b30      	subs	r3, #48	; 0x30
 800661e:	2b09      	cmp	r3, #9
 8006620:	d94e      	bls.n	80066c0 <_vfiprintf_r+0x1c4>
 8006622:	b1b0      	cbz	r0, 8006652 <_vfiprintf_r+0x156>
 8006624:	9207      	str	r2, [sp, #28]
 8006626:	e014      	b.n	8006652 <_vfiprintf_r+0x156>
 8006628:	eba0 0308 	sub.w	r3, r0, r8
 800662c:	fa09 f303 	lsl.w	r3, r9, r3
 8006630:	4313      	orrs	r3, r2
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	46a2      	mov	sl, r4
 8006636:	e7d2      	b.n	80065de <_vfiprintf_r+0xe2>
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	1d19      	adds	r1, r3, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	9103      	str	r1, [sp, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	bfbb      	ittet	lt
 8006644:	425b      	neglt	r3, r3
 8006646:	f042 0202 	orrlt.w	r2, r2, #2
 800664a:	9307      	strge	r3, [sp, #28]
 800664c:	9307      	strlt	r3, [sp, #28]
 800664e:	bfb8      	it	lt
 8006650:	9204      	strlt	r2, [sp, #16]
 8006652:	7823      	ldrb	r3, [r4, #0]
 8006654:	2b2e      	cmp	r3, #46	; 0x2e
 8006656:	d10c      	bne.n	8006672 <_vfiprintf_r+0x176>
 8006658:	7863      	ldrb	r3, [r4, #1]
 800665a:	2b2a      	cmp	r3, #42	; 0x2a
 800665c:	d135      	bne.n	80066ca <_vfiprintf_r+0x1ce>
 800665e:	9b03      	ldr	r3, [sp, #12]
 8006660:	1d1a      	adds	r2, r3, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	9203      	str	r2, [sp, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfb8      	it	lt
 800666a:	f04f 33ff 	movlt.w	r3, #4294967295
 800666e:	3402      	adds	r4, #2
 8006670:	9305      	str	r3, [sp, #20]
 8006672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006758 <_vfiprintf_r+0x25c>
 8006676:	7821      	ldrb	r1, [r4, #0]
 8006678:	2203      	movs	r2, #3
 800667a:	4650      	mov	r0, sl
 800667c:	f7f9 fdc0 	bl	8000200 <memchr>
 8006680:	b140      	cbz	r0, 8006694 <_vfiprintf_r+0x198>
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	eba0 000a 	sub.w	r0, r0, sl
 8006688:	fa03 f000 	lsl.w	r0, r3, r0
 800668c:	9b04      	ldr	r3, [sp, #16]
 800668e:	4303      	orrs	r3, r0
 8006690:	3401      	adds	r4, #1
 8006692:	9304      	str	r3, [sp, #16]
 8006694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006698:	482c      	ldr	r0, [pc, #176]	; (800674c <_vfiprintf_r+0x250>)
 800669a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800669e:	2206      	movs	r2, #6
 80066a0:	f7f9 fdae 	bl	8000200 <memchr>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d03f      	beq.n	8006728 <_vfiprintf_r+0x22c>
 80066a8:	4b29      	ldr	r3, [pc, #164]	; (8006750 <_vfiprintf_r+0x254>)
 80066aa:	bb1b      	cbnz	r3, 80066f4 <_vfiprintf_r+0x1f8>
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	3307      	adds	r3, #7
 80066b0:	f023 0307 	bic.w	r3, r3, #7
 80066b4:	3308      	adds	r3, #8
 80066b6:	9303      	str	r3, [sp, #12]
 80066b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ba:	443b      	add	r3, r7
 80066bc:	9309      	str	r3, [sp, #36]	; 0x24
 80066be:	e767      	b.n	8006590 <_vfiprintf_r+0x94>
 80066c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80066c4:	460c      	mov	r4, r1
 80066c6:	2001      	movs	r0, #1
 80066c8:	e7a5      	b.n	8006616 <_vfiprintf_r+0x11a>
 80066ca:	2300      	movs	r3, #0
 80066cc:	3401      	adds	r4, #1
 80066ce:	9305      	str	r3, [sp, #20]
 80066d0:	4619      	mov	r1, r3
 80066d2:	f04f 0c0a 	mov.w	ip, #10
 80066d6:	4620      	mov	r0, r4
 80066d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066dc:	3a30      	subs	r2, #48	; 0x30
 80066de:	2a09      	cmp	r2, #9
 80066e0:	d903      	bls.n	80066ea <_vfiprintf_r+0x1ee>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0c5      	beq.n	8006672 <_vfiprintf_r+0x176>
 80066e6:	9105      	str	r1, [sp, #20]
 80066e8:	e7c3      	b.n	8006672 <_vfiprintf_r+0x176>
 80066ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ee:	4604      	mov	r4, r0
 80066f0:	2301      	movs	r3, #1
 80066f2:	e7f0      	b.n	80066d6 <_vfiprintf_r+0x1da>
 80066f4:	ab03      	add	r3, sp, #12
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	462a      	mov	r2, r5
 80066fa:	4b16      	ldr	r3, [pc, #88]	; (8006754 <_vfiprintf_r+0x258>)
 80066fc:	a904      	add	r1, sp, #16
 80066fe:	4630      	mov	r0, r6
 8006700:	f7fd fe24 	bl	800434c <_printf_float>
 8006704:	4607      	mov	r7, r0
 8006706:	1c78      	adds	r0, r7, #1
 8006708:	d1d6      	bne.n	80066b8 <_vfiprintf_r+0x1bc>
 800670a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800670c:	07d9      	lsls	r1, r3, #31
 800670e:	d405      	bmi.n	800671c <_vfiprintf_r+0x220>
 8006710:	89ab      	ldrh	r3, [r5, #12]
 8006712:	059a      	lsls	r2, r3, #22
 8006714:	d402      	bmi.n	800671c <_vfiprintf_r+0x220>
 8006716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006718:	f000 faaf 	bl	8006c7a <__retarget_lock_release_recursive>
 800671c:	89ab      	ldrh	r3, [r5, #12]
 800671e:	065b      	lsls	r3, r3, #25
 8006720:	f53f af12 	bmi.w	8006548 <_vfiprintf_r+0x4c>
 8006724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006726:	e711      	b.n	800654c <_vfiprintf_r+0x50>
 8006728:	ab03      	add	r3, sp, #12
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	462a      	mov	r2, r5
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <_vfiprintf_r+0x258>)
 8006730:	a904      	add	r1, sp, #16
 8006732:	4630      	mov	r0, r6
 8006734:	f7fe f8ae 	bl	8004894 <_printf_i>
 8006738:	e7e4      	b.n	8006704 <_vfiprintf_r+0x208>
 800673a:	bf00      	nop
 800673c:	0800737c 	.word	0x0800737c
 8006740:	0800739c 	.word	0x0800739c
 8006744:	0800735c 	.word	0x0800735c
 8006748:	08007204 	.word	0x08007204
 800674c:	0800720e 	.word	0x0800720e
 8006750:	0800434d 	.word	0x0800434d
 8006754:	080064d7 	.word	0x080064d7
 8006758:	0800720a 	.word	0x0800720a

0800675c <__swbuf_r>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	460e      	mov	r6, r1
 8006760:	4614      	mov	r4, r2
 8006762:	4605      	mov	r5, r0
 8006764:	b118      	cbz	r0, 800676e <__swbuf_r+0x12>
 8006766:	6983      	ldr	r3, [r0, #24]
 8006768:	b90b      	cbnz	r3, 800676e <__swbuf_r+0x12>
 800676a:	f000 f9e7 	bl	8006b3c <__sinit>
 800676e:	4b21      	ldr	r3, [pc, #132]	; (80067f4 <__swbuf_r+0x98>)
 8006770:	429c      	cmp	r4, r3
 8006772:	d12b      	bne.n	80067cc <__swbuf_r+0x70>
 8006774:	686c      	ldr	r4, [r5, #4]
 8006776:	69a3      	ldr	r3, [r4, #24]
 8006778:	60a3      	str	r3, [r4, #8]
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	071a      	lsls	r2, r3, #28
 800677e:	d52f      	bpl.n	80067e0 <__swbuf_r+0x84>
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	b36b      	cbz	r3, 80067e0 <__swbuf_r+0x84>
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	6820      	ldr	r0, [r4, #0]
 8006788:	1ac0      	subs	r0, r0, r3
 800678a:	6963      	ldr	r3, [r4, #20]
 800678c:	b2f6      	uxtb	r6, r6
 800678e:	4283      	cmp	r3, r0
 8006790:	4637      	mov	r7, r6
 8006792:	dc04      	bgt.n	800679e <__swbuf_r+0x42>
 8006794:	4621      	mov	r1, r4
 8006796:	4628      	mov	r0, r5
 8006798:	f000 f93c 	bl	8006a14 <_fflush_r>
 800679c:	bb30      	cbnz	r0, 80067ec <__swbuf_r+0x90>
 800679e:	68a3      	ldr	r3, [r4, #8]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	60a3      	str	r3, [r4, #8]
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	6022      	str	r2, [r4, #0]
 80067aa:	701e      	strb	r6, [r3, #0]
 80067ac:	6963      	ldr	r3, [r4, #20]
 80067ae:	3001      	adds	r0, #1
 80067b0:	4283      	cmp	r3, r0
 80067b2:	d004      	beq.n	80067be <__swbuf_r+0x62>
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	07db      	lsls	r3, r3, #31
 80067b8:	d506      	bpl.n	80067c8 <__swbuf_r+0x6c>
 80067ba:	2e0a      	cmp	r6, #10
 80067bc:	d104      	bne.n	80067c8 <__swbuf_r+0x6c>
 80067be:	4621      	mov	r1, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 f927 	bl	8006a14 <_fflush_r>
 80067c6:	b988      	cbnz	r0, 80067ec <__swbuf_r+0x90>
 80067c8:	4638      	mov	r0, r7
 80067ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067cc:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <__swbuf_r+0x9c>)
 80067ce:	429c      	cmp	r4, r3
 80067d0:	d101      	bne.n	80067d6 <__swbuf_r+0x7a>
 80067d2:	68ac      	ldr	r4, [r5, #8]
 80067d4:	e7cf      	b.n	8006776 <__swbuf_r+0x1a>
 80067d6:	4b09      	ldr	r3, [pc, #36]	; (80067fc <__swbuf_r+0xa0>)
 80067d8:	429c      	cmp	r4, r3
 80067da:	bf08      	it	eq
 80067dc:	68ec      	ldreq	r4, [r5, #12]
 80067de:	e7ca      	b.n	8006776 <__swbuf_r+0x1a>
 80067e0:	4621      	mov	r1, r4
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 f81a 	bl	800681c <__swsetup_r>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d0cb      	beq.n	8006784 <__swbuf_r+0x28>
 80067ec:	f04f 37ff 	mov.w	r7, #4294967295
 80067f0:	e7ea      	b.n	80067c8 <__swbuf_r+0x6c>
 80067f2:	bf00      	nop
 80067f4:	0800737c 	.word	0x0800737c
 80067f8:	0800739c 	.word	0x0800739c
 80067fc:	0800735c 	.word	0x0800735c

08006800 <__ascii_wctomb>:
 8006800:	b149      	cbz	r1, 8006816 <__ascii_wctomb+0x16>
 8006802:	2aff      	cmp	r2, #255	; 0xff
 8006804:	bf85      	ittet	hi
 8006806:	238a      	movhi	r3, #138	; 0x8a
 8006808:	6003      	strhi	r3, [r0, #0]
 800680a:	700a      	strbls	r2, [r1, #0]
 800680c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006810:	bf98      	it	ls
 8006812:	2001      	movls	r0, #1
 8006814:	4770      	bx	lr
 8006816:	4608      	mov	r0, r1
 8006818:	4770      	bx	lr
	...

0800681c <__swsetup_r>:
 800681c:	4b32      	ldr	r3, [pc, #200]	; (80068e8 <__swsetup_r+0xcc>)
 800681e:	b570      	push	{r4, r5, r6, lr}
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	4606      	mov	r6, r0
 8006824:	460c      	mov	r4, r1
 8006826:	b125      	cbz	r5, 8006832 <__swsetup_r+0x16>
 8006828:	69ab      	ldr	r3, [r5, #24]
 800682a:	b913      	cbnz	r3, 8006832 <__swsetup_r+0x16>
 800682c:	4628      	mov	r0, r5
 800682e:	f000 f985 	bl	8006b3c <__sinit>
 8006832:	4b2e      	ldr	r3, [pc, #184]	; (80068ec <__swsetup_r+0xd0>)
 8006834:	429c      	cmp	r4, r3
 8006836:	d10f      	bne.n	8006858 <__swsetup_r+0x3c>
 8006838:	686c      	ldr	r4, [r5, #4]
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006840:	0719      	lsls	r1, r3, #28
 8006842:	d42c      	bmi.n	800689e <__swsetup_r+0x82>
 8006844:	06dd      	lsls	r5, r3, #27
 8006846:	d411      	bmi.n	800686c <__swsetup_r+0x50>
 8006848:	2309      	movs	r3, #9
 800684a:	6033      	str	r3, [r6, #0]
 800684c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	f04f 30ff 	mov.w	r0, #4294967295
 8006856:	e03e      	b.n	80068d6 <__swsetup_r+0xba>
 8006858:	4b25      	ldr	r3, [pc, #148]	; (80068f0 <__swsetup_r+0xd4>)
 800685a:	429c      	cmp	r4, r3
 800685c:	d101      	bne.n	8006862 <__swsetup_r+0x46>
 800685e:	68ac      	ldr	r4, [r5, #8]
 8006860:	e7eb      	b.n	800683a <__swsetup_r+0x1e>
 8006862:	4b24      	ldr	r3, [pc, #144]	; (80068f4 <__swsetup_r+0xd8>)
 8006864:	429c      	cmp	r4, r3
 8006866:	bf08      	it	eq
 8006868:	68ec      	ldreq	r4, [r5, #12]
 800686a:	e7e6      	b.n	800683a <__swsetup_r+0x1e>
 800686c:	0758      	lsls	r0, r3, #29
 800686e:	d512      	bpl.n	8006896 <__swsetup_r+0x7a>
 8006870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006872:	b141      	cbz	r1, 8006886 <__swsetup_r+0x6a>
 8006874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006878:	4299      	cmp	r1, r3
 800687a:	d002      	beq.n	8006882 <__swsetup_r+0x66>
 800687c:	4630      	mov	r0, r6
 800687e:	f7ff fb6f 	bl	8005f60 <_free_r>
 8006882:	2300      	movs	r3, #0
 8006884:	6363      	str	r3, [r4, #52]	; 0x34
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	2300      	movs	r3, #0
 8006890:	6063      	str	r3, [r4, #4]
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	f043 0308 	orr.w	r3, r3, #8
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	b94b      	cbnz	r3, 80068b6 <__swsetup_r+0x9a>
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ac:	d003      	beq.n	80068b6 <__swsetup_r+0x9a>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4630      	mov	r0, r6
 80068b2:	f000 fa07 	bl	8006cc4 <__smakebuf_r>
 80068b6:	89a0      	ldrh	r0, [r4, #12]
 80068b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068bc:	f010 0301 	ands.w	r3, r0, #1
 80068c0:	d00a      	beq.n	80068d8 <__swsetup_r+0xbc>
 80068c2:	2300      	movs	r3, #0
 80068c4:	60a3      	str	r3, [r4, #8]
 80068c6:	6963      	ldr	r3, [r4, #20]
 80068c8:	425b      	negs	r3, r3
 80068ca:	61a3      	str	r3, [r4, #24]
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	b943      	cbnz	r3, 80068e2 <__swsetup_r+0xc6>
 80068d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068d4:	d1ba      	bne.n	800684c <__swsetup_r+0x30>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	0781      	lsls	r1, r0, #30
 80068da:	bf58      	it	pl
 80068dc:	6963      	ldrpl	r3, [r4, #20]
 80068de:	60a3      	str	r3, [r4, #8]
 80068e0:	e7f4      	b.n	80068cc <__swsetup_r+0xb0>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e7f7      	b.n	80068d6 <__swsetup_r+0xba>
 80068e6:	bf00      	nop
 80068e8:	2000000c 	.word	0x2000000c
 80068ec:	0800737c 	.word	0x0800737c
 80068f0:	0800739c 	.word	0x0800739c
 80068f4:	0800735c 	.word	0x0800735c

080068f8 <abort>:
 80068f8:	b508      	push	{r3, lr}
 80068fa:	2006      	movs	r0, #6
 80068fc:	f000 fa52 	bl	8006da4 <raise>
 8006900:	2001      	movs	r0, #1
 8006902:	f7fb f85b 	bl	80019bc <_exit>
	...

08006908 <__sflush_r>:
 8006908:	898a      	ldrh	r2, [r1, #12]
 800690a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	4605      	mov	r5, r0
 8006910:	0710      	lsls	r0, r2, #28
 8006912:	460c      	mov	r4, r1
 8006914:	d458      	bmi.n	80069c8 <__sflush_r+0xc0>
 8006916:	684b      	ldr	r3, [r1, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	dc05      	bgt.n	8006928 <__sflush_r+0x20>
 800691c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	dc02      	bgt.n	8006928 <__sflush_r+0x20>
 8006922:	2000      	movs	r0, #0
 8006924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800692a:	2e00      	cmp	r6, #0
 800692c:	d0f9      	beq.n	8006922 <__sflush_r+0x1a>
 800692e:	2300      	movs	r3, #0
 8006930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006934:	682f      	ldr	r7, [r5, #0]
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	d032      	beq.n	80069a0 <__sflush_r+0x98>
 800693a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	075a      	lsls	r2, r3, #29
 8006940:	d505      	bpl.n	800694e <__sflush_r+0x46>
 8006942:	6863      	ldr	r3, [r4, #4]
 8006944:	1ac0      	subs	r0, r0, r3
 8006946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006948:	b10b      	cbz	r3, 800694e <__sflush_r+0x46>
 800694a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800694c:	1ac0      	subs	r0, r0, r3
 800694e:	2300      	movs	r3, #0
 8006950:	4602      	mov	r2, r0
 8006952:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006954:	6a21      	ldr	r1, [r4, #32]
 8006956:	4628      	mov	r0, r5
 8006958:	47b0      	blx	r6
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	d106      	bne.n	800696e <__sflush_r+0x66>
 8006960:	6829      	ldr	r1, [r5, #0]
 8006962:	291d      	cmp	r1, #29
 8006964:	d82c      	bhi.n	80069c0 <__sflush_r+0xb8>
 8006966:	4a2a      	ldr	r2, [pc, #168]	; (8006a10 <__sflush_r+0x108>)
 8006968:	40ca      	lsrs	r2, r1
 800696a:	07d6      	lsls	r6, r2, #31
 800696c:	d528      	bpl.n	80069c0 <__sflush_r+0xb8>
 800696e:	2200      	movs	r2, #0
 8006970:	6062      	str	r2, [r4, #4]
 8006972:	04d9      	lsls	r1, r3, #19
 8006974:	6922      	ldr	r2, [r4, #16]
 8006976:	6022      	str	r2, [r4, #0]
 8006978:	d504      	bpl.n	8006984 <__sflush_r+0x7c>
 800697a:	1c42      	adds	r2, r0, #1
 800697c:	d101      	bne.n	8006982 <__sflush_r+0x7a>
 800697e:	682b      	ldr	r3, [r5, #0]
 8006980:	b903      	cbnz	r3, 8006984 <__sflush_r+0x7c>
 8006982:	6560      	str	r0, [r4, #84]	; 0x54
 8006984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006986:	602f      	str	r7, [r5, #0]
 8006988:	2900      	cmp	r1, #0
 800698a:	d0ca      	beq.n	8006922 <__sflush_r+0x1a>
 800698c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006990:	4299      	cmp	r1, r3
 8006992:	d002      	beq.n	800699a <__sflush_r+0x92>
 8006994:	4628      	mov	r0, r5
 8006996:	f7ff fae3 	bl	8005f60 <_free_r>
 800699a:	2000      	movs	r0, #0
 800699c:	6360      	str	r0, [r4, #52]	; 0x34
 800699e:	e7c1      	b.n	8006924 <__sflush_r+0x1c>
 80069a0:	6a21      	ldr	r1, [r4, #32]
 80069a2:	2301      	movs	r3, #1
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b0      	blx	r6
 80069a8:	1c41      	adds	r1, r0, #1
 80069aa:	d1c7      	bne.n	800693c <__sflush_r+0x34>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0c4      	beq.n	800693c <__sflush_r+0x34>
 80069b2:	2b1d      	cmp	r3, #29
 80069b4:	d001      	beq.n	80069ba <__sflush_r+0xb2>
 80069b6:	2b16      	cmp	r3, #22
 80069b8:	d101      	bne.n	80069be <__sflush_r+0xb6>
 80069ba:	602f      	str	r7, [r5, #0]
 80069bc:	e7b1      	b.n	8006922 <__sflush_r+0x1a>
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c4:	81a3      	strh	r3, [r4, #12]
 80069c6:	e7ad      	b.n	8006924 <__sflush_r+0x1c>
 80069c8:	690f      	ldr	r7, [r1, #16]
 80069ca:	2f00      	cmp	r7, #0
 80069cc:	d0a9      	beq.n	8006922 <__sflush_r+0x1a>
 80069ce:	0793      	lsls	r3, r2, #30
 80069d0:	680e      	ldr	r6, [r1, #0]
 80069d2:	bf08      	it	eq
 80069d4:	694b      	ldreq	r3, [r1, #20]
 80069d6:	600f      	str	r7, [r1, #0]
 80069d8:	bf18      	it	ne
 80069da:	2300      	movne	r3, #0
 80069dc:	eba6 0807 	sub.w	r8, r6, r7
 80069e0:	608b      	str	r3, [r1, #8]
 80069e2:	f1b8 0f00 	cmp.w	r8, #0
 80069e6:	dd9c      	ble.n	8006922 <__sflush_r+0x1a>
 80069e8:	6a21      	ldr	r1, [r4, #32]
 80069ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069ec:	4643      	mov	r3, r8
 80069ee:	463a      	mov	r2, r7
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b0      	blx	r6
 80069f4:	2800      	cmp	r0, #0
 80069f6:	dc06      	bgt.n	8006a06 <__sflush_r+0xfe>
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	e78e      	b.n	8006924 <__sflush_r+0x1c>
 8006a06:	4407      	add	r7, r0
 8006a08:	eba8 0800 	sub.w	r8, r8, r0
 8006a0c:	e7e9      	b.n	80069e2 <__sflush_r+0xda>
 8006a0e:	bf00      	nop
 8006a10:	20400001 	.word	0x20400001

08006a14 <_fflush_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	690b      	ldr	r3, [r1, #16]
 8006a18:	4605      	mov	r5, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	b913      	cbnz	r3, 8006a24 <_fflush_r+0x10>
 8006a1e:	2500      	movs	r5, #0
 8006a20:	4628      	mov	r0, r5
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	b118      	cbz	r0, 8006a2e <_fflush_r+0x1a>
 8006a26:	6983      	ldr	r3, [r0, #24]
 8006a28:	b90b      	cbnz	r3, 8006a2e <_fflush_r+0x1a>
 8006a2a:	f000 f887 	bl	8006b3c <__sinit>
 8006a2e:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <_fflush_r+0x6c>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	d11b      	bne.n	8006a6c <_fflush_r+0x58>
 8006a34:	686c      	ldr	r4, [r5, #4]
 8006a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0ef      	beq.n	8006a1e <_fflush_r+0xa>
 8006a3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a40:	07d0      	lsls	r0, r2, #31
 8006a42:	d404      	bmi.n	8006a4e <_fflush_r+0x3a>
 8006a44:	0599      	lsls	r1, r3, #22
 8006a46:	d402      	bmi.n	8006a4e <_fflush_r+0x3a>
 8006a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a4a:	f000 f915 	bl	8006c78 <__retarget_lock_acquire_recursive>
 8006a4e:	4628      	mov	r0, r5
 8006a50:	4621      	mov	r1, r4
 8006a52:	f7ff ff59 	bl	8006908 <__sflush_r>
 8006a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a58:	07da      	lsls	r2, r3, #31
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	d4e0      	bmi.n	8006a20 <_fflush_r+0xc>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	059b      	lsls	r3, r3, #22
 8006a62:	d4dd      	bmi.n	8006a20 <_fflush_r+0xc>
 8006a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a66:	f000 f908 	bl	8006c7a <__retarget_lock_release_recursive>
 8006a6a:	e7d9      	b.n	8006a20 <_fflush_r+0xc>
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <_fflush_r+0x70>)
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	d101      	bne.n	8006a76 <_fflush_r+0x62>
 8006a72:	68ac      	ldr	r4, [r5, #8]
 8006a74:	e7df      	b.n	8006a36 <_fflush_r+0x22>
 8006a76:	4b04      	ldr	r3, [pc, #16]	; (8006a88 <_fflush_r+0x74>)
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	bf08      	it	eq
 8006a7c:	68ec      	ldreq	r4, [r5, #12]
 8006a7e:	e7da      	b.n	8006a36 <_fflush_r+0x22>
 8006a80:	0800737c 	.word	0x0800737c
 8006a84:	0800739c 	.word	0x0800739c
 8006a88:	0800735c 	.word	0x0800735c

08006a8c <std>:
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	b510      	push	{r4, lr}
 8006a90:	4604      	mov	r4, r0
 8006a92:	e9c0 3300 	strd	r3, r3, [r0]
 8006a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a9a:	6083      	str	r3, [r0, #8]
 8006a9c:	8181      	strh	r1, [r0, #12]
 8006a9e:	6643      	str	r3, [r0, #100]	; 0x64
 8006aa0:	81c2      	strh	r2, [r0, #14]
 8006aa2:	6183      	str	r3, [r0, #24]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	305c      	adds	r0, #92	; 0x5c
 8006aaa:	f7fd fba7 	bl	80041fc <memset>
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <std+0x38>)
 8006ab0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <std+0x3c>)
 8006ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <std+0x40>)
 8006ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <std+0x44>)
 8006abc:	6224      	str	r4, [r4, #32]
 8006abe:	6323      	str	r3, [r4, #48]	; 0x30
 8006ac0:	bd10      	pop	{r4, pc}
 8006ac2:	bf00      	nop
 8006ac4:	08006ddd 	.word	0x08006ddd
 8006ac8:	08006dff 	.word	0x08006dff
 8006acc:	08006e37 	.word	0x08006e37
 8006ad0:	08006e5b 	.word	0x08006e5b

08006ad4 <_cleanup_r>:
 8006ad4:	4901      	ldr	r1, [pc, #4]	; (8006adc <_cleanup_r+0x8>)
 8006ad6:	f000 b8af 	b.w	8006c38 <_fwalk_reent>
 8006ada:	bf00      	nop
 8006adc:	08006a15 	.word	0x08006a15

08006ae0 <__sfmoreglue>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	1e4a      	subs	r2, r1, #1
 8006ae4:	2568      	movs	r5, #104	; 0x68
 8006ae6:	4355      	muls	r5, r2
 8006ae8:	460e      	mov	r6, r1
 8006aea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aee:	f7ff fa87 	bl	8006000 <_malloc_r>
 8006af2:	4604      	mov	r4, r0
 8006af4:	b140      	cbz	r0, 8006b08 <__sfmoreglue+0x28>
 8006af6:	2100      	movs	r1, #0
 8006af8:	e9c0 1600 	strd	r1, r6, [r0]
 8006afc:	300c      	adds	r0, #12
 8006afe:	60a0      	str	r0, [r4, #8]
 8006b00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b04:	f7fd fb7a 	bl	80041fc <memset>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}

08006b0c <__sfp_lock_acquire>:
 8006b0c:	4801      	ldr	r0, [pc, #4]	; (8006b14 <__sfp_lock_acquire+0x8>)
 8006b0e:	f000 b8b3 	b.w	8006c78 <__retarget_lock_acquire_recursive>
 8006b12:	bf00      	nop
 8006b14:	20000318 	.word	0x20000318

08006b18 <__sfp_lock_release>:
 8006b18:	4801      	ldr	r0, [pc, #4]	; (8006b20 <__sfp_lock_release+0x8>)
 8006b1a:	f000 b8ae 	b.w	8006c7a <__retarget_lock_release_recursive>
 8006b1e:	bf00      	nop
 8006b20:	20000318 	.word	0x20000318

08006b24 <__sinit_lock_acquire>:
 8006b24:	4801      	ldr	r0, [pc, #4]	; (8006b2c <__sinit_lock_acquire+0x8>)
 8006b26:	f000 b8a7 	b.w	8006c78 <__retarget_lock_acquire_recursive>
 8006b2a:	bf00      	nop
 8006b2c:	20000313 	.word	0x20000313

08006b30 <__sinit_lock_release>:
 8006b30:	4801      	ldr	r0, [pc, #4]	; (8006b38 <__sinit_lock_release+0x8>)
 8006b32:	f000 b8a2 	b.w	8006c7a <__retarget_lock_release_recursive>
 8006b36:	bf00      	nop
 8006b38:	20000313 	.word	0x20000313

08006b3c <__sinit>:
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	4604      	mov	r4, r0
 8006b40:	f7ff fff0 	bl	8006b24 <__sinit_lock_acquire>
 8006b44:	69a3      	ldr	r3, [r4, #24]
 8006b46:	b11b      	cbz	r3, 8006b50 <__sinit+0x14>
 8006b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b4c:	f7ff bff0 	b.w	8006b30 <__sinit_lock_release>
 8006b50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b54:	6523      	str	r3, [r4, #80]	; 0x50
 8006b56:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <__sinit+0x68>)
 8006b58:	4a13      	ldr	r2, [pc, #76]	; (8006ba8 <__sinit+0x6c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	bf04      	itt	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	61a3      	streq	r3, [r4, #24]
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 f820 	bl	8006bac <__sfp>
 8006b6c:	6060      	str	r0, [r4, #4]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 f81c 	bl	8006bac <__sfp>
 8006b74:	60a0      	str	r0, [r4, #8]
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 f818 	bl	8006bac <__sfp>
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	60e0      	str	r0, [r4, #12]
 8006b80:	2104      	movs	r1, #4
 8006b82:	6860      	ldr	r0, [r4, #4]
 8006b84:	f7ff ff82 	bl	8006a8c <std>
 8006b88:	68a0      	ldr	r0, [r4, #8]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	2109      	movs	r1, #9
 8006b8e:	f7ff ff7d 	bl	8006a8c <std>
 8006b92:	68e0      	ldr	r0, [r4, #12]
 8006b94:	2202      	movs	r2, #2
 8006b96:	2112      	movs	r1, #18
 8006b98:	f7ff ff78 	bl	8006a8c <std>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	61a3      	str	r3, [r4, #24]
 8006ba0:	e7d2      	b.n	8006b48 <__sinit+0xc>
 8006ba2:	bf00      	nop
 8006ba4:	08006fdc 	.word	0x08006fdc
 8006ba8:	08006ad5 	.word	0x08006ad5

08006bac <__sfp>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	4607      	mov	r7, r0
 8006bb0:	f7ff ffac 	bl	8006b0c <__sfp_lock_acquire>
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <__sfp+0x84>)
 8006bb6:	681e      	ldr	r6, [r3, #0]
 8006bb8:	69b3      	ldr	r3, [r6, #24]
 8006bba:	b913      	cbnz	r3, 8006bc2 <__sfp+0x16>
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f7ff ffbd 	bl	8006b3c <__sinit>
 8006bc2:	3648      	adds	r6, #72	; 0x48
 8006bc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	d503      	bpl.n	8006bd4 <__sfp+0x28>
 8006bcc:	6833      	ldr	r3, [r6, #0]
 8006bce:	b30b      	cbz	r3, 8006c14 <__sfp+0x68>
 8006bd0:	6836      	ldr	r6, [r6, #0]
 8006bd2:	e7f7      	b.n	8006bc4 <__sfp+0x18>
 8006bd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bd8:	b9d5      	cbnz	r5, 8006c10 <__sfp+0x64>
 8006bda:	4b16      	ldr	r3, [pc, #88]	; (8006c34 <__sfp+0x88>)
 8006bdc:	60e3      	str	r3, [r4, #12]
 8006bde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006be2:	6665      	str	r5, [r4, #100]	; 0x64
 8006be4:	f000 f847 	bl	8006c76 <__retarget_lock_init_recursive>
 8006be8:	f7ff ff96 	bl	8006b18 <__sfp_lock_release>
 8006bec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bf4:	6025      	str	r5, [r4, #0]
 8006bf6:	61a5      	str	r5, [r4, #24]
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c00:	f7fd fafc 	bl	80041fc <memset>
 8006c04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c10:	3468      	adds	r4, #104	; 0x68
 8006c12:	e7d9      	b.n	8006bc8 <__sfp+0x1c>
 8006c14:	2104      	movs	r1, #4
 8006c16:	4638      	mov	r0, r7
 8006c18:	f7ff ff62 	bl	8006ae0 <__sfmoreglue>
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	6030      	str	r0, [r6, #0]
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d1d5      	bne.n	8006bd0 <__sfp+0x24>
 8006c24:	f7ff ff78 	bl	8006b18 <__sfp_lock_release>
 8006c28:	230c      	movs	r3, #12
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	e7ee      	b.n	8006c0c <__sfp+0x60>
 8006c2e:	bf00      	nop
 8006c30:	08006fdc 	.word	0x08006fdc
 8006c34:	ffff0001 	.word	0xffff0001

08006c38 <_fwalk_reent>:
 8006c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	4688      	mov	r8, r1
 8006c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c44:	2700      	movs	r7, #0
 8006c46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c4a:	f1b9 0901 	subs.w	r9, r9, #1
 8006c4e:	d505      	bpl.n	8006c5c <_fwalk_reent+0x24>
 8006c50:	6824      	ldr	r4, [r4, #0]
 8006c52:	2c00      	cmp	r4, #0
 8006c54:	d1f7      	bne.n	8006c46 <_fwalk_reent+0xe>
 8006c56:	4638      	mov	r0, r7
 8006c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5c:	89ab      	ldrh	r3, [r5, #12]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d907      	bls.n	8006c72 <_fwalk_reent+0x3a>
 8006c62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c66:	3301      	adds	r3, #1
 8006c68:	d003      	beq.n	8006c72 <_fwalk_reent+0x3a>
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	47c0      	blx	r8
 8006c70:	4307      	orrs	r7, r0
 8006c72:	3568      	adds	r5, #104	; 0x68
 8006c74:	e7e9      	b.n	8006c4a <_fwalk_reent+0x12>

08006c76 <__retarget_lock_init_recursive>:
 8006c76:	4770      	bx	lr

08006c78 <__retarget_lock_acquire_recursive>:
 8006c78:	4770      	bx	lr

08006c7a <__retarget_lock_release_recursive>:
 8006c7a:	4770      	bx	lr

08006c7c <__swhatbuf_r>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	460e      	mov	r6, r1
 8006c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c84:	2900      	cmp	r1, #0
 8006c86:	b096      	sub	sp, #88	; 0x58
 8006c88:	4614      	mov	r4, r2
 8006c8a:	461d      	mov	r5, r3
 8006c8c:	da07      	bge.n	8006c9e <__swhatbuf_r+0x22>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	89b3      	ldrh	r3, [r6, #12]
 8006c94:	061a      	lsls	r2, r3, #24
 8006c96:	d410      	bmi.n	8006cba <__swhatbuf_r+0x3e>
 8006c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c9c:	e00e      	b.n	8006cbc <__swhatbuf_r+0x40>
 8006c9e:	466a      	mov	r2, sp
 8006ca0:	f000 f902 	bl	8006ea8 <_fstat_r>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	dbf2      	blt.n	8006c8e <__swhatbuf_r+0x12>
 8006ca8:	9a01      	ldr	r2, [sp, #4]
 8006caa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cb2:	425a      	negs	r2, r3
 8006cb4:	415a      	adcs	r2, r3
 8006cb6:	602a      	str	r2, [r5, #0]
 8006cb8:	e7ee      	b.n	8006c98 <__swhatbuf_r+0x1c>
 8006cba:	2340      	movs	r3, #64	; 0x40
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	b016      	add	sp, #88	; 0x58
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}

08006cc4 <__smakebuf_r>:
 8006cc4:	898b      	ldrh	r3, [r1, #12]
 8006cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cc8:	079d      	lsls	r5, r3, #30
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460c      	mov	r4, r1
 8006cce:	d507      	bpl.n	8006ce0 <__smakebuf_r+0x1c>
 8006cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	6123      	str	r3, [r4, #16]
 8006cd8:	2301      	movs	r3, #1
 8006cda:	6163      	str	r3, [r4, #20]
 8006cdc:	b002      	add	sp, #8
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	ab01      	add	r3, sp, #4
 8006ce2:	466a      	mov	r2, sp
 8006ce4:	f7ff ffca 	bl	8006c7c <__swhatbuf_r>
 8006ce8:	9900      	ldr	r1, [sp, #0]
 8006cea:	4605      	mov	r5, r0
 8006cec:	4630      	mov	r0, r6
 8006cee:	f7ff f987 	bl	8006000 <_malloc_r>
 8006cf2:	b948      	cbnz	r0, 8006d08 <__smakebuf_r+0x44>
 8006cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cf8:	059a      	lsls	r2, r3, #22
 8006cfa:	d4ef      	bmi.n	8006cdc <__smakebuf_r+0x18>
 8006cfc:	f023 0303 	bic.w	r3, r3, #3
 8006d00:	f043 0302 	orr.w	r3, r3, #2
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	e7e3      	b.n	8006cd0 <__smakebuf_r+0xc>
 8006d08:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <__smakebuf_r+0x7c>)
 8006d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	6020      	str	r0, [r4, #0]
 8006d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	9b00      	ldr	r3, [sp, #0]
 8006d18:	6163      	str	r3, [r4, #20]
 8006d1a:	9b01      	ldr	r3, [sp, #4]
 8006d1c:	6120      	str	r0, [r4, #16]
 8006d1e:	b15b      	cbz	r3, 8006d38 <__smakebuf_r+0x74>
 8006d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d24:	4630      	mov	r0, r6
 8006d26:	f000 f8d1 	bl	8006ecc <_isatty_r>
 8006d2a:	b128      	cbz	r0, 8006d38 <__smakebuf_r+0x74>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	89a0      	ldrh	r0, [r4, #12]
 8006d3a:	4305      	orrs	r5, r0
 8006d3c:	81a5      	strh	r5, [r4, #12]
 8006d3e:	e7cd      	b.n	8006cdc <__smakebuf_r+0x18>
 8006d40:	08006ad5 	.word	0x08006ad5

08006d44 <_malloc_usable_size_r>:
 8006d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d48:	1f18      	subs	r0, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfbc      	itt	lt
 8006d4e:	580b      	ldrlt	r3, [r1, r0]
 8006d50:	18c0      	addlt	r0, r0, r3
 8006d52:	4770      	bx	lr

08006d54 <_raise_r>:
 8006d54:	291f      	cmp	r1, #31
 8006d56:	b538      	push	{r3, r4, r5, lr}
 8006d58:	4604      	mov	r4, r0
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	d904      	bls.n	8006d68 <_raise_r+0x14>
 8006d5e:	2316      	movs	r3, #22
 8006d60:	6003      	str	r3, [r0, #0]
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d6a:	b112      	cbz	r2, 8006d72 <_raise_r+0x1e>
 8006d6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d70:	b94b      	cbnz	r3, 8006d86 <_raise_r+0x32>
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f830 	bl	8006dd8 <_getpid_r>
 8006d78:	462a      	mov	r2, r5
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d82:	f000 b817 	b.w	8006db4 <_kill_r>
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d00a      	beq.n	8006da0 <_raise_r+0x4c>
 8006d8a:	1c59      	adds	r1, r3, #1
 8006d8c:	d103      	bne.n	8006d96 <_raise_r+0x42>
 8006d8e:	2316      	movs	r3, #22
 8006d90:	6003      	str	r3, [r0, #0]
 8006d92:	2001      	movs	r0, #1
 8006d94:	e7e7      	b.n	8006d66 <_raise_r+0x12>
 8006d96:	2400      	movs	r4, #0
 8006d98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	4798      	blx	r3
 8006da0:	2000      	movs	r0, #0
 8006da2:	e7e0      	b.n	8006d66 <_raise_r+0x12>

08006da4 <raise>:
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <raise+0xc>)
 8006da6:	4601      	mov	r1, r0
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	f7ff bfd3 	b.w	8006d54 <_raise_r>
 8006dae:	bf00      	nop
 8006db0:	2000000c 	.word	0x2000000c

08006db4 <_kill_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d07      	ldr	r5, [pc, #28]	; (8006dd4 <_kill_r+0x20>)
 8006db8:	2300      	movs	r3, #0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4608      	mov	r0, r1
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	602b      	str	r3, [r5, #0]
 8006dc2:	f7fa fdeb 	bl	800199c <_kill>
 8006dc6:	1c43      	adds	r3, r0, #1
 8006dc8:	d102      	bne.n	8006dd0 <_kill_r+0x1c>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	b103      	cbz	r3, 8006dd0 <_kill_r+0x1c>
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	bd38      	pop	{r3, r4, r5, pc}
 8006dd2:	bf00      	nop
 8006dd4:	2000030c 	.word	0x2000030c

08006dd8 <_getpid_r>:
 8006dd8:	f7fa bdd8 	b.w	800198c <_getpid>

08006ddc <__sread>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	460c      	mov	r4, r1
 8006de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de4:	f000 f894 	bl	8006f10 <_read_r>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	bfab      	itete	ge
 8006dec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dee:	89a3      	ldrhlt	r3, [r4, #12]
 8006df0:	181b      	addge	r3, r3, r0
 8006df2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006df6:	bfac      	ite	ge
 8006df8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dfa:	81a3      	strhlt	r3, [r4, #12]
 8006dfc:	bd10      	pop	{r4, pc}

08006dfe <__swrite>:
 8006dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	461f      	mov	r7, r3
 8006e04:	898b      	ldrh	r3, [r1, #12]
 8006e06:	05db      	lsls	r3, r3, #23
 8006e08:	4605      	mov	r5, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	d505      	bpl.n	8006e1c <__swrite+0x1e>
 8006e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e14:	2302      	movs	r3, #2
 8006e16:	2200      	movs	r2, #0
 8006e18:	f000 f868 	bl	8006eec <_lseek_r>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e26:	81a3      	strh	r3, [r4, #12]
 8006e28:	4632      	mov	r2, r6
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e32:	f000 b817 	b.w	8006e64 <_write_r>

08006e36 <__sseek>:
 8006e36:	b510      	push	{r4, lr}
 8006e38:	460c      	mov	r4, r1
 8006e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3e:	f000 f855 	bl	8006eec <_lseek_r>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	bf15      	itete	ne
 8006e48:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e52:	81a3      	strheq	r3, [r4, #12]
 8006e54:	bf18      	it	ne
 8006e56:	81a3      	strhne	r3, [r4, #12]
 8006e58:	bd10      	pop	{r4, pc}

08006e5a <__sclose>:
 8006e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e5e:	f000 b813 	b.w	8006e88 <_close_r>
	...

08006e64 <_write_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4d07      	ldr	r5, [pc, #28]	; (8006e84 <_write_r+0x20>)
 8006e68:	4604      	mov	r4, r0
 8006e6a:	4608      	mov	r0, r1
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	2200      	movs	r2, #0
 8006e70:	602a      	str	r2, [r5, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f7fa fdc9 	bl	8001a0a <_write>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_write_r+0x1e>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_write_r+0x1e>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	2000030c 	.word	0x2000030c

08006e88 <_close_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d06      	ldr	r5, [pc, #24]	; (8006ea4 <_close_r+0x1c>)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	f7fa fdd5 	bl	8001a42 <_close>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_close_r+0x1a>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_close_r+0x1a>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	2000030c 	.word	0x2000030c

08006ea8 <_fstat_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d07      	ldr	r5, [pc, #28]	; (8006ec8 <_fstat_r+0x20>)
 8006eac:	2300      	movs	r3, #0
 8006eae:	4604      	mov	r4, r0
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	602b      	str	r3, [r5, #0]
 8006eb6:	f7fa fdd0 	bl	8001a5a <_fstat>
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	d102      	bne.n	8006ec4 <_fstat_r+0x1c>
 8006ebe:	682b      	ldr	r3, [r5, #0]
 8006ec0:	b103      	cbz	r3, 8006ec4 <_fstat_r+0x1c>
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	bd38      	pop	{r3, r4, r5, pc}
 8006ec6:	bf00      	nop
 8006ec8:	2000030c 	.word	0x2000030c

08006ecc <_isatty_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d06      	ldr	r5, [pc, #24]	; (8006ee8 <_isatty_r+0x1c>)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	602b      	str	r3, [r5, #0]
 8006ed8:	f7fa fdcf 	bl	8001a7a <_isatty>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_isatty_r+0x1a>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_isatty_r+0x1a>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	2000030c 	.word	0x2000030c

08006eec <_lseek_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d07      	ldr	r5, [pc, #28]	; (8006f0c <_lseek_r+0x20>)
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	4608      	mov	r0, r1
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	602a      	str	r2, [r5, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f7fa fdc8 	bl	8001a90 <_lseek>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_lseek_r+0x1e>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_lseek_r+0x1e>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	2000030c 	.word	0x2000030c

08006f10 <_read_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d07      	ldr	r5, [pc, #28]	; (8006f30 <_read_r+0x20>)
 8006f14:	4604      	mov	r4, r0
 8006f16:	4608      	mov	r0, r1
 8006f18:	4611      	mov	r1, r2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	602a      	str	r2, [r5, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f7fa fd56 	bl	80019d0 <_read>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d102      	bne.n	8006f2e <_read_r+0x1e>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <_read_r+0x1e>
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	2000030c 	.word	0x2000030c

08006f34 <_init>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	bf00      	nop
 8006f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	469e      	mov	lr, r3
 8006f3e:	4770      	bx	lr

08006f40 <_fini>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr
