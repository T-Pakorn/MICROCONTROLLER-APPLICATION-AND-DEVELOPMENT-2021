
Lab6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007148  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007350  08007350  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007358  08007358  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007358  08007358  00017358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800735c  0800735c  0001735c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000634  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006a4  200006a4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd01  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003558  00000000  00000000  0003dda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  00041300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001788  00000000  00000000  00042bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026288  00000000  00000000  00044340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf73  00000000  00000000  0006a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e61a4  00000000  00000000  0008753b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016d6df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f04  00000000  00000000  0016d734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080072e0 	.word	0x080072e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080072e0 	.word	0x080072e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f001 f982 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f822 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 fb0a 	bl	8000bac <MX_GPIO_Init>
  MX_CRC_Init();
 8000598:	f000 f88a 	bl	80006b0 <MX_CRC_Init>
  MX_DMA2D_Init();
 800059c:	f000 f89c 	bl	80006d8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005a0:	f000 fab4 	bl	8000b0c <MX_FMC_Init>
  MX_I2C3_Init();
 80005a4:	f000 f8ca 	bl	800073c <MX_I2C3_Init>
  MX_LTDC_Init();
 80005a8:	f000 f908 	bl	80007bc <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ac:	f000 f986 	bl	80008bc <MX_SPI5_Init>
  MX_TIM1_Init();
 80005b0:	f000 f9ba 	bl	8000928 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 fa54 	bl	8000a60 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80005b8:	f000 fa06 	bl	80009c8 <MX_TIM2_Init>
  MX_USB_OTG_HS_HCD_Init();
 80005bc:	f000 fa7a 	bl	8000ab4 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <main+0x48>)
 80005c2:	f004 fe29 	bl	8005218 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <main+0x4c>)
 80005c8:	f004 fe26 	bl	8005218 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x44>
 80005ce:	bf00      	nop
 80005d0:	20000540 	.word	0x20000540
 80005d4:	200005cc 	.word	0x200005cc

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 fa44 	bl	8006a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a28      	ldr	r2, [pc, #160]	; (80006a8 <SystemClock_Config+0xd0>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xd4>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000650:	2378      	movs	r3, #120	; 0x78
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000658:	2305      	movs	r3, #5
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fe69 	bl	8004338 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 fbc0 	bl	8000df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2103      	movs	r1, #3
 800068e:	4618      	mov	r0, r3
 8000690:	f004 f8ca 	bl	8004828 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069a:	f000 fba9 	bl	8000df0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_CRC_Init+0x20>)
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <MX_CRC_Init+0x24>)
 80006b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_CRC_Init+0x20>)
 80006bc:	f001 fa32 	bl	8001b24 <HAL_CRC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006c6:	f000 fb93 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000148 	.word	0x20000148
 80006d4:	40023000 	.word	0x40023000

080006d8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <MX_DMA2D_Init+0x60>)
 80006e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_DMA2D_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_DMA2D_Init+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <MX_DMA2D_Init+0x5c>)
 800070e:	f001 fa25 	bl	8001b5c <HAL_DMA2D_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000718:	f000 fb6a 	bl	8000df0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800071c:	2101      	movs	r1, #1
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_DMA2D_Init+0x5c>)
 8000720:	f001 fb76 	bl	8001e10 <HAL_DMA2D_ConfigLayer>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800072a:	f000 fb61 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000058c 	.word	0x2000058c
 8000738:	4002b000 	.word	0x4002b000

0800073c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_I2C3_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <MX_I2C3_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_I2C3_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_I2C3_Init+0x74>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_I2C3_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_I2C3_Init+0x74>)
 800077a:	f003 f8b5 	bl	80038e8 <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 fb34 	bl	8000df0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4809      	ldr	r0, [pc, #36]	; (80007b0 <MX_I2C3_Init+0x74>)
 800078c:	f003 f9f0 	bl	8003b70 <HAL_I2CEx_ConfigAnalogFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000796:	f000 fb2b 	bl	8000df0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800079a:	2100      	movs	r1, #0
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_I2C3_Init+0x74>)
 800079e:	f003 fa23 	bl	8003be8 <HAL_I2CEx_ConfigDigitalFilter>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007a8:	f000 fb22 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000009c 	.word	0x2000009c
 80007b4:	40005c00 	.word	0x40005c00
 80007b8:	000186a0 	.word	0x000186a0

080007bc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2234      	movs	r2, #52	; 0x34
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f006 f953 	bl	8006a74 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007ce:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007d0:	4a39      	ldr	r2, [pc, #228]	; (80008b8 <MX_LTDC_Init+0xfc>)
 80007d2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007d4:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007da:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007e6:	4b33      	ldr	r3, [pc, #204]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007ec:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007ee:	2209      	movs	r2, #9
 80007f0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007f2:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007f8:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007fa:	221d      	movs	r2, #29
 80007fc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000800:	2203      	movs	r2, #3
 8000802:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000806:	f240 120d 	movw	r2, #269	; 0x10d
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800080e:	f240 1243 	movw	r2, #323	; 0x143
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000816:	f240 1217 	movw	r2, #279	; 0x117
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800081e:	f240 1247 	movw	r2, #327	; 0x147
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800083c:	481d      	ldr	r0, [pc, #116]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800083e:	f003 fa13 	bl	8003c68 <HAL_LTDC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 fad2 	bl	8000df0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000850:	23f0      	movs	r3, #240	; 0xf0
 8000852:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000858:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800085c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800085e:	2302      	movs	r3, #2
 8000860:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000862:	23ff      	movs	r3, #255	; 0xff
 8000864:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800086a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800086e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000870:	2307      	movs	r3, #7
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000874:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800087a:	23f0      	movs	r3, #240	; 0xf0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800087e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800089e:	f003 fb75 	bl	8003f8c <HAL_LTDC_ConfigLayer>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008a8:	f000 faa2 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3738      	adds	r7, #56	; 0x38
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000150 	.word	0x20000150
 80008b8:	40016800 	.word	0x40016800

080008bc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_SPI5_Init+0x64>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_SPI5_Init+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_SPI5_Init+0x64>)
 80008c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008cc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_SPI5_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_SPI5_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_SPI5_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_SPI5_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_SPI5_Init+0x64>)
 80008e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ec:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_SPI5_Init+0x64>)
 80008f0:	2218      	movs	r2, #24
 80008f2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_SPI5_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_SPI5_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_SPI5_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_SPI5_Init+0x64>)
 8000908:	220a      	movs	r2, #10
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_SPI5_Init+0x64>)
 800090e:	f004 fbab 	bl	8005068 <HAL_SPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 fa6a 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000f0 	.word	0x200000f0
 8000924:	40015000 	.word	0x40015000

08000928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000946:	4a1f      	ldr	r2, [pc, #124]	; (80009c4 <MX_TIM1_Init+0x9c>)
 8000948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_TIM1_Init+0x98>)
 800094c:	2277      	movs	r2, #119	; 0x77
 800094e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_TIM1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000972:	f004 fc02 	bl	800517a <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 fa38 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_TIM1_Init+0x98>)
 800098e:	f004 fdbb 	bl	8005508 <HAL_TIM_ConfigClockSource>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000998:	f000 fa2a 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_TIM1_Init+0x98>)
 80009aa:	f004 ffd7 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009b4:	f000 fa1c 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000540 	.word	0x20000540
 80009c4:	40010000 	.word	0x40010000

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009ee:	223b      	movs	r2, #59	; 0x3b
 80009f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009fa:	f240 128f 	movw	r2, #399	; 0x18f
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a0e:	f004 fbb4 	bl	800517a <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a18:	f000 f9ea 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a2a:	f004 fd6d 	bl	8005508 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 f9dc 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a46:	f004 ff89 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f9ce 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200005cc 	.word	0x200005cc

08000a60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_USART1_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a98:	f004 fff0 	bl	8005a7c <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aa2:	f000 f9a5 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001f8 	.word	0x200001f8
 8000ab0:	40011000 	.word	0x40011000

08000ab4 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ac0:	220c      	movs	r2, #12
 8000ac2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000af0:	f001 fbe5 	bl	80022be <HAL_HCD_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000afa:	f000 f979 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000023c 	.word	0x2000023c
 8000b08:	40040000 	.word	0x40040000

08000b0c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b26:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <MX_FMC_Init+0x9c>)
 8000b28:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b3e:	2210      	movs	r2, #16
 8000b40:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b44:	2240      	movs	r2, #64	; 0x40
 8000b46:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b4a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b4e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b70:	2307      	movs	r3, #7
 8000b72:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_FMC_Init+0x98>)
 8000b8e:	f004 fa37 	bl	8005000 <HAL_SDRAM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b98:	f000 f92a 	bl	8000df0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000614 	.word	0x20000614
 8000ba8:	a0000140 	.word	0xa0000140

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
 8000bc6:	4b7b      	ldr	r3, [pc, #492]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a7a      	ldr	r2, [pc, #488]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b78      	ldr	r3, [pc, #480]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	4b74      	ldr	r3, [pc, #464]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a73      	ldr	r2, [pc, #460]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b71      	ldr	r3, [pc, #452]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4b6d      	ldr	r3, [pc, #436]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a6c      	ldr	r2, [pc, #432]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b66      	ldr	r3, [pc, #408]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a65      	ldr	r2, [pc, #404]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b63      	ldr	r3, [pc, #396]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b5f      	ldr	r3, [pc, #380]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a5e      	ldr	r2, [pc, #376]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b5c      	ldr	r3, [pc, #368]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a57      	ldr	r2, [pc, #348]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b55      	ldr	r3, [pc, #340]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a50      	ldr	r2, [pc, #320]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b4e      	ldr	r3, [pc, #312]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a49      	ldr	r2, [pc, #292]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <MX_GPIO_Init+0x208>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2116      	movs	r1, #22
 8000ca6:	4844      	ldr	r0, [pc, #272]	; (8000db8 <MX_GPIO_Init+0x20c>)
 8000ca8:	f001 faf0 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	4842      	ldr	r0, [pc, #264]	; (8000dbc <MX_GPIO_Init+0x210>)
 8000cb2:	f001 faeb 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cbc:	4840      	ldr	r0, [pc, #256]	; (8000dc0 <MX_GPIO_Init+0x214>)
 8000cbe:	f001 fae5 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cc8:	483e      	ldr	r0, [pc, #248]	; (8000dc4 <MX_GPIO_Init+0x218>)
 8000cca:	f001 fadf 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cce:	2316      	movs	r3, #22
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4834      	ldr	r0, [pc, #208]	; (8000db8 <MX_GPIO_Init+0x20c>)
 8000ce6:	f001 f925 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cea:	f248 0307 	movw	r3, #32775	; 0x8007
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	482e      	ldr	r0, [pc, #184]	; (8000dbc <MX_GPIO_Init+0x210>)
 8000d02:	f001 f917 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4827      	ldr	r0, [pc, #156]	; (8000dbc <MX_GPIO_Init+0x210>)
 8000d1e:	f001 f909 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d22:	2320      	movs	r3, #32
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d26:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4820      	ldr	r0, [pc, #128]	; (8000db8 <MX_GPIO_Init+0x20c>)
 8000d38:	f001 f8fc 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <MX_GPIO_Init+0x21c>)
 8000d50:	f001 f8f0 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4815      	ldr	r0, [pc, #84]	; (8000dc0 <MX_GPIO_Init+0x214>)
 8000d6a:	f001 f8e3 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <MX_GPIO_Init+0x214>)
 8000d88:	f001 f8d4 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d8c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <MX_GPIO_Init+0x218>)
 8000da6:	f001 f8c5 	bl	8001f34 <HAL_GPIO_Init>

}
 8000daa:	bf00      	nop
 8000dac:	3738      	adds	r7, #56	; 0x38
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020c00 	.word	0x40020c00
 8000dc4:	40021800 	.word	0x40021800
 8000dc8:	40020400 	.word	0x40020400

08000dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dde:	f000 fd7b 	bl	80018d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40001000 	.word	0x40001000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_CRC_MspInit+0x3c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_CRC_MspInit+0x40>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <HAL_CRC_MspInit+0x40>)
 8000e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <HAL_CRC_MspInit+0x40>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023000 	.word	0x40023000
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_DMA2D_MspInit+0x48>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d115      	bne.n	8000ece <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_DMA2D_MspInit+0x4c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_DMA2D_MspInit+0x4c>)
 8000eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_DMA2D_MspInit+0x4c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	205a      	movs	r0, #90	; 0x5a
 8000ec4:	f000 fe04 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ec8:	205a      	movs	r0, #90	; 0x5a
 8000eca:	f000 fe1d 	bl	8001b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	4002b000 	.word	0x4002b000
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <HAL_I2C_MspInit+0xc4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d14b      	bne.n	8000f9a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_I2C_MspInit+0xc8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <HAL_I2C_MspInit+0xc8>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <HAL_I2C_MspInit+0xc8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_I2C_MspInit+0xc8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <HAL_I2C_MspInit+0xc8>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_I2C_MspInit+0xc8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f40:	2312      	movs	r3, #18
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4815      	ldr	r0, [pc, #84]	; (8000fac <HAL_I2C_MspInit+0xcc>)
 8000f58:	f000 ffec 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f62:	2312      	movs	r3, #18
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <HAL_I2C_MspInit+0xd0>)
 8000f7a:	f000 ffdb 	bl	8001f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_I2C_MspInit+0xc8>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_I2C_MspInit+0xc8>)
 8000f88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_I2C_MspInit+0xc8>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40005c00 	.word	0x40005c00
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09a      	sub	sp, #104	; 0x68
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	2230      	movs	r2, #48	; 0x30
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 fd4d 	bl	8006a74 <memset>
  if(hltdc->Instance==LTDC)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a85      	ldr	r2, [pc, #532]	; (80011f4 <HAL_LTDC_MspInit+0x240>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	f040 8102 	bne.w	80011ea <HAL_LTDC_MspInit+0x236>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fea:	2332      	movs	r3, #50	; 0x32
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fe42 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001006:	f7ff fef3 	bl	8000df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
 800100e:	4b7a      	ldr	r3, [pc, #488]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a79      	ldr	r2, [pc, #484]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001014:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b77      	ldr	r3, [pc, #476]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001022:	623b      	str	r3, [r7, #32]
 8001024:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	4b73      	ldr	r3, [pc, #460]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a72      	ldr	r2, [pc, #456]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b70      	ldr	r3, [pc, #448]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	4b6c      	ldr	r3, [pc, #432]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a6b      	ldr	r2, [pc, #428]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b69      	ldr	r3, [pc, #420]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a64      	ldr	r2, [pc, #400]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a5d      	ldr	r2, [pc, #372]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 8001084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b57      	ldr	r3, [pc, #348]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a56      	ldr	r2, [pc, #344]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b54      	ldr	r3, [pc, #336]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <HAL_LTDC_MspInit+0x244>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e0:	230e      	movs	r3, #14
 80010e2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e8:	4619      	mov	r1, r3
 80010ea:	4844      	ldr	r0, [pc, #272]	; (80011fc <HAL_LTDC_MspInit+0x248>)
 80010ec:	f000 ff22 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010f0:	f641 0358 	movw	r3, #6232	; 0x1858
 80010f4:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001102:	230e      	movs	r3, #14
 8001104:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800110a:	4619      	mov	r1, r3
 800110c:	483c      	ldr	r0, [pc, #240]	; (8001200 <HAL_LTDC_MspInit+0x24c>)
 800110e:	f000 ff11 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001112:	2303      	movs	r3, #3
 8001114:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001122:	2309      	movs	r3, #9
 8001124:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800112a:	4619      	mov	r1, r3
 800112c:	4835      	ldr	r0, [pc, #212]	; (8001204 <HAL_LTDC_MspInit+0x250>)
 800112e:	f000 ff01 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001132:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001136:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001144:	230e      	movs	r3, #14
 8001146:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800114c:	4619      	mov	r1, r3
 800114e:	482d      	ldr	r0, [pc, #180]	; (8001204 <HAL_LTDC_MspInit+0x250>)
 8001150:	f000 fef0 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001154:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001158:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001166:	230e      	movs	r3, #14
 8001168:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800116e:	4619      	mov	r1, r3
 8001170:	4825      	ldr	r0, [pc, #148]	; (8001208 <HAL_LTDC_MspInit+0x254>)
 8001172:	f000 fedf 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001176:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800117a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001188:	230e      	movs	r3, #14
 800118a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001190:	4619      	mov	r1, r3
 8001192:	481e      	ldr	r0, [pc, #120]	; (800120c <HAL_LTDC_MspInit+0x258>)
 8001194:	f000 fece 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001198:	2348      	movs	r3, #72	; 0x48
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a8:	230e      	movs	r3, #14
 80011aa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b0:	4619      	mov	r1, r3
 80011b2:	4817      	ldr	r0, [pc, #92]	; (8001210 <HAL_LTDC_MspInit+0x25c>)
 80011b4:	f000 febe 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011bc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011ca:	2309      	movs	r3, #9
 80011cc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <HAL_LTDC_MspInit+0x254>)
 80011d6:	f000 fead 	bl	8001f34 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2105      	movs	r1, #5
 80011de:	2058      	movs	r0, #88	; 0x58
 80011e0:	f000 fc76 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011e4:	2058      	movs	r0, #88	; 0x58
 80011e6:	f000 fc8f 	bl	8001b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3768      	adds	r7, #104	; 0x68
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40016800 	.word	0x40016800
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40021400 	.word	0x40021400
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40021800 	.word	0x40021800
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00

08001214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_SPI_MspInit+0x84>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12c      	bne.n	8001290 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_SPI_MspInit+0x88>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_SPI_MspInit+0x88>)
 8001240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_SPI_MspInit+0x88>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_SPI_MspInit+0x88>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <HAL_SPI_MspInit+0x88>)
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_SPI_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800126e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001280:	2305      	movs	r3, #5
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_SPI_MspInit+0x8c>)
 800128c:	f000 fe52 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40015000 	.word	0x40015000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40021400 	.word	0x40021400

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <HAL_TIM_Base_MspInit+0x80>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d116      	bne.n	80012e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_TIM_Base_MspInit+0x84>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <HAL_TIM_Base_MspInit+0x84>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_TIM_Base_MspInit+0x84>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2101      	movs	r1, #1
 80012d6:	2019      	movs	r0, #25
 80012d8:	f000 fbfa 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012dc:	2019      	movs	r0, #25
 80012de:	f000 fc13 	bl	8001b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012e2:	e01a      	b.n	800131a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ec:	d115      	bne.n	800131a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_TIM_Base_MspInit+0x84>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_TIM_Base_MspInit+0x84>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_TIM_Base_MspInit+0x84>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2102      	movs	r1, #2
 800130e:	201c      	movs	r0, #28
 8001310:	f000 fbde 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001314:	201c      	movs	r0, #28
 8001316:	f000 fbf7 	bl	8001b08 <HAL_NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40010000 	.word	0x40010000
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_UART_MspInit+0x84>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12c      	bne.n	80013a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001358:	f043 0310 	orr.w	r3, r3, #16
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_UART_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001386:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001398:	2307      	movs	r3, #7
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_UART_MspInit+0x8c>)
 80013a4:	f000 fdc6 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000

080013bc <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a24      	ldr	r2, [pc, #144]	; (800146c <HAL_HCD_MspInit+0xb0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d141      	bne.n	8001462 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_HCD_MspInit+0xb4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a22      	ldr	r2, [pc, #136]	; (8001470 <HAL_HCD_MspInit+0xb4>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_HCD_MspInit+0xb4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80013fa:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800140c:	230c      	movs	r3, #12
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4817      	ldr	r0, [pc, #92]	; (8001474 <HAL_HCD_MspInit+0xb8>)
 8001418:	f000 fd8c 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <HAL_HCD_MspInit+0xb8>)
 8001432:	f000 fd7f 	bl	8001f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_HCD_MspInit+0xb4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_HCD_MspInit+0xb4>)
 8001440:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_HCD_MspInit+0xb4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	204d      	movs	r0, #77	; 0x4d
 8001458:	f000 fb3a 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800145c:	204d      	movs	r0, #77	; 0x4d
 800145e:	f000 fb53 	bl	8001b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40040000 	.word	0x40040000
 8001470:	40023800 	.word	0x40023800
 8001474:	40020400 	.word	0x40020400

08001478 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800148c:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_FMC_MspInit+0x104>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d16f      	bne.n	8001574 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_FMC_MspInit+0x104>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_FMC_MspInit+0x108>)
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a37      	ldr	r2, [pc, #220]	; (8001580 <HAL_FMC_MspInit+0x108>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6393      	str	r3, [r2, #56]	; 0x38
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_FMC_MspInit+0x108>)
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80014b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80014ba:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c8:	230c      	movs	r3, #12
 80014ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	482c      	ldr	r0, [pc, #176]	; (8001584 <HAL_FMC_MspInit+0x10c>)
 80014d2:	f000 fd2f 	bl	8001f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e6:	230c      	movs	r3, #12
 80014e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4826      	ldr	r0, [pc, #152]	; (8001588 <HAL_FMC_MspInit+0x110>)
 80014f0:	f000 fd20 	bl	8001f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80014f4:	f248 1333 	movw	r3, #33075	; 0x8133
 80014f8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	481f      	ldr	r0, [pc, #124]	; (800158c <HAL_FMC_MspInit+0x114>)
 8001510:	f000 fd10 	bl	8001f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001514:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001518:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001526:	230c      	movs	r3, #12
 8001528:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4818      	ldr	r0, [pc, #96]	; (8001590 <HAL_FMC_MspInit+0x118>)
 8001530:	f000 fd00 	bl	8001f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001534:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001538:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001546:	230c      	movs	r3, #12
 8001548:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4811      	ldr	r0, [pc, #68]	; (8001594 <HAL_FMC_MspInit+0x11c>)
 8001550:	f000 fcf0 	bl	8001f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001564:	230c      	movs	r3, #12
 8001566:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <HAL_FMC_MspInit+0x120>)
 800156e:	f000 fce1 	bl	8001f34 <HAL_GPIO_Init>
 8001572:	e000      	b.n	8001576 <HAL_FMC_MspInit+0xfe>
    return;
 8001574:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000008c 	.word	0x2000008c
 8001580:	40023800 	.word	0x40023800
 8001584:	40021400 	.word	0x40021400
 8001588:	40020800 	.word	0x40020800
 800158c:	40021800 	.word	0x40021800
 8001590:	40021000 	.word	0x40021000
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020400 	.word	0x40020400

0800159c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015a4:	f7ff ff68 	bl	8001478 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	2036      	movs	r0, #54	; 0x36
 80015c6:	f000 fa83 	bl	8001ad0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015ca:	2036      	movs	r0, #54	; 0x36
 80015cc:	f000 fa9c 	bl	8001b08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_InitTick+0xa4>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_InitTick+0xa4>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_InitTick+0xa4>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ec:	f107 0210 	add.w	r2, r7, #16
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fb12 	bl	8004c20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015fc:	f003 fae8 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8001600:	4603      	mov	r3, r0
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <HAL_InitTick+0xa8>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	3b01      	subs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_InitTick+0xac>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HAL_InitTick+0xb0>)
 8001618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_InitTick+0xac>)
 800161c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001620:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_InitTick+0xac>)
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_InitTick+0xac>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_InitTick+0xac>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_InitTick+0xac>)
 8001636:	f003 fda0 	bl	800517a <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d104      	bne.n	800164a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <HAL_InitTick+0xac>)
 8001642:	f003 fde9 	bl	8005218 <HAL_TIM_Base_Start_IT>
 8001646:	4603      	mov	r3, r0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3730      	adds	r7, #48	; 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	431bde83 	.word	0x431bde83
 800165c:	20000648 	.word	0x20000648
 8001660:	40001000 	.word	0x40001000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80016c8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016ca:	4803      	ldr	r0, [pc, #12]	; (80016d8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80016cc:	f003 fe14 	bl	80052f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000588 	.word	0x20000588
 80016d8:	20000540 	.word	0x20000540

080016dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b09b      	sub	sp, #108	; 0x6c
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	char temp[100];
	int len = sprintf(temp, "%02d:%02d\r", count/1000/60, (count/1000)%60);
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <TIM2_IRQHandler+0x68>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <TIM2_IRQHandler+0x6c>)
 80016e8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ec:	1392      	asrs	r2, r2, #14
 80016ee:	17db      	asrs	r3, r3, #31
 80016f0:	1ad4      	subs	r4, r2, r3
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <TIM2_IRQHandler+0x68>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <TIM2_IRQHandler+0x70>)
 80016f8:	fb82 1203 	smull	r1, r2, r2, r3
 80016fc:	1192      	asrs	r2, r2, #6
 80016fe:	17db      	asrs	r3, r3, #31
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <TIM2_IRQHandler+0x74>)
 8001704:	fb83 1302 	smull	r1, r3, r3, r2
 8001708:	4413      	add	r3, r2
 800170a:	1159      	asrs	r1, r3, #5
 800170c:	17d3      	asrs	r3, r2, #31
 800170e:	1ac9      	subs	r1, r1, r3
 8001710:	460b      	mov	r3, r1
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	1a5b      	subs	r3, r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	1ad1      	subs	r1, r2, r3
 800171a:	4638      	mov	r0, r7
 800171c:	460b      	mov	r3, r1
 800171e:	4622      	mov	r2, r4
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <TIM2_IRQHandler+0x78>)
 8001722:	f005 f9af 	bl	8006a84 <siprintf>
 8001726:	6678      	str	r0, [r7, #100]	; 0x64
	HAL_UART_Transmit(&huart1, (unsigned char *) temp, len, 100);
 8001728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800172a:	b29a      	uxth	r2, r3
 800172c:	4639      	mov	r1, r7
 800172e:	2364      	movs	r3, #100	; 0x64
 8001730:	4809      	ldr	r0, [pc, #36]	; (8001758 <TIM2_IRQHandler+0x7c>)
 8001732:	f004 f9f0 	bl	8005b16 <HAL_UART_Transmit>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001736:	4809      	ldr	r0, [pc, #36]	; (800175c <TIM2_IRQHandler+0x80>)
 8001738:	f003 fdde 	bl	80052f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	376c      	adds	r7, #108	; 0x6c
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	20000588 	.word	0x20000588
 8001748:	45e7b273 	.word	0x45e7b273
 800174c:	10624dd3 	.word	0x10624dd3
 8001750:	88888889 	.word	0x88888889
 8001754:	080072f8 	.word	0x080072f8
 8001758:	200001f8 	.word	0x200001f8
 800175c:	200005cc 	.word	0x200005cc

08001760 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <TIM6_DAC_IRQHandler+0x10>)
 8001766:	f003 fdc7 	bl	80052f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000648 	.word	0x20000648

08001774 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <OTG_HS_IRQHandler+0x10>)
 800177a:	f000 fe02 	bl	8002382 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000023c 	.word	0x2000023c

08001788 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <LTDC_IRQHandler+0x10>)
 800178e:	f002 fb3b 	bl	8003e08 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000150 	.word	0x20000150

0800179c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA2D_IRQHandler+0x10>)
 80017a2:	f000 fa24 	bl	8001bee <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000058c 	.word	0x2000058c

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f005 f91e 	bl	8006a20 <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20030000 	.word	0x20030000
 8001810:	00000400 	.word	0x00000400
 8001814:	20000090 	.word	0x20000090
 8001818:	200006a8 	.word	0x200006a8

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001878 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001846:	490e      	ldr	r1, [pc, #56]	; (8001880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800185c:	4c0b      	ldr	r4, [pc, #44]	; (800188c <LoopFillZerobss+0x26>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800186a:	f7ff ffd7 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f005 f8dd 	bl	8006a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7fe fe89 	bl	8000588 <main>
  bx  lr    
 8001876:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001878:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001884:	08007360 	.word	0x08007360
  ldr r2, =_sbss
 8001888:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800188c:	200006a4 	.word	0x200006a4

08001890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_Init+0x40>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_Init+0x40>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x40>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f8fc 	bl	8001aba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	200f      	movs	r0, #15
 80018c4:	f7ff fe74 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fa98 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000690 	.word	0x20000690

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000690 	.word	0x20000690

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffde 	bl	8001900 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff4c 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae2:	f7ff ff61 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001ae6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	6978      	ldr	r0, [r7, #20]
 8001aee:	f7ff ffb1 	bl	8001a54 <NVIC_EncodePriority>
 8001af2:	4602      	mov	r2, r0
 8001af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff80 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff54 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	795b      	ldrb	r3, [r3, #5]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff f980 	bl	8000e4c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e03b      	b.n	8001be6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff f984 	bl	8000e90 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bac:	f023 0107 	bic.w	r1, r3, #7
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68d1      	ldr	r1, [r2, #12]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d026      	beq.n	8001c5e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d021      	beq.n	8001c5e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c28:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2204      	movs	r2, #4
 8001c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d026      	beq.n	8001cb6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d021      	beq.n	8001cb6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c80:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2220      	movs	r2, #32
 8001c88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d026      	beq.n	8001d0e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d021      	beq.n	8001d0e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2208      	movs	r2, #8
 8001ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	f043 0204 	orr.w	r2, r3, #4
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00e      	beq.n	8001d40 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d30:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2204      	movs	r2, #4
 8001d38:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f853 	bl	8001de6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d024      	beq.n	8001d94 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01f      	beq.n	8001d94 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d62:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01f      	beq.n	8001dde <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01a      	beq.n	8001dde <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001db6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f80e 	bl	8001dfa <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_DMA2D_ConfigLayer+0x20>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e079      	b.n	8001f24 <HAL_DMA2D_ConfigLayer+0x114>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	3318      	adds	r3, #24
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001e5a:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_DMA2D_ConfigLayer+0x120>)
 8001e5c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b0a      	cmp	r3, #10
 8001e64:	d003      	beq.n	8001e6e <HAL_DMA2D_ConfigLayer+0x5e>
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b09      	cmp	r3, #9
 8001e6c:	d107      	bne.n	8001e7e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e005      	b.n	8001e8a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	061b      	lsls	r3, r3, #24
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d120      	bne.n	8001ed2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	ea02 0103 	and.w	r1, r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b0a      	cmp	r3, #10
 8001eb8:	d003      	beq.n	8001ec2 <HAL_DMA2D_ConfigLayer+0xb2>
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b09      	cmp	r3, #9
 8001ec0:	d127      	bne.n	8001f12 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
 8001ed0:	e01f      	b.n	8001f12 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	ea02 0103 	and.w	r1, r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b0a      	cmp	r3, #10
 8001efa:	d003      	beq.n	8001f04 <HAL_DMA2D_ConfigLayer+0xf4>
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b09      	cmp	r3, #9
 8001f02:	d106      	bne.n	8001f12 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f10:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	ff03000f 	.word	0xff03000f

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e177      	b.n	8002240 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f040 8166 	bne.w	800223a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d005      	beq.n	8001f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d130      	bne.n	8001fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 0201 	and.w	r2, r3, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d017      	beq.n	8002024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d123      	bne.n	8002078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	69b9      	ldr	r1, [r7, #24]
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80c0 	beq.w	800223a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b66      	ldr	r3, [pc, #408]	; (8002258 <HAL_GPIO_Init+0x324>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a65      	ldr	r2, [pc, #404]	; (8002258 <HAL_GPIO_Init+0x324>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_GPIO_Init+0x324>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d6:	4a61      	ldr	r2, [pc, #388]	; (800225c <HAL_GPIO_Init+0x328>)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a58      	ldr	r2, [pc, #352]	; (8002260 <HAL_GPIO_Init+0x32c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d037      	beq.n	8002172 <HAL_GPIO_Init+0x23e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a57      	ldr	r2, [pc, #348]	; (8002264 <HAL_GPIO_Init+0x330>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d031      	beq.n	800216e <HAL_GPIO_Init+0x23a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a56      	ldr	r2, [pc, #344]	; (8002268 <HAL_GPIO_Init+0x334>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02b      	beq.n	800216a <HAL_GPIO_Init+0x236>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a55      	ldr	r2, [pc, #340]	; (800226c <HAL_GPIO_Init+0x338>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d025      	beq.n	8002166 <HAL_GPIO_Init+0x232>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a54      	ldr	r2, [pc, #336]	; (8002270 <HAL_GPIO_Init+0x33c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01f      	beq.n	8002162 <HAL_GPIO_Init+0x22e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a53      	ldr	r2, [pc, #332]	; (8002274 <HAL_GPIO_Init+0x340>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d019      	beq.n	800215e <HAL_GPIO_Init+0x22a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_GPIO_Init+0x344>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0x226>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a51      	ldr	r2, [pc, #324]	; (800227c <HAL_GPIO_Init+0x348>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00d      	beq.n	8002156 <HAL_GPIO_Init+0x222>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a50      	ldr	r2, [pc, #320]	; (8002280 <HAL_GPIO_Init+0x34c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <HAL_GPIO_Init+0x21e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4f      	ldr	r2, [pc, #316]	; (8002284 <HAL_GPIO_Init+0x350>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_GPIO_Init+0x21a>
 800214a:	2309      	movs	r3, #9
 800214c:	e012      	b.n	8002174 <HAL_GPIO_Init+0x240>
 800214e:	230a      	movs	r3, #10
 8002150:	e010      	b.n	8002174 <HAL_GPIO_Init+0x240>
 8002152:	2308      	movs	r3, #8
 8002154:	e00e      	b.n	8002174 <HAL_GPIO_Init+0x240>
 8002156:	2307      	movs	r3, #7
 8002158:	e00c      	b.n	8002174 <HAL_GPIO_Init+0x240>
 800215a:	2306      	movs	r3, #6
 800215c:	e00a      	b.n	8002174 <HAL_GPIO_Init+0x240>
 800215e:	2305      	movs	r3, #5
 8002160:	e008      	b.n	8002174 <HAL_GPIO_Init+0x240>
 8002162:	2304      	movs	r3, #4
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x240>
 8002166:	2303      	movs	r3, #3
 8002168:	e004      	b.n	8002174 <HAL_GPIO_Init+0x240>
 800216a:	2302      	movs	r3, #2
 800216c:	e002      	b.n	8002174 <HAL_GPIO_Init+0x240>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x240>
 8002172:	2300      	movs	r3, #0
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	f002 0203 	and.w	r2, r2, #3
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	4093      	lsls	r3, r2
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002184:	4935      	ldr	r1, [pc, #212]	; (800225c <HAL_GPIO_Init+0x328>)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_GPIO_Init+0x354>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b6:	4a34      	ldr	r2, [pc, #208]	; (8002288 <HAL_GPIO_Init+0x354>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021bc:	4b32      	ldr	r3, [pc, #200]	; (8002288 <HAL_GPIO_Init+0x354>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <HAL_GPIO_Init+0x354>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <HAL_GPIO_Init+0x354>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220a:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_GPIO_Init+0x354>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_GPIO_Init+0x354>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <HAL_GPIO_Init+0x354>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3301      	adds	r3, #1
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b0f      	cmp	r3, #15
 8002244:	f67f ae84 	bls.w	8001f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40013800 	.word	0x40013800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40021400 	.word	0x40021400
 8002278:	40021800 	.word	0x40021800
 800227c:	40021c00 	.word	0x40021c00
 8002280:	40022000 	.word	0x40022000
 8002284:	40022400 	.word	0x40022400
 8002288:	40013c00 	.word	0x40013c00

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a8:	e003      	b.n	80022b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80022be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c0:	b08f      	sub	sp, #60	; 0x3c
 80022c2:	af0a      	add	r7, sp, #40	; 0x28
 80022c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e054      	b.n	800237a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff f866 	bl	80013bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2203      	movs	r2, #3
 80022f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f004 f81d 	bl	800634e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	687e      	ldr	r6, [r7, #4]
 800231c:	466d      	mov	r5, sp
 800231e:	f106 0410 	add.w	r4, r6, #16
 8002322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800232a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800232e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002332:	1d33      	adds	r3, r6, #4
 8002334:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002336:	6838      	ldr	r0, [r7, #0]
 8002338:	f003 ffa8 	bl	800628c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f004 f814 	bl	8006370 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	687e      	ldr	r6, [r7, #4]
 8002350:	466d      	mov	r5, sp
 8002352:	f106 0410 	add.w	r4, r6, #16
 8002356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800235a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800235c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800235e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002362:	e885 0003 	stmia.w	r5, {r0, r1}
 8002366:	1d33      	adds	r3, r6, #4
 8002368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f004 f93c 	bl	80065e8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002382 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f004 f8e4 	bl	8006566 <USB_GetMode>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 80f6 	bne.w	8002592 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 f8c8 	bl	8006540 <USB_ReadInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80ec 	beq.w	8002590 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 f8bf 	bl	8006540 <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023cc:	d104      	bne.n	80023d8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023d6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f004 f8af 	bl	8006540 <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ec:	d104      	bne.n	80023f8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023f6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 f89f 	bl	8006540 <USB_ReadInterrupts>
 8002402:	4603      	mov	r3, r0
 8002404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800240c:	d104      	bne.n	8002418 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002416:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f004 f88f 	bl	8006540 <USB_ReadInterrupts>
 8002422:	4603      	mov	r3, r0
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d103      	bne.n	8002434 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2202      	movs	r2, #2
 8002432:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f004 f881 	bl	8006540 <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002448:	d11c      	bne.n	8002484 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002452:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002464:	2110      	movs	r1, #16
 8002466:	6938      	ldr	r0, [r7, #16]
 8002468:	f003 ffce 	bl	8006408 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800246c:	6938      	ldr	r0, [r7, #16]
 800246e:	f003 ffef 	bl	8006450 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f969 	bl	8006750 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f89e 	bl	80025c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f004 f859 	bl	8006540 <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d102      	bne.n	80024a0 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f001 f9b1 	bl	8003802 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f004 f84b 	bl	8006540 <USB_ReadInterrupts>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d106      	bne.n	80024c2 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f86f 	bl	8002598 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2208      	movs	r2, #8
 80024c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 f83a 	bl	8006540 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d101      	bne.n	80024da <HAL_HCD_IRQHandler+0x158>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_HCD_IRQHandler+0x15a>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0210 	bic.w	r2, r2, #16
 80024ee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f001 f8b4 	bl	800365e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0210 	orr.w	r2, r2, #16
 8002504:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f004 f818 	bl	8006540 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800251a:	d13a      	bne.n	8002592 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f004 f94f 	bl	80067c4 <USB_HC_ReadInterrupt>
 8002526:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e025      	b.n	800257a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d018      	beq.n	8002574 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002558:	d106      	bne.n	8002568 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	4619      	mov	r1, r3
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f859 	bl	8002618 <HCD_HC_IN_IRQHandler>
 8002566:	e005      	b.n	8002574 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fc74 	bl	8002e5c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3301      	adds	r3, #1
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	d3d4      	bcc.n	800252e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800258c:	615a      	str	r2, [r3, #20]
 800258e:	e000      	b.n	8002592 <HAL_HCD_IRQHandler+0x210>
      return;
 8002590:	bf00      	nop
    }
  }
}
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
 8002608:	4613      	mov	r3, r2
 800260a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d119      	bne.n	800267c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	2304      	movs	r3, #4
 8002658:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	0151      	lsls	r1, r2, #5
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	440a      	add	r2, r1
 8002670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	60d3      	str	r3, [r2, #12]
 800267a:	e101      	b.n	8002880 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002692:	d12b      	bne.n	80026ec <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	461a      	mov	r2, r3
 80026a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3361      	adds	r3, #97	; 0x61
 80026b6:	2207      	movs	r2, #7
 80026b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	0151      	lsls	r1, r2, #5
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	440a      	add	r2, r1
 80026d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 f87e 	bl	80067e6 <USB_HC_Halt>
 80026ea:	e0c9      	b.n	8002880 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d109      	bne.n	8002716 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	2320      	movs	r3, #32
 8002712:	6093      	str	r3, [r2, #8]
 8002714:	e0b4      	b.n	8002880 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b08      	cmp	r3, #8
 800272a:	d133      	bne.n	8002794 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	0151      	lsls	r1, r2, #5
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	440a      	add	r2, r1
 8002742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3361      	adds	r3, #97	; 0x61
 800275a:	2205      	movs	r2, #5
 800275c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2310      	movs	r3, #16
 800276e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	461a      	mov	r2, r3
 800277e:	2308      	movs	r3, #8
 8002780:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f004 f82a 	bl	80067e6 <USB_HC_Halt>
 8002792:	e075      	b.n	8002880 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d134      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3361      	adds	r3, #97	; 0x61
 80027da:	2208      	movs	r2, #8
 80027dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	461a      	mov	r2, r3
 80027ec:	2310      	movs	r3, #16
 80027ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	461a      	mov	r2, r3
 80027fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002802:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f003 ffe9 	bl	80067e6 <USB_HC_Halt>
 8002814:	e034      	b.n	8002880 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d129      	bne.n	8002880 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	0151      	lsls	r1, r2, #5
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	440a      	add	r2, r1
 8002842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002846:	f043 0302 	orr.w	r3, r3, #2
 800284a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3361      	adds	r3, #97	; 0x61
 800285a:	2206      	movs	r2, #6
 800285c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f003 ffbc 	bl	80067e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	461a      	mov	r2, r3
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002896:	d122      	bne.n	80028de <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	0151      	lsls	r1, r2, #5
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	440a      	add	r2, r1
 80028ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b2:	f043 0302 	orr.w	r3, r3, #2
 80028b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 ff8f 	bl	80067e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	461a      	mov	r2, r3
 80028d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028da:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028dc:	e2ba      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	f040 811b 	bne.w	8002b2c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d019      	beq.n	8002932 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3348      	adds	r3, #72	; 0x48
 800290c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	0159      	lsls	r1, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	440b      	add	r3, r1
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002920:	1ad2      	subs	r2, r2, r3
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	202c      	movs	r0, #44	; 0x2c
 8002928:	fb00 f303 	mul.w	r3, r0, r3
 800292c:	440b      	add	r3, r1
 800292e:	3350      	adds	r3, #80	; 0x50
 8002930:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3361      	adds	r3, #97	; 0x61
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	335c      	adds	r3, #92	; 0x5c
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	461a      	mov	r2, r3
 8002964:	2301      	movs	r3, #1
 8002966:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	333f      	adds	r3, #63	; 0x3f
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d009      	beq.n	8002990 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	333f      	adds	r3, #63	; 0x3f
 800298a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800298c:	2b02      	cmp	r3, #2
 800298e:	d121      	bne.n	80029d4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	0151      	lsls	r1, r2, #5
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	440a      	add	r2, r1
 80029a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029aa:	f043 0302 	orr.w	r3, r3, #2
 80029ae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 ff13 	bl	80067e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	461a      	mov	r2, r3
 80029ce:	2310      	movs	r3, #16
 80029d0:	6093      	str	r3, [r2, #8]
 80029d2:	e066      	b.n	8002aa2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	333f      	adds	r3, #63	; 0x3f
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d127      	bne.n	8002a38 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	0151      	lsls	r1, r2, #5
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	440a      	add	r2, r1
 80029fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a06:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3360      	adds	r3, #96	; 0x60
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	b2d9      	uxtb	r1, r3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	202c      	movs	r0, #44	; 0x2c
 8002a24:	fb00 f303 	mul.w	r3, r0, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3360      	adds	r3, #96	; 0x60
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fde3 	bl	80025fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a36:	e034      	b.n	8002aa2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	333f      	adds	r3, #63	; 0x3f
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d12a      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3360      	adds	r3, #96	; 0x60
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3354      	adds	r3, #84	; 0x54
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f083 0301 	eor.w	r3, r3, #1
 8002a72:	b2d8      	uxtb	r0, r3
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3354      	adds	r3, #84	; 0x54
 8002a82:	4602      	mov	r2, r0
 8002a84:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	b2d9      	uxtb	r1, r3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	202c      	movs	r0, #44	; 0x2c
 8002a90:	fb00 f303 	mul.w	r3, r0, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	3360      	adds	r3, #96	; 0x60
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff fdad 	bl	80025fc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d12b      	bne.n	8002b02 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3348      	adds	r3, #72	; 0x48
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	202c      	movs	r0, #44	; 0x2c
 8002ac0:	fb00 f202 	mul.w	r2, r0, r2
 8002ac4:	440a      	add	r2, r1
 8002ac6:	3240      	adds	r2, #64	; 0x40
 8002ac8:	8812      	ldrh	r2, [r2, #0]
 8002aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 81be 	beq.w	8002e54 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3354      	adds	r3, #84	; 0x54
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f083 0301 	eor.w	r3, r3, #1
 8002aec:	b2d8      	uxtb	r0, r3
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3354      	adds	r3, #84	; 0x54
 8002afc:	4602      	mov	r2, r0
 8002afe:	701a      	strb	r2, [r3, #0]
}
 8002b00:	e1a8      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3354      	adds	r3, #84	; 0x54
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	f083 0301 	eor.w	r3, r3, #1
 8002b16:	b2d8      	uxtb	r0, r3
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3354      	adds	r3, #84	; 0x54
 8002b26:	4602      	mov	r2, r0
 8002b28:	701a      	strb	r2, [r3, #0]
}
 8002b2a:	e193      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	f040 8106 	bne.w	8002d50 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	0151      	lsls	r1, r2, #5
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	440a      	add	r2, r1
 8002b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b5e:	f023 0302 	bic.w	r3, r3, #2
 8002b62:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3361      	adds	r3, #97	; 0x61
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d109      	bne.n	8002b8c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3360      	adds	r3, #96	; 0x60
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e0c9      	b.n	8002d20 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3361      	adds	r3, #97	; 0x61
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d109      	bne.n	8002bb4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3360      	adds	r3, #96	; 0x60
 8002bae:	2205      	movs	r2, #5
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e0b5      	b.n	8002d20 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3361      	adds	r3, #97	; 0x61
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b06      	cmp	r3, #6
 8002bc6:	d009      	beq.n	8002bdc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3361      	adds	r3, #97	; 0x61
 8002bd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d150      	bne.n	8002c7e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	335c      	adds	r3, #92	; 0x5c
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	202c      	movs	r0, #44	; 0x2c
 8002bf4:	fb00 f303 	mul.w	r3, r0, r3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	335c      	adds	r3, #92	; 0x5c
 8002bfc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	335c      	adds	r3, #92	; 0x5c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d912      	bls.n	8002c38 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	335c      	adds	r3, #92	; 0x5c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3360      	adds	r3, #96	; 0x60
 8002c32:	2204      	movs	r2, #4
 8002c34:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c36:	e073      	b.n	8002d20 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3360      	adds	r3, #96	; 0x60
 8002c46:	2202      	movs	r2, #2
 8002c48:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c60:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c68:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c76:	461a      	mov	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c7c:	e050      	b.n	8002d20 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3361      	adds	r3, #97	; 0x61
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d122      	bne.n	8002cd8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3360      	adds	r3, #96	; 0x60
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cc2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e023      	b.n	8002d20 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3361      	adds	r3, #97	; 0x61
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b07      	cmp	r3, #7
 8002cea:	d119      	bne.n	8002d20 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	335c      	adds	r3, #92	; 0x5c
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	202c      	movs	r0, #44	; 0x2c
 8002d04:	fb00 f303 	mul.w	r3, r0, r3
 8002d08:	440b      	add	r3, r1
 8002d0a:	335c      	adds	r3, #92	; 0x5c
 8002d0c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3360      	adds	r3, #96	; 0x60
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2302      	movs	r3, #2
 8002d30:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	b2d9      	uxtb	r1, r3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	202c      	movs	r0, #44	; 0x2c
 8002d3c:	fb00 f303 	mul.w	r3, r0, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3360      	adds	r3, #96	; 0x60
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff fc57 	bl	80025fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d4e:	e081      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d176      	bne.n	8002e54 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	333f      	adds	r3, #63	; 0x3f
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d121      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	335c      	adds	r3, #92	; 0x5c
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	0151      	lsls	r1, r2, #5
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	440a      	add	r2, r1
 8002da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fd15 	bl	80067e6 <USB_HC_Halt>
 8002dbc:	e041      	b.n	8002e42 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	333f      	adds	r3, #63	; 0x3f
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	333f      	adds	r3, #63	; 0x3f
 8002de0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d12d      	bne.n	8002e42 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	335c      	adds	r3, #92	; 0x5c
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d120      	bne.n	8002e42 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3361      	adds	r3, #97	; 0x61
 8002e0e:	2203      	movs	r2, #3
 8002e10:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	0151      	lsls	r1, r2, #5
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	440a      	add	r2, r1
 8002e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fcd2 	bl	80067e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2310      	movs	r3, #16
 8002e52:	6093      	str	r3, [r2, #8]
}
 8002e54:	bf00      	nop
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d119      	bne.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	0151      	lsls	r1, r2, #5
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	440a      	add	r2, r1
 8002eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002ebe:	e3ca      	b.n	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d13e      	bne.n	8002f54 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	333d      	adds	r3, #61	; 0x3d
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	f040 83ac 	bne.w	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	333d      	adds	r3, #61	; 0x3d
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	0151      	lsls	r1, r2, #5
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	440a      	add	r2, r1
 8002f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fc4a 	bl	80067e6 <USB_HC_Halt>
}
 8002f52:	e380      	b.n	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6a:	d122      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	0151      	lsls	r1, r2, #5
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	440a      	add	r2, r1
 8002f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fc25 	bl	80067e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fae:	6093      	str	r3, [r2, #8]
}
 8002fb0:	e351      	b.n	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d150      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	335c      	adds	r3, #92	; 0x5c
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d111      	bne.n	8003014 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	333d      	adds	r3, #61	; 0x3d
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	2340      	movs	r3, #64	; 0x40
 8003012:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	0151      	lsls	r1, r2, #5
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	440a      	add	r2, r1
 800302a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800302e:	f043 0302 	orr.w	r3, r3, #2
 8003032:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f003 fbd1 	bl	80067e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	2301      	movs	r3, #1
 8003054:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3361      	adds	r3, #97	; 0x61
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
}
 8003068:	e2f5      	b.n	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d13c      	bne.n	80030fa <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	3361      	adds	r3, #97	; 0x61
 800308e:	2204      	movs	r2, #4
 8003090:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	333d      	adds	r3, #61	; 0x3d
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	335c      	adds	r3, #92	; 0x5c
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	0151      	lsls	r1, r2, #5
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	440a      	add	r2, r1
 80030cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 fb80 	bl	80067e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	461a      	mov	r2, r3
 80030f4:	2340      	movs	r3, #64	; 0x40
 80030f6:	6093      	str	r3, [r2, #8]
}
 80030f8:	e2ad      	b.n	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d12a      	bne.n	8003166 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	2308      	movs	r3, #8
 8003120:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	0151      	lsls	r1, r2, #5
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	440a      	add	r2, r1
 8003138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f003 fb4a 	bl	80067e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3361      	adds	r3, #97	; 0x61
 8003160:	2205      	movs	r2, #5
 8003162:	701a      	strb	r2, [r3, #0]
}
 8003164:	e277      	b.n	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b10      	cmp	r3, #16
 800317a:	d150      	bne.n	800321e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	335c      	adds	r3, #92	; 0x5c
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	3361      	adds	r3, #97	; 0x61
 800319c:	2203      	movs	r2, #3
 800319e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	333d      	adds	r3, #61	; 0x3d
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d112      	bne.n	80031da <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	333c      	adds	r3, #60	; 0x3c
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d108      	bne.n	80031da <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	333d      	adds	r3, #61	; 0x3d
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	0151      	lsls	r1, r2, #5
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	440a      	add	r2, r1
 80031f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f003 faee 	bl	80067e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4413      	add	r3, r2
 8003212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003216:	461a      	mov	r2, r3
 8003218:	2310      	movs	r3, #16
 800321a:	6093      	str	r3, [r2, #8]
}
 800321c:	e21b      	b.n	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d174      	bne.n	800331e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d121      	bne.n	8003280 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	3361      	adds	r3, #97	; 0x61
 800324a:	2206      	movs	r2, #6
 800324c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	4413      	add	r3, r2
 8003256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	0151      	lsls	r1, r2, #5
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	440a      	add	r2, r1
 8003264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f003 fab4 	bl	80067e6 <USB_HC_Halt>
 800327e:	e044      	b.n	800330a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	335c      	adds	r3, #92	; 0x5c
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	202c      	movs	r0, #44	; 0x2c
 8003298:	fb00 f303 	mul.w	r3, r0, r3
 800329c:	440b      	add	r3, r1
 800329e:	335c      	adds	r3, #92	; 0x5c
 80032a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	335c      	adds	r3, #92	; 0x5c
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d920      	bls.n	80032f8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	335c      	adds	r3, #92	; 0x5c
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3360      	adds	r3, #96	; 0x60
 80032d6:	2204      	movs	r2, #4
 80032d8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	b2d9      	uxtb	r1, r3
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	202c      	movs	r0, #44	; 0x2c
 80032e4:	fb00 f303 	mul.w	r3, r0, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	3360      	adds	r3, #96	; 0x60
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff f983 	bl	80025fc <HAL_HCD_HC_NotifyURBChange_Callback>
 80032f6:	e008      	b.n	800330a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3360      	adds	r3, #96	; 0x60
 8003306:	2202      	movs	r2, #2
 8003308:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	6093      	str	r3, [r2, #8]
}
 800331c:	e19b      	b.n	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003334:	d134      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	0151      	lsls	r1, r2, #5
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	440a      	add	r2, r1
 800334c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f003 fa40 	bl	80067e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	461a      	mov	r2, r3
 8003374:	2310      	movs	r3, #16
 8003376:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003384:	461a      	mov	r2, r3
 8003386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3361      	adds	r3, #97	; 0x61
 800339a:	2208      	movs	r2, #8
 800339c:	701a      	strb	r2, [r3, #0]
}
 800339e:	e15a      	b.n	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	f040 814f 	bne.w	8003656 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	0151      	lsls	r1, r2, #5
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	440a      	add	r2, r1
 80033ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033d2:	f023 0302 	bic.w	r3, r3, #2
 80033d6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	3361      	adds	r3, #97	; 0x61
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d17d      	bne.n	80034e8 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	212c      	movs	r1, #44	; 0x2c
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	3360      	adds	r3, #96	; 0x60
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	333f      	adds	r3, #63	; 0x3f
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d00a      	beq.n	8003428 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	333f      	adds	r3, #63	; 0x3f
 8003420:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003422:	2b03      	cmp	r3, #3
 8003424:	f040 8100 	bne.w	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d113      	bne.n	8003458 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	3355      	adds	r3, #85	; 0x55
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	f083 0301 	eor.w	r3, r3, #1
 8003444:	b2d8      	uxtb	r0, r3
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	212c      	movs	r1, #44	; 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	3355      	adds	r3, #85	; 0x55
 8003454:	4602      	mov	r2, r0
 8003456:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b01      	cmp	r3, #1
 800345e:	f040 80e3 	bne.w	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	334c      	adds	r3, #76	; 0x4c
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80d8 	beq.w	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	334c      	adds	r3, #76	; 0x4c
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	202c      	movs	r0, #44	; 0x2c
 800348e:	fb00 f202 	mul.w	r2, r0, r2
 8003492:	440a      	add	r2, r1
 8003494:	3240      	adds	r2, #64	; 0x40
 8003496:	8812      	ldrh	r2, [r2, #0]
 8003498:	4413      	add	r3, r2
 800349a:	3b01      	subs	r3, #1
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	202c      	movs	r0, #44	; 0x2c
 80034a2:	fb00 f202 	mul.w	r2, r0, r2
 80034a6:	440a      	add	r2, r1
 80034a8:	3240      	adds	r2, #64	; 0x40
 80034aa:	8812      	ldrh	r2, [r2, #0]
 80034ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80b5 	beq.w	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3355      	adds	r3, #85	; 0x55
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f083 0301 	eor.w	r3, r3, #1
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3355      	adds	r3, #85	; 0x55
 80034e2:	4602      	mov	r2, r0
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e09f      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3361      	adds	r3, #97	; 0x61
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d109      	bne.n	8003510 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3360      	adds	r3, #96	; 0x60
 800350a:	2202      	movs	r2, #2
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e08b      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3361      	adds	r3, #97	; 0x61
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d109      	bne.n	8003538 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	212c      	movs	r1, #44	; 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3360      	adds	r3, #96	; 0x60
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e077      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3361      	adds	r3, #97	; 0x61
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d109      	bne.n	8003560 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3360      	adds	r3, #96	; 0x60
 800355a:	2205      	movs	r2, #5
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e063      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	212c      	movs	r1, #44	; 0x2c
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	3361      	adds	r3, #97	; 0x61
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d009      	beq.n	8003588 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3361      	adds	r3, #97	; 0x61
 8003582:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003584:	2b08      	cmp	r3, #8
 8003586:	d14f      	bne.n	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	335c      	adds	r3, #92	; 0x5c
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	202c      	movs	r0, #44	; 0x2c
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	440b      	add	r3, r1
 80035a6:	335c      	adds	r3, #92	; 0x5c
 80035a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	335c      	adds	r3, #92	; 0x5c
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d912      	bls.n	80035e4 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	212c      	movs	r1, #44	; 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	335c      	adds	r3, #92	; 0x5c
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	212c      	movs	r1, #44	; 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	3360      	adds	r3, #96	; 0x60
 80035de:	2204      	movs	r2, #4
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e021      	b.n	8003628 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3360      	adds	r3, #96	; 0x60
 80035f2:	2202      	movs	r2, #2
 80035f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800360c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003614:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	461a      	mov	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	2302      	movs	r3, #2
 8003638:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	b2d9      	uxtb	r1, r3
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	202c      	movs	r0, #44	; 0x2c
 8003644:	fb00 f303 	mul.w	r3, r0, r3
 8003648:	4413      	add	r3, r2
 800364a:	3360      	adds	r3, #96	; 0x60
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fe ffd3 	bl	80025fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003656:	bf00      	nop
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b08a      	sub	sp, #40	; 0x28
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	0c5b      	lsrs	r3, r3, #17
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003692:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d004      	beq.n	80036a4 <HCD_RXQLVL_IRQHandler+0x46>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b05      	cmp	r3, #5
 800369e:	f000 80a9 	beq.w	80037f4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036a2:	e0aa      	b.n	80037fa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HCD_RXQLVL_IRQHandler+0x19a>
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	3344      	adds	r3, #68	; 0x44
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 809b 	beq.w	80037f8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	3350      	adds	r3, #80	; 0x50
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	441a      	add	r2, r3
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	202c      	movs	r0, #44	; 0x2c
 80036dc:	fb00 f303 	mul.w	r3, r0, r3
 80036e0:	440b      	add	r3, r1
 80036e2:	334c      	adds	r3, #76	; 0x4c
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d87a      	bhi.n	80037e0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	212c      	movs	r1, #44	; 0x2c
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	3344      	adds	r3, #68	; 0x44
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	b292      	uxth	r2, r2
 8003702:	4619      	mov	r1, r3
 8003704:	f002 fec4 	bl	8006490 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3344      	adds	r3, #68	; 0x44
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	441a      	add	r2, r3
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	202c      	movs	r0, #44	; 0x2c
 8003722:	fb00 f303 	mul.w	r3, r0, r3
 8003726:	440b      	add	r3, r1
 8003728:	3344      	adds	r3, #68	; 0x44
 800372a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	3350      	adds	r3, #80	; 0x50
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	441a      	add	r2, r3
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	202c      	movs	r0, #44	; 0x2c
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	440b      	add	r3, r1
 800374c:	3350      	adds	r3, #80	; 0x50
 800374e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	0cdb      	lsrs	r3, r3, #19
 8003760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003764:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3340      	adds	r3, #64	; 0x40
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4293      	cmp	r3, r2
 800377c:	d13c      	bne.n	80037f8 <HCD_RXQLVL_IRQHandler+0x19a>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d039      	beq.n	80037f8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800379a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	212c      	movs	r1, #44	; 0x2c
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	3354      	adds	r3, #84	; 0x54
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	f083 0301 	eor.w	r3, r3, #1
 80037ca:	b2d8      	uxtb	r0, r3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3354      	adds	r3, #84	; 0x54
 80037da:	4602      	mov	r2, r0
 80037dc:	701a      	strb	r2, [r3, #0]
      break;
 80037de:	e00b      	b.n	80037f8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3360      	adds	r3, #96	; 0x60
 80037ee:	2204      	movs	r2, #4
 80037f0:	701a      	strb	r2, [r3, #0]
      break;
 80037f2:	e001      	b.n	80037f8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80037f4:	bf00      	nop
 80037f6:	e000      	b.n	80037fa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80037f8:	bf00      	nop
  }
}
 80037fa:	bf00      	nop
 80037fc:	3728      	adds	r7, #40	; 0x28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800382e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d10b      	bne.n	8003852 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d102      	bne.n	800384a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fe feb1 	bl	80025ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b08      	cmp	r3, #8
 800385a:	d132      	bne.n	80038c2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f043 0308 	orr.w	r3, r3, #8
 8003862:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b04      	cmp	r3, #4
 800386c:	d126      	bne.n	80038bc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d113      	bne.n	800389e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800387c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003880:	d106      	bne.n	8003890 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f002 ff61 	bl	8006750 <USB_InitFSLSPClkSel>
 800388e:	e011      	b.n	80038b4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f002 ff5a 	bl	8006750 <USB_InitFSLSPClkSel>
 800389c:	e00a      	b.n	80038b4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d106      	bne.n	80038b4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ac:	461a      	mov	r2, r3
 80038ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038b2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fe fe8d 	bl	80025d4 <HAL_HCD_PortEnabled_Callback>
 80038ba:	e002      	b.n	80038c2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7fe fe93 	bl	80025e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d103      	bne.n	80038d4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f043 0320 	orr.w	r3, r3, #32
 80038d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038da:	461a      	mov	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e12b      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fae6 	bl	8000ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800393a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800394a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800394c:	f001 f940 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a81      	ldr	r2, [pc, #516]	; (8003b5c <HAL_I2C_Init+0x274>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d807      	bhi.n	800396c <HAL_I2C_Init+0x84>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a80      	ldr	r2, [pc, #512]	; (8003b60 <HAL_I2C_Init+0x278>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e006      	b.n	800397a <HAL_I2C_Init+0x92>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a7d      	ldr	r2, [pc, #500]	; (8003b64 <HAL_I2C_Init+0x27c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e0e7      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a78      	ldr	r2, [pc, #480]	; (8003b68 <HAL_I2C_Init+0x280>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a6a      	ldr	r2, [pc, #424]	; (8003b5c <HAL_I2C_Init+0x274>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <HAL_I2C_Init+0xd4>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3301      	adds	r3, #1
 80039ba:	e009      	b.n	80039d0 <HAL_I2C_Init+0xe8>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_I2C_Init+0x284>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	3301      	adds	r3, #1
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	495c      	ldr	r1, [pc, #368]	; (8003b5c <HAL_I2C_Init+0x274>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d819      	bhi.n	8003a24 <HAL_I2C_Init+0x13c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e59      	subs	r1, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fe:	1c59      	adds	r1, r3, #1
 8003a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a04:	400b      	ands	r3, r1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_I2C_Init+0x138>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e59      	subs	r1, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	e051      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e04f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <HAL_I2C_Init+0x168>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e012      	b.n	8003a76 <HAL_I2C_Init+0x18e>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	0099      	lsls	r1, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Init+0x196>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_I2C_Init+0x1bc>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e58      	subs	r0, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6809      	ldr	r1, [r1, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6911      	ldr	r1, [r2, #16]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	000186a0 	.word	0x000186a0
 8003b60:	001e847f 	.word	0x001e847f
 8003b64:	003d08ff 	.word	0x003d08ff
 8003b68:	431bde83 	.word	0x431bde83
 8003b6c:	10624dd3 	.word	0x10624dd3

08003b70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d129      	bne.n	8003bda <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2224      	movs	r2, #36	; 0x24
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0210 	bic.w	r2, r2, #16
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d12a      	bne.n	8003c58 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2224      	movs	r2, #36	; 0x24
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003c22:	89fb      	ldrh	r3, [r7, #14]
 8003c24:	f023 030f 	bic.w	r3, r3, #15
 8003c28:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	89fa      	ldrh	r2, [r7, #14]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e000      	b.n	8003c5a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
  }
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0bf      	b.n	8003dfa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd f990 	bl	8000fb4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003caa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6999      	ldr	r1, [r3, #24]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cc0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b4a      	ldr	r3, [pc, #296]	; (8003e04 <HAL_LTDC_Init+0x19c>)
 8003cdc:	400b      	ands	r3, r1
 8003cde:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6899      	ldr	r1, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68d9      	ldr	r1, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <HAL_LTDC_Init+0x19c>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68d9      	ldr	r1, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1a      	ldr	r2, [r3, #32]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6919      	ldr	r1, [r3, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b33      	ldr	r3, [pc, #204]	; (8003e04 <HAL_LTDC_Init+0x19c>)
 8003d38:	400b      	ands	r3, r1
 8003d3a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6919      	ldr	r1, [r3, #16]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6959      	ldr	r1, [r3, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_LTDC_Init+0x19c>)
 8003d66:	400b      	ands	r3, r1
 8003d68:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6959      	ldr	r1, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0206 	orr.w	r2, r2, #6
 8003dd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	f000f800 	.word	0xf000f800

08003e08 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d023      	beq.n	8003e72 <HAL_LTDC_IRQHandler+0x6a>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01e      	beq.n	8003e72 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f86f 	bl	8003f50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d023      	beq.n	8003ec4 <HAL_LTDC_IRQHandler+0xbc>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01e      	beq.n	8003ec4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0202 	bic.w	r2, r2, #2
 8003e94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ea4:	f043 0202 	orr.w	r2, r3, #2
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f846 	bl	8003f50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01b      	beq.n	8003f06 <HAL_LTDC_IRQHandler+0xfe>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d016      	beq.n	8003f06 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2201      	movs	r2, #1
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f82f 	bl	8003f64 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <HAL_LTDC_IRQHandler+0x140>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0208 	bic.w	r2, r2, #8
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2208      	movs	r2, #8
 8003f30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f818 	bl	8003f78 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f8c:	b5b0      	push	{r4, r5, r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_LTDC_ConfigLayer+0x1a>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e02c      	b.n	8004000 <HAL_LTDC_ConfigLayer+0x74>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2134      	movs	r1, #52	; 0x34
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4614      	mov	r4, r2
 8003fca:	461d      	mov	r5, r3
 8003fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f811 	bl	8004008 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2201      	movs	r2, #1
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bdb0      	pop	{r4, r5, r7, pc}

08004008 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004024:	4413      	add	r3, r2
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	01db      	lsls	r3, r3, #7
 8004034:	4413      	add	r3, r2
 8004036:	3384      	adds	r3, #132	; 0x84
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	4611      	mov	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	01d2      	lsls	r2, r2, #7
 8004044:	440a      	add	r2, r1
 8004046:	3284      	adds	r2, #132	; 0x84
 8004048:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800404c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405e:	4413      	add	r3, r2
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4619      	mov	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	01db      	lsls	r3, r3, #7
 800406c:	440b      	add	r3, r1
 800406e:	3384      	adds	r3, #132	; 0x84
 8004070:	4619      	mov	r1, r3
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004086:	4413      	add	r3, r2
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	01db      	lsls	r3, r3, #7
 8004096:	4413      	add	r3, r2
 8004098:	3384      	adds	r3, #132	; 0x84
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	4611      	mov	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	01d2      	lsls	r2, r2, #7
 80040a6:	440a      	add	r2, r1
 80040a8:	3284      	adds	r2, #132	; 0x84
 80040aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80040ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040be:	4413      	add	r3, r2
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4619      	mov	r1, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	01db      	lsls	r3, r3, #7
 80040cc:	440b      	add	r3, r1
 80040ce:	3384      	adds	r3, #132	; 0x84
 80040d0:	4619      	mov	r1, r3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	01db      	lsls	r3, r3, #7
 80040e2:	4413      	add	r3, r2
 80040e4:	3384      	adds	r3, #132	; 0x84
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	4611      	mov	r1, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	01d2      	lsls	r2, r2, #7
 80040f2:	440a      	add	r2, r1
 80040f4:	3284      	adds	r2, #132	; 0x84
 80040f6:	f023 0307 	bic.w	r3, r3, #7
 80040fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	01db      	lsls	r3, r3, #7
 8004106:	4413      	add	r3, r2
 8004108:	3384      	adds	r3, #132	; 0x84
 800410a:	461a      	mov	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	01db      	lsls	r3, r3, #7
 8004138:	4413      	add	r3, r2
 800413a:	3384      	adds	r3, #132	; 0x84
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	01db      	lsls	r3, r3, #7
 8004148:	4413      	add	r3, r2
 800414a:	3384      	adds	r3, #132	; 0x84
 800414c:	461a      	mov	r2, r3
 800414e:	2300      	movs	r3, #0
 8004150:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004158:	461a      	mov	r2, r3
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	431a      	orrs	r2, r3
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	431a      	orrs	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4619      	mov	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	01db      	lsls	r3, r3, #7
 800416c:	440b      	add	r3, r1
 800416e:	3384      	adds	r3, #132	; 0x84
 8004170:	4619      	mov	r1, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	01db      	lsls	r3, r3, #7
 8004182:	4413      	add	r3, r2
 8004184:	3384      	adds	r3, #132	; 0x84
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	4611      	mov	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	01d2      	lsls	r2, r2, #7
 8004192:	440a      	add	r2, r1
 8004194:	3284      	adds	r2, #132	; 0x84
 8004196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800419a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	01db      	lsls	r3, r3, #7
 80041a6:	4413      	add	r3, r2
 80041a8:	3384      	adds	r3, #132	; 0x84
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	01db      	lsls	r3, r3, #7
 80041bc:	4413      	add	r3, r2
 80041be:	3384      	adds	r3, #132	; 0x84
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	4611      	mov	r1, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	01d2      	lsls	r2, r2, #7
 80041cc:	440a      	add	r2, r1
 80041ce:	3284      	adds	r2, #132	; 0x84
 80041d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041d4:	f023 0307 	bic.w	r3, r3, #7
 80041d8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	6809      	ldr	r1, [r1, #0]
 80041e6:	4608      	mov	r0, r1
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	01c9      	lsls	r1, r1, #7
 80041ec:	4401      	add	r1, r0
 80041ee:	3184      	adds	r1, #132	; 0x84
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4413      	add	r3, r2
 8004200:	3384      	adds	r3, #132	; 0x84
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	01db      	lsls	r3, r3, #7
 800420e:	4413      	add	r3, r2
 8004210:	3384      	adds	r3, #132	; 0x84
 8004212:	461a      	mov	r2, r3
 8004214:	2300      	movs	r3, #0
 8004216:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	01db      	lsls	r3, r3, #7
 8004222:	4413      	add	r3, r2
 8004224:	3384      	adds	r3, #132	; 0x84
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d102      	bne.n	800423c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004236:	2304      	movs	r3, #4
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	e01b      	b.n	8004274 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d102      	bne.n	800424a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004244:	2303      	movs	r3, #3
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e014      	b.n	8004274 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b04      	cmp	r3, #4
 8004250:	d00b      	beq.n	800426a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004256:	2b02      	cmp	r3, #2
 8004258:	d007      	beq.n	800426a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800425e:	2b03      	cmp	r3, #3
 8004260:	d003      	beq.n	800426a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004266:	2b07      	cmp	r3, #7
 8004268:	d102      	bne.n	8004270 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800426a:	2302      	movs	r3, #2
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e001      	b.n	8004274 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004270:	2301      	movs	r3, #1
 8004272:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	01db      	lsls	r3, r3, #7
 800427e:	4413      	add	r3, r2
 8004280:	3384      	adds	r3, #132	; 0x84
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	4611      	mov	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	01d2      	lsls	r2, r2, #7
 800428e:	440a      	add	r2, r1
 8004290:	3284      	adds	r2, #132	; 0x84
 8004292:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004296:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	fb02 f303 	mul.w	r3, r2, r3
 80042a2:	041a      	lsls	r2, r3, #16
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1acb      	subs	r3, r1, r3
 80042ae:	69f9      	ldr	r1, [r7, #28]
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	3303      	adds	r3, #3
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	6809      	ldr	r1, [r1, #0]
 80042ba:	4608      	mov	r0, r1
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	01c9      	lsls	r1, r1, #7
 80042c0:	4401      	add	r1, r0
 80042c2:	3184      	adds	r1, #132	; 0x84
 80042c4:	4313      	orrs	r3, r2
 80042c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	01db      	lsls	r3, r3, #7
 80042d2:	4413      	add	r3, r2
 80042d4:	3384      	adds	r3, #132	; 0x84
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	4611      	mov	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	01d2      	lsls	r2, r2, #7
 80042e2:	440a      	add	r2, r1
 80042e4:	3284      	adds	r2, #132	; 0x84
 80042e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042ea:	f023 0307 	bic.w	r3, r3, #7
 80042ee:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	01db      	lsls	r3, r3, #7
 80042fa:	4413      	add	r3, r2
 80042fc:	3384      	adds	r3, #132	; 0x84
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	01db      	lsls	r3, r3, #7
 8004310:	4413      	add	r3, r2
 8004312:	3384      	adds	r3, #132	; 0x84
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	4611      	mov	r1, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	01d2      	lsls	r2, r2, #7
 8004320:	440a      	add	r2, r1
 8004322:	3284      	adds	r2, #132	; 0x84
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6013      	str	r3, [r2, #0]
}
 800432a:	bf00      	nop
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e264      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d075      	beq.n	8004442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004356:	4ba3      	ldr	r3, [pc, #652]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b04      	cmp	r3, #4
 8004360:	d00c      	beq.n	800437c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004362:	4ba0      	ldr	r3, [pc, #640]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436a:	2b08      	cmp	r3, #8
 800436c:	d112      	bne.n	8004394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436e:	4b9d      	ldr	r3, [pc, #628]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437a:	d10b      	bne.n	8004394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	4b99      	ldr	r3, [pc, #612]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d05b      	beq.n	8004440 <HAL_RCC_OscConfig+0x108>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d157      	bne.n	8004440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e23f      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d106      	bne.n	80043ac <HAL_RCC_OscConfig+0x74>
 800439e:	4b91      	ldr	r3, [pc, #580]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a90      	ldr	r2, [pc, #576]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e01d      	b.n	80043e8 <HAL_RCC_OscConfig+0xb0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x98>
 80043b6:	4b8b      	ldr	r3, [pc, #556]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a8a      	ldr	r2, [pc, #552]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b88      	ldr	r3, [pc, #544]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a87      	ldr	r2, [pc, #540]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0xb0>
 80043d0:	4b84      	ldr	r3, [pc, #528]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a83      	ldr	r2, [pc, #524]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b81      	ldr	r3, [pc, #516]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a80      	ldr	r2, [pc, #512]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fd fa86 	bl	8001900 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fd fa82 	bl	8001900 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e204      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b76      	ldr	r3, [pc, #472]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0xc0>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fd fa72 	bl	8001900 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004420:	f7fd fa6e 	bl	8001900 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e1f0      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	4b6c      	ldr	r3, [pc, #432]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0xe8>
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d063      	beq.n	8004516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800444e:	4b65      	ldr	r3, [pc, #404]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445a:	4b62      	ldr	r3, [pc, #392]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004462:	2b08      	cmp	r3, #8
 8004464:	d11c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004466:	4b5f      	ldr	r3, [pc, #380]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d116      	bne.n	80044a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004472:	4b5c      	ldr	r3, [pc, #368]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_RCC_OscConfig+0x152>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d001      	beq.n	800448a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e1c4      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448a:	4b56      	ldr	r3, [pc, #344]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4952      	ldr	r1, [pc, #328]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449e:	e03a      	b.n	8004516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a8:	4b4f      	ldr	r3, [pc, #316]	; (80045e8 <HAL_RCC_OscConfig+0x2b0>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fd fa27 	bl	8001900 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b6:	f7fd fa23 	bl	8001900 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e1a5      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c8:	4b46      	ldr	r3, [pc, #280]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d4:	4b43      	ldr	r3, [pc, #268]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4940      	ldr	r1, [pc, #256]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]
 80044e8:	e015      	b.n	8004516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ea:	4b3f      	ldr	r3, [pc, #252]	; (80045e8 <HAL_RCC_OscConfig+0x2b0>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd fa06 	bl	8001900 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f8:	f7fd fa02 	bl	8001900 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e184      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d030      	beq.n	8004584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452a:	4b30      	ldr	r3, [pc, #192]	; (80045ec <HAL_RCC_OscConfig+0x2b4>)
 800452c:	2201      	movs	r2, #1
 800452e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fd f9e6 	bl	8001900 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004538:	f7fd f9e2 	bl	8001900 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e164      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454a:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x200>
 8004556:	e015      	b.n	8004584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCC_OscConfig+0x2b4>)
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455e:	f7fd f9cf 	bl	8001900 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004566:	f7fd f9cb 	bl	8001900 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e14d      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	4b1a      	ldr	r3, [pc, #104]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 800457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80a0 	beq.w	80046d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10f      	bne.n	80045c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	4a0e      	ldr	r2, [pc, #56]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b0:	6413      	str	r3, [r2, #64]	; 0x40
 80045b2:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_OscConfig+0x2b8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d121      	bne.n	8004612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ce:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <HAL_RCC_OscConfig+0x2b8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a07      	ldr	r2, [pc, #28]	; (80045f0 <HAL_RCC_OscConfig+0x2b8>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045da:	f7fd f991 	bl	8001900 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e0:	e011      	b.n	8004606 <HAL_RCC_OscConfig+0x2ce>
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
 80045e8:	42470000 	.word	0x42470000
 80045ec:	42470e80 	.word	0x42470e80
 80045f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f4:	f7fd f984 	bl	8001900 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e106      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004606:	4b85      	ldr	r3, [pc, #532]	; (800481c <HAL_RCC_OscConfig+0x4e4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d106      	bne.n	8004628 <HAL_RCC_OscConfig+0x2f0>
 800461a:	4b81      	ldr	r3, [pc, #516]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4a80      	ldr	r2, [pc, #512]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6713      	str	r3, [r2, #112]	; 0x70
 8004626:	e01c      	b.n	8004662 <HAL_RCC_OscConfig+0x32a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b05      	cmp	r3, #5
 800462e:	d10c      	bne.n	800464a <HAL_RCC_OscConfig+0x312>
 8004630:	4b7b      	ldr	r3, [pc, #492]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	4a7a      	ldr	r2, [pc, #488]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	6713      	str	r3, [r2, #112]	; 0x70
 800463c:	4b78      	ldr	r3, [pc, #480]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a77      	ldr	r2, [pc, #476]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
 8004648:	e00b      	b.n	8004662 <HAL_RCC_OscConfig+0x32a>
 800464a:	4b75      	ldr	r3, [pc, #468]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a74      	ldr	r2, [pc, #464]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	4b72      	ldr	r3, [pc, #456]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a71      	ldr	r2, [pc, #452]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 800465c:	f023 0304 	bic.w	r3, r3, #4
 8004660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d015      	beq.n	8004696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466a:	f7fd f949 	bl	8001900 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004670:	e00a      	b.n	8004688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004672:	f7fd f945 	bl	8001900 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004680:	4293      	cmp	r3, r2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e0c5      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004688:	4b65      	ldr	r3, [pc, #404]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ee      	beq.n	8004672 <HAL_RCC_OscConfig+0x33a>
 8004694:	e014      	b.n	80046c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004696:	f7fd f933 	bl	8001900 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fd f92f 	bl	8001900 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0af      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b4:	4b5a      	ldr	r3, [pc, #360]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ee      	bne.n	800469e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c6:	4b56      	ldr	r3, [pc, #344]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	4a55      	ldr	r2, [pc, #340]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 80046cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 809b 	beq.w	8004812 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046dc:	4b50      	ldr	r3, [pc, #320]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d05c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d141      	bne.n	8004774 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f0:	4b4c      	ldr	r3, [pc, #304]	; (8004824 <HAL_RCC_OscConfig+0x4ec>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f6:	f7fd f903 	bl	8001900 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fd f8ff 	bl	8001900 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e081      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004710:	4b43      	ldr	r3, [pc, #268]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	019b      	lsls	r3, r3, #6
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	3b01      	subs	r3, #1
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	061b      	lsls	r3, r3, #24
 8004740:	4937      	ldr	r1, [pc, #220]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004746:	4b37      	ldr	r3, [pc, #220]	; (8004824 <HAL_RCC_OscConfig+0x4ec>)
 8004748:	2201      	movs	r2, #1
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fd f8d8 	bl	8001900 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004754:	f7fd f8d4 	bl	8001900 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e056      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004766:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x41c>
 8004772:	e04e      	b.n	8004812 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004774:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <HAL_RCC_OscConfig+0x4ec>)
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477a:	f7fd f8c1 	bl	8001900 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004782:	f7fd f8bd 	bl	8001900 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e03f      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004794:	4b22      	ldr	r3, [pc, #136]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f0      	bne.n	8004782 <HAL_RCC_OscConfig+0x44a>
 80047a0:	e037      	b.n	8004812 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e032      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047ae:	4b1c      	ldr	r3, [pc, #112]	; (8004820 <HAL_RCC_OscConfig+0x4e8>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d028      	beq.n	800480e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d121      	bne.n	800480e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d11a      	bne.n	800480e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047de:	4013      	ands	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d111      	bne.n	800480e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	3b01      	subs	r3, #1
 80047f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d107      	bne.n	800480e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d001      	beq.n	8004812 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40007000 	.word	0x40007000
 8004820:	40023800 	.word	0x40023800
 8004824:	42470060 	.word	0x42470060

08004828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0cc      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800483c:	4b68      	ldr	r3, [pc, #416]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d90c      	bls.n	8004864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0b8      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800487c:	4b59      	ldr	r3, [pc, #356]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a58      	ldr	r2, [pc, #352]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004894:	4b53      	ldr	r3, [pc, #332]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a52      	ldr	r2, [pc, #328]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800489e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a0:	4b50      	ldr	r3, [pc, #320]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	494d      	ldr	r1, [pc, #308]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d044      	beq.n	8004948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b47      	ldr	r3, [pc, #284]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d119      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e07f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d003      	beq.n	80048e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e6:	4b3f      	ldr	r3, [pc, #252]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e06f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f6:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e067      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004906:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f023 0203 	bic.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4934      	ldr	r1, [pc, #208]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	4313      	orrs	r3, r2
 8004916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004918:	f7fc fff2 	bl	8001900 <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	e00a      	b.n	8004936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004920:	f7fc ffee 	bl	8001900 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	; 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e04f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004936:	4b2b      	ldr	r3, [pc, #172]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 020c 	and.w	r2, r3, #12
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	429a      	cmp	r2, r3
 8004946:	d1eb      	bne.n	8004920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004948:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d20c      	bcs.n	8004970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e032      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800497c:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4916      	ldr	r1, [pc, #88]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	490e      	ldr	r1, [pc, #56]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ae:	f000 f821 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 80049b2:	4602      	mov	r2, r0
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	490a      	ldr	r1, [pc, #40]	; (80049e8 <HAL_RCC_ClockConfig+0x1c0>)
 80049c0:	5ccb      	ldrb	r3, [r1, r3]
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fc fdee 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40023c00 	.word	0x40023c00
 80049e4:	40023800 	.word	0x40023800
 80049e8:	08007304 	.word	0x08007304
 80049ec:	20000000 	.word	0x20000000
 80049f0:	20000004 	.word	0x20000004

080049f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	2300      	movs	r3, #0
 8004a06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a0c:	4b67      	ldr	r3, [pc, #412]	; (8004bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d00d      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x40>
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	f200 80bd 	bhi.w	8004b98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x34>
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a26:	e0b7      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a28:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a2a:	60bb      	str	r3, [r7, #8]
       break;
 8004a2c:	e0b7      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a2e:	4b61      	ldr	r3, [pc, #388]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a30:	60bb      	str	r3, [r7, #8]
      break;
 8004a32:	e0b4      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a34:	4b5d      	ldr	r3, [pc, #372]	; (8004bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a3e:	4b5b      	ldr	r3, [pc, #364]	; (8004bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d04d      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4a:	4b58      	ldr	r3, [pc, #352]	; (8004bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	099b      	lsrs	r3, r3, #6
 8004a50:	461a      	mov	r2, r3
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	ea02 0800 	and.w	r8, r2, r0
 8004a62:	ea03 0901 	and.w	r9, r3, r1
 8004a66:	4640      	mov	r0, r8
 8004a68:	4649      	mov	r1, r9
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	014b      	lsls	r3, r1, #5
 8004a74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a78:	0142      	lsls	r2, r0, #5
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	ebb0 0008 	subs.w	r0, r0, r8
 8004a82:	eb61 0109 	sbc.w	r1, r1, r9
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	018b      	lsls	r3, r1, #6
 8004a90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a94:	0182      	lsls	r2, r0, #6
 8004a96:	1a12      	subs	r2, r2, r0
 8004a98:	eb63 0301 	sbc.w	r3, r3, r1
 8004a9c:	f04f 0000 	mov.w	r0, #0
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	00d9      	lsls	r1, r3, #3
 8004aa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aaa:	00d0      	lsls	r0, r2, #3
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	eb12 0208 	adds.w	r2, r2, r8
 8004ab4:	eb43 0309 	adc.w	r3, r3, r9
 8004ab8:	f04f 0000 	mov.w	r0, #0
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	0259      	lsls	r1, r3, #9
 8004ac2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ac6:	0250      	lsls	r0, r2, #9
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4610      	mov	r0, r2
 8004ace:	4619      	mov	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	f7fb fbda 	bl	8000290 <__aeabi_uldivmod>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e04a      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae6:	4b31      	ldr	r3, [pc, #196]	; (8004bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	099b      	lsrs	r3, r3, #6
 8004aec:	461a      	mov	r2, r3
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	ea02 0400 	and.w	r4, r2, r0
 8004afe:	ea03 0501 	and.w	r5, r3, r1
 8004b02:	4620      	mov	r0, r4
 8004b04:	4629      	mov	r1, r5
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	014b      	lsls	r3, r1, #5
 8004b10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b14:	0142      	lsls	r2, r0, #5
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	1b00      	subs	r0, r0, r4
 8004b1c:	eb61 0105 	sbc.w	r1, r1, r5
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	018b      	lsls	r3, r1, #6
 8004b2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b2e:	0182      	lsls	r2, r0, #6
 8004b30:	1a12      	subs	r2, r2, r0
 8004b32:	eb63 0301 	sbc.w	r3, r3, r1
 8004b36:	f04f 0000 	mov.w	r0, #0
 8004b3a:	f04f 0100 	mov.w	r1, #0
 8004b3e:	00d9      	lsls	r1, r3, #3
 8004b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b44:	00d0      	lsls	r0, r2, #3
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	1912      	adds	r2, r2, r4
 8004b4c:	eb45 0303 	adc.w	r3, r5, r3
 8004b50:	f04f 0000 	mov.w	r0, #0
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	0299      	lsls	r1, r3, #10
 8004b5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b5e:	0290      	lsls	r0, r2, #10
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	f7fb fb8e 	bl	8000290 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	3301      	adds	r3, #1
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	60bb      	str	r3, [r7, #8]
      break;
 8004b96:	e002      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b9a:	60bb      	str	r3, [r7, #8]
      break;
 8004b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	00f42400 	.word	0x00f42400
 8004bb4:	007a1200 	.word	0x007a1200

08004bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000000 	.word	0x20000000

08004bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bd4:	f7ff fff0 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	0a9b      	lsrs	r3, r3, #10
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	4903      	ldr	r1, [pc, #12]	; (8004bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	08007314 	.word	0x08007314

08004bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bfc:	f7ff ffdc 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	0b5b      	lsrs	r3, r3, #13
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4903      	ldr	r1, [pc, #12]	; (8004c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	08007314 	.word	0x08007314

08004c20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <HAL_RCC_GetClockConfig+0x5c>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0203 	and.w	r2, r3, #3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <HAL_RCC_GetClockConfig+0x5c>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <HAL_RCC_GetClockConfig+0x5c>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_GetClockConfig+0x5c>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c62:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <HAL_RCC_GetClockConfig+0x60>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 020f 	and.w	r2, r3, #15
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	601a      	str	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40023c00 	.word	0x40023c00

08004c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d075      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cb8:	4bad      	ldr	r3, [pc, #692]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cbe:	f7fc fe1f 	bl	8001900 <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cc6:	f7fc fe1b 	bl	8001900 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e18b      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd8:	4ba6      	ldr	r3, [pc, #664]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f0      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	019a      	lsls	r2, r3, #6
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	071b      	lsls	r3, r3, #28
 8004cfc:	499d      	ldr	r1, [pc, #628]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01f      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d10:	4b98      	ldr	r3, [pc, #608]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d16:	0f1b      	lsrs	r3, r3, #28
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	019a      	lsls	r2, r3, #6
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	061b      	lsls	r3, r3, #24
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	071b      	lsls	r3, r3, #28
 8004d30:	4990      	ldr	r1, [pc, #576]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d38:	4b8e      	ldr	r3, [pc, #568]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d3e:	f023 021f 	bic.w	r2, r3, #31
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	498a      	ldr	r1, [pc, #552]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00d      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	019a      	lsls	r2, r3, #6
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	071b      	lsls	r3, r3, #28
 8004d70:	4980      	ldr	r1, [pc, #512]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d78:	4b7d      	ldr	r3, [pc, #500]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d7e:	f7fc fdbf 	bl	8001900 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d86:	f7fc fdbb 	bl	8001900 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e12b      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d98:	4b76      	ldr	r3, [pc, #472]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d079      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004dbc:	4b6e      	ldr	r3, [pc, #440]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dc2:	f7fc fd9d 	bl	8001900 <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004dca:	f7fc fd99 	bl	8001900 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e109      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ddc:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de8:	d0ef      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d020      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004df6:	4b5f      	ldr	r3, [pc, #380]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	0f1b      	lsrs	r3, r3, #28
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	019a      	lsls	r2, r3, #6
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	431a      	orrs	r2, r3
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	071b      	lsls	r3, r3, #28
 8004e16:	4957      	ldr	r1, [pc, #348]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e1e:	4b55      	ldr	r3, [pc, #340]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	4950      	ldr	r1, [pc, #320]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01e      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e44:	4b4b      	ldr	r3, [pc, #300]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	0e1b      	lsrs	r3, r3, #24
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	019a      	lsls	r2, r3, #6
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	071b      	lsls	r3, r3, #28
 8004e64:	4943      	ldr	r1, [pc, #268]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e6c:	4b41      	ldr	r3, [pc, #260]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	493e      	ldr	r1, [pc, #248]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e82:	4b3d      	ldr	r3, [pc, #244]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e88:	f7fc fd3a 	bl	8001900 <HAL_GetTick>
 8004e8c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e90:	f7fc fd36 	bl	8001900 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e0a6      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ea2:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eae:	d1ef      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 808d 	beq.w	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	4a2b      	ldr	r2, [pc, #172]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004eda:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee6:	f7fc fd0b 	bl	8001900 <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eee:	f7fc fd07 	bl	8001900 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e077      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f00:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d039      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d032      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f34:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f40:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d11e      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fc fcd5 	bl	8001900 <HAL_GetTick>
 8004f56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f58:	e014      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f5a:	f7fc fcd1 	bl	8001900 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d90b      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e03f      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004f70:	42470068 	.word	0x42470068
 8004f74:	40023800 	.word	0x40023800
 8004f78:	42470070 	.word	0x42470070
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f84:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0e4      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9c:	d10d      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004f9e:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb2:	4911      	ldr	r1, [pc, #68]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	608b      	str	r3, [r1, #8]
 8004fb8:	e005      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004fba:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fc4:	6093      	str	r3, [r2, #8]
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd2:	4909      	ldr	r1, [pc, #36]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004fea:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	424711e0 	.word	0x424711e0

08005000 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e025      	b.n	8005060 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d106      	bne.n	800502e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fc fab7 	bl	800159c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3304      	adds	r3, #4
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f001 f831 	bl	80060a8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	461a      	mov	r2, r3
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	f001 f89c 	bl	800618e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e07b      	b.n	8005172 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d108      	bne.n	8005094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508a:	d009      	beq.n	80050a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	61da      	str	r2, [r3, #28]
 8005092:	e005      	b.n	80050a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fc f8aa 	bl	8001214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	ea42 0103 	orr.w	r1, r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	0c1b      	lsrs	r3, r3, #16
 800513e:	f003 0104 	and.w	r1, r3, #4
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	f003 0210 	and.w	r2, r3, #16
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e041      	b.n	8005210 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fc f87f 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f000 fa95 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	d001      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e04e      	b.n	80052ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a23      	ldr	r2, [pc, #140]	; (80052dc <HAL_TIM_Base_Start_IT+0xc4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d022      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525a:	d01d      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d111      	bne.n	80052bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b06      	cmp	r3, #6
 80052a8:	d010      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	e007      	b.n	80052cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40010400 	.word	0x40010400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40001800 	.word	0x40001800

080052f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d122      	bne.n	8005354 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d11b      	bne.n	8005354 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0202 	mvn.w	r2, #2
 8005324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9b5 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f9a7 	bl	8005696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f9b8 	bl	80056be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b04      	cmp	r3, #4
 8005360:	d122      	bne.n	80053a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b04      	cmp	r3, #4
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0204 	mvn.w	r2, #4
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f98b 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f97d 	bl	8005696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f98e 	bl	80056be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0208 	mvn.w	r2, #8
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2204      	movs	r2, #4
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f961 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f953 	bl	8005696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f964 	bl	80056be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b10      	cmp	r3, #16
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b10      	cmp	r3, #16
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0210 	mvn.w	r2, #16
 8005420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2208      	movs	r2, #8
 8005426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f937 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f929 	bl	8005696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f93a 	bl	80056be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10e      	bne.n	800547c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d107      	bne.n	800547c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0201 	mvn.w	r2, #1
 8005474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fb fca8 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d10e      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005494:	2b80      	cmp	r3, #128	; 0x80
 8005496:	d107      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fae0 	bl	8005a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d107      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8ff 	bl	80056d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0220 	mvn.w	r2, #32
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 faaa 	bl	8005a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIM_ConfigClockSource+0x1c>
 8005520:	2302      	movs	r3, #2
 8005522:	e0b4      	b.n	800568e <HAL_TIM_ConfigClockSource+0x186>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800554a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555c:	d03e      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0xd4>
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005562:	f200 8087 	bhi.w	8005674 <HAL_TIM_ConfigClockSource+0x16c>
 8005566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556a:	f000 8086 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x172>
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d87f      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x16c>
 8005574:	2b70      	cmp	r3, #112	; 0x70
 8005576:	d01a      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xa6>
 8005578:	2b70      	cmp	r3, #112	; 0x70
 800557a:	d87b      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x16c>
 800557c:	2b60      	cmp	r3, #96	; 0x60
 800557e:	d050      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x11a>
 8005580:	2b60      	cmp	r3, #96	; 0x60
 8005582:	d877      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x16c>
 8005584:	2b50      	cmp	r3, #80	; 0x50
 8005586:	d03c      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0xfa>
 8005588:	2b50      	cmp	r3, #80	; 0x50
 800558a:	d873      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x16c>
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d058      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x13a>
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d86f      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x16c>
 8005594:	2b30      	cmp	r3, #48	; 0x30
 8005596:	d064      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x15a>
 8005598:	2b30      	cmp	r3, #48	; 0x30
 800559a:	d86b      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x16c>
 800559c:	2b20      	cmp	r3, #32
 800559e:	d060      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x15a>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d867      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x16c>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d05c      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x15a>
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d05a      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x15a>
 80055ac:	e062      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6899      	ldr	r1, [r3, #8]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f000 f9ad 	bl	800591c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	609a      	str	r2, [r3, #8]
      break;
 80055da:	e04f      	b.n	800567c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f000 f996 	bl	800591c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055fe:	609a      	str	r2, [r3, #8]
      break;
 8005600:	e03c      	b.n	800567c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6859      	ldr	r1, [r3, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	461a      	mov	r2, r3
 8005610:	f000 f90a 	bl	8005828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2150      	movs	r1, #80	; 0x50
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f963 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005620:	e02c      	b.n	800567c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6859      	ldr	r1, [r3, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	461a      	mov	r2, r3
 8005630:	f000 f929 	bl	8005886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2160      	movs	r1, #96	; 0x60
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f953 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005640:	e01c      	b.n	800567c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	461a      	mov	r2, r3
 8005650:	f000 f8ea 	bl	8005828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2140      	movs	r1, #64	; 0x40
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f943 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005660:	e00c      	b.n	800567c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f000 f93a 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005672:	e003      	b.n	800567c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
      break;
 8005678:	e000      	b.n	800567c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800567a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a40      	ldr	r2, [pc, #256]	; (80057fc <TIM_Base_SetConfig+0x114>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005706:	d00f      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <TIM_Base_SetConfig+0x118>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00b      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3c      	ldr	r2, [pc, #240]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d007      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a3b      	ldr	r2, [pc, #236]	; (8005808 <TIM_Base_SetConfig+0x120>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a3a      	ldr	r2, [pc, #232]	; (800580c <TIM_Base_SetConfig+0x124>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d108      	bne.n	800573a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <TIM_Base_SetConfig+0x114>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d02b      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005748:	d027      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a2c      	ldr	r2, [pc, #176]	; (8005800 <TIM_Base_SetConfig+0x118>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d023      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2b      	ldr	r2, [pc, #172]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01f      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <TIM_Base_SetConfig+0x120>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01b      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a29      	ldr	r2, [pc, #164]	; (800580c <TIM_Base_SetConfig+0x124>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d017      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a28      	ldr	r2, [pc, #160]	; (8005810 <TIM_Base_SetConfig+0x128>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a27      	ldr	r2, [pc, #156]	; (8005814 <TIM_Base_SetConfig+0x12c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00f      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a26      	ldr	r2, [pc, #152]	; (8005818 <TIM_Base_SetConfig+0x130>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00b      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a25      	ldr	r2, [pc, #148]	; (800581c <TIM_Base_SetConfig+0x134>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d007      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a24      	ldr	r2, [pc, #144]	; (8005820 <TIM_Base_SetConfig+0x138>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a23      	ldr	r2, [pc, #140]	; (8005824 <TIM_Base_SetConfig+0x13c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d108      	bne.n	80057ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <TIM_Base_SetConfig+0x114>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_Base_SetConfig+0xf8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a0c      	ldr	r2, [pc, #48]	; (800580c <TIM_Base_SetConfig+0x124>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d103      	bne.n	80057e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	615a      	str	r2, [r3, #20]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40010000 	.word	0x40010000
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40010400 	.word	0x40010400
 8005810:	40014000 	.word	0x40014000
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800
 800581c:	40001800 	.word	0x40001800
 8005820:	40001c00 	.word	0x40001c00
 8005824:	40002000 	.word	0x40002000

08005828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 030a 	bic.w	r3, r3, #10
 8005864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005886:	b480      	push	{r7}
 8005888:	b087      	sub	sp, #28
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f023 0210 	bic.w	r2, r3, #16
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	031b      	lsls	r3, r3, #12
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	f043 0307 	orr.w	r3, r3, #7
 8005908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	021a      	lsls	r2, r3, #8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	431a      	orrs	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4313      	orrs	r3, r2
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005970:	2302      	movs	r3, #2
 8005972:	e05a      	b.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a21      	ldr	r2, [pc, #132]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d022      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c0:	d01d      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d018      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1b      	ldr	r2, [pc, #108]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d009      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10c      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40010400 	.word	0x40010400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40001800 	.word	0x40001800

08005a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e03f      	b.n	8005b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fb fc42 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2224      	movs	r2, #36	; 0x24
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f929 	bl	8005d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b08a      	sub	sp, #40	; 0x28
 8005b1a:	af02      	add	r7, sp, #8
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d17c      	bne.n	8005c30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_UART_Transmit+0x2c>
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e075      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_UART_Transmit+0x3e>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e06e      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2221      	movs	r2, #33	; 0x21
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b6a:	f7fb fec9 	bl	8001900 <HAL_GetTick>
 8005b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b84:	d108      	bne.n	8005b98 <HAL_UART_Transmit+0x82>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	e003      	b.n	8005ba0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ba8:	e02a      	b.n	8005c00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f840 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e036      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10b      	bne.n	8005be2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	3302      	adds	r3, #2
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e007      	b.n	8005bf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1cf      	bne.n	8005baa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2140      	movs	r1, #64	; 0x40
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f810 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e006      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b090      	sub	sp, #64	; 0x40
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4a:	e050      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d04c      	beq.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <UART_WaitOnFlagUntilTimeout+0x30>
 8005c5a:	f7fb fe51 	bl	8001900 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d241      	bcs.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	330c      	adds	r3, #12
 8005c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c8a:	637a      	str	r2, [r7, #52]	; 0x34
 8005c8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e5      	bne.n	8005c6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3314      	adds	r3, #20
 8005ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	613b      	str	r3, [r7, #16]
   return(result);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3314      	adds	r3, #20
 8005cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cbe:	623a      	str	r2, [r7, #32]
 8005cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	69f9      	ldr	r1, [r7, #28]
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e5      	bne.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e00f      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2301      	moveq	r3, #1
 8005d00:	2300      	movne	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d09f      	beq.n	8005c4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3740      	adds	r7, #64	; 0x40
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	b09f      	sub	sp, #124	; 0x7c
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	68d9      	ldr	r1, [r3, #12]
 8005d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	ea40 0301 	orr.w	r3, r0, r1
 8005d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d5c:	f021 010c 	bic.w	r1, r1, #12
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d66:	430b      	orrs	r3, r1
 8005d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	6999      	ldr	r1, [r3, #24]
 8005d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	ea40 0301 	orr.w	r3, r0, r1
 8005d80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4bc5      	ldr	r3, [pc, #788]	; (800609c <UART_SetConfig+0x384>)
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d004      	beq.n	8005d96 <UART_SetConfig+0x7e>
 8005d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4bc3      	ldr	r3, [pc, #780]	; (80060a0 <UART_SetConfig+0x388>)
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d103      	bne.n	8005d9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d96:	f7fe ff2f 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
 8005d9a:	6778      	str	r0, [r7, #116]	; 0x74
 8005d9c:	e002      	b.n	8005da4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d9e:	f7fe ff17 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8005da2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dac:	f040 80b6 	bne.w	8005f1c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005db2:	461c      	mov	r4, r3
 8005db4:	f04f 0500 	mov.w	r5, #0
 8005db8:	4622      	mov	r2, r4
 8005dba:	462b      	mov	r3, r5
 8005dbc:	1891      	adds	r1, r2, r2
 8005dbe:	6439      	str	r1, [r7, #64]	; 0x40
 8005dc0:	415b      	adcs	r3, r3
 8005dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dc8:	1912      	adds	r2, r2, r4
 8005dca:	eb45 0303 	adc.w	r3, r5, r3
 8005dce:	f04f 0000 	mov.w	r0, #0
 8005dd2:	f04f 0100 	mov.w	r1, #0
 8005dd6:	00d9      	lsls	r1, r3, #3
 8005dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ddc:	00d0      	lsls	r0, r2, #3
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	1911      	adds	r1, r2, r4
 8005de4:	6639      	str	r1, [r7, #96]	; 0x60
 8005de6:	416b      	adcs	r3, r5
 8005de8:	667b      	str	r3, [r7, #100]	; 0x64
 8005dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	1891      	adds	r1, r2, r2
 8005df6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005df8:	415b      	adcs	r3, r3
 8005dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e04:	f7fa fa44 	bl	8000290 <__aeabi_uldivmod>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4ba5      	ldr	r3, [pc, #660]	; (80060a4 <UART_SetConfig+0x38c>)
 8005e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	011e      	lsls	r6, r3, #4
 8005e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e18:	461c      	mov	r4, r3
 8005e1a:	f04f 0500 	mov.w	r5, #0
 8005e1e:	4622      	mov	r2, r4
 8005e20:	462b      	mov	r3, r5
 8005e22:	1891      	adds	r1, r2, r2
 8005e24:	6339      	str	r1, [r7, #48]	; 0x30
 8005e26:	415b      	adcs	r3, r3
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e2e:	1912      	adds	r2, r2, r4
 8005e30:	eb45 0303 	adc.w	r3, r5, r3
 8005e34:	f04f 0000 	mov.w	r0, #0
 8005e38:	f04f 0100 	mov.w	r1, #0
 8005e3c:	00d9      	lsls	r1, r3, #3
 8005e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e42:	00d0      	lsls	r0, r2, #3
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	1911      	adds	r1, r2, r4
 8005e4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e4c:	416b      	adcs	r3, r5
 8005e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	461a      	mov	r2, r3
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	1891      	adds	r1, r2, r2
 8005e5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e5e:	415b      	adcs	r3, r3
 8005e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e6a:	f7fa fa11 	bl	8000290 <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4b8c      	ldr	r3, [pc, #560]	; (80060a4 <UART_SetConfig+0x38c>)
 8005e74:	fba3 1302 	umull	r1, r3, r3, r2
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	2164      	movs	r1, #100	; 0x64
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	3332      	adds	r3, #50	; 0x32
 8005e86:	4a87      	ldr	r2, [pc, #540]	; (80060a4 <UART_SetConfig+0x38c>)
 8005e88:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e94:	441e      	add	r6, r3
 8005e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f04f 0100 	mov.w	r1, #0
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	1894      	adds	r4, r2, r2
 8005ea4:	623c      	str	r4, [r7, #32]
 8005ea6:	415b      	adcs	r3, r3
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eae:	1812      	adds	r2, r2, r0
 8005eb0:	eb41 0303 	adc.w	r3, r1, r3
 8005eb4:	f04f 0400 	mov.w	r4, #0
 8005eb8:	f04f 0500 	mov.w	r5, #0
 8005ebc:	00dd      	lsls	r5, r3, #3
 8005ebe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ec2:	00d4      	lsls	r4, r2, #3
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	462b      	mov	r3, r5
 8005ec8:	1814      	adds	r4, r2, r0
 8005eca:	653c      	str	r4, [r7, #80]	; 0x50
 8005ecc:	414b      	adcs	r3, r1
 8005ece:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	1891      	adds	r1, r2, r2
 8005edc:	61b9      	str	r1, [r7, #24]
 8005ede:	415b      	adcs	r3, r3
 8005ee0:	61fb      	str	r3, [r7, #28]
 8005ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005eea:	f7fa f9d1 	bl	8000290 <__aeabi_uldivmod>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4b6c      	ldr	r3, [pc, #432]	; (80060a4 <UART_SetConfig+0x38c>)
 8005ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	2164      	movs	r1, #100	; 0x64
 8005efc:	fb01 f303 	mul.w	r3, r1, r3
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	3332      	adds	r3, #50	; 0x32
 8005f06:	4a67      	ldr	r2, [pc, #412]	; (80060a4 <UART_SetConfig+0x38c>)
 8005f08:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	f003 0207 	and.w	r2, r3, #7
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4432      	add	r2, r6
 8005f18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f1a:	e0b9      	b.n	8006090 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f1e:	461c      	mov	r4, r3
 8005f20:	f04f 0500 	mov.w	r5, #0
 8005f24:	4622      	mov	r2, r4
 8005f26:	462b      	mov	r3, r5
 8005f28:	1891      	adds	r1, r2, r2
 8005f2a:	6139      	str	r1, [r7, #16]
 8005f2c:	415b      	adcs	r3, r3
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f34:	1912      	adds	r2, r2, r4
 8005f36:	eb45 0303 	adc.w	r3, r5, r3
 8005f3a:	f04f 0000 	mov.w	r0, #0
 8005f3e:	f04f 0100 	mov.w	r1, #0
 8005f42:	00d9      	lsls	r1, r3, #3
 8005f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f48:	00d0      	lsls	r0, r2, #3
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	eb12 0804 	adds.w	r8, r2, r4
 8005f52:	eb43 0905 	adc.w	r9, r3, r5
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f04f 0100 	mov.w	r1, #0
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	008b      	lsls	r3, r1, #2
 8005f6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f6e:	0082      	lsls	r2, r0, #2
 8005f70:	4640      	mov	r0, r8
 8005f72:	4649      	mov	r1, r9
 8005f74:	f7fa f98c 	bl	8000290 <__aeabi_uldivmod>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4b49      	ldr	r3, [pc, #292]	; (80060a4 <UART_SetConfig+0x38c>)
 8005f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	011e      	lsls	r6, r3, #4
 8005f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f04f 0100 	mov.w	r1, #0
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	1894      	adds	r4, r2, r2
 8005f94:	60bc      	str	r4, [r7, #8]
 8005f96:	415b      	adcs	r3, r3
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f9e:	1812      	adds	r2, r2, r0
 8005fa0:	eb41 0303 	adc.w	r3, r1, r3
 8005fa4:	f04f 0400 	mov.w	r4, #0
 8005fa8:	f04f 0500 	mov.w	r5, #0
 8005fac:	00dd      	lsls	r5, r3, #3
 8005fae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fb2:	00d4      	lsls	r4, r2, #3
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	462b      	mov	r3, r5
 8005fb8:	1814      	adds	r4, r2, r0
 8005fba:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fbc:	414b      	adcs	r3, r1
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f04f 0100 	mov.w	r1, #0
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	008b      	lsls	r3, r1, #2
 8005fd4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fd8:	0082      	lsls	r2, r0, #2
 8005fda:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fde:	f7fa f957 	bl	8000290 <__aeabi_uldivmod>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <UART_SetConfig+0x38c>)
 8005fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	2164      	movs	r1, #100	; 0x64
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	3332      	adds	r3, #50	; 0x32
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <UART_SetConfig+0x38c>)
 8005ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006006:	441e      	add	r6, r3
 8006008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800600a:	4618      	mov	r0, r3
 800600c:	f04f 0100 	mov.w	r1, #0
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	1894      	adds	r4, r2, r2
 8006016:	603c      	str	r4, [r7, #0]
 8006018:	415b      	adcs	r3, r3
 800601a:	607b      	str	r3, [r7, #4]
 800601c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006020:	1812      	adds	r2, r2, r0
 8006022:	eb41 0303 	adc.w	r3, r1, r3
 8006026:	f04f 0400 	mov.w	r4, #0
 800602a:	f04f 0500 	mov.w	r5, #0
 800602e:	00dd      	lsls	r5, r3, #3
 8006030:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006034:	00d4      	lsls	r4, r2, #3
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	eb12 0a00 	adds.w	sl, r2, r0
 800603e:	eb43 0b01 	adc.w	fp, r3, r1
 8006042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4618      	mov	r0, r3
 8006048:	f04f 0100 	mov.w	r1, #0
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	008b      	lsls	r3, r1, #2
 8006056:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800605a:	0082      	lsls	r2, r0, #2
 800605c:	4650      	mov	r0, sl
 800605e:	4659      	mov	r1, fp
 8006060:	f7fa f916 	bl	8000290 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <UART_SetConfig+0x38c>)
 800606a:	fba3 1302 	umull	r1, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	2164      	movs	r1, #100	; 0x64
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	3332      	adds	r3, #50	; 0x32
 800607c:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <UART_SetConfig+0x38c>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	f003 020f 	and.w	r2, r3, #15
 8006088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4432      	add	r2, r6
 800608e:	609a      	str	r2, [r3, #8]
}
 8006090:	bf00      	nop
 8006092:	377c      	adds	r7, #124	; 0x7c
 8006094:	46bd      	mov	sp, r7
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	bf00      	nop
 800609c:	40011000 	.word	0x40011000
 80060a0:	40011400 	.word	0x40011400
 80060a4:	51eb851f 	.word	0x51eb851f

080060a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d029      	beq.n	8006116 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80060ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060d2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060dc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80060e2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80060e8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80060ee:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80060f4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80060fa:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006100:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006106:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e034      	b.n	8006180 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006122:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800612c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006132:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006146:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800614a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006154:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800615a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006160:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006166:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800616c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4313      	orrs	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800618e:	b480      	push	{r7}
 8006190:	b087      	sub	sp, #28
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d02e      	beq.n	8006206 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061b4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80061c4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80061ce:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80061d8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	3b01      	subs	r3, #1
 80061e0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80061e2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80061ec:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80061f6:	4313      	orrs	r3, r2
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	e03b      	b.n	800627e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006216:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	3b01      	subs	r3, #1
 800621e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	3b01      	subs	r3, #1
 8006226:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006228:	4313      	orrs	r3, r2
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800623c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	3b01      	subs	r3, #1
 800624a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800624c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	3b01      	subs	r3, #1
 8006254:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006256:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	3b01      	subs	r3, #1
 800625e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006260:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	3b01      	subs	r3, #1
 8006268:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800626a:	4313      	orrs	r3, r2
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800628c:	b084      	sub	sp, #16
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	f107 001c 	add.w	r0, r7, #28
 800629a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d122      	bne.n	80062ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80062b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d105      	bne.n	80062de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f950 	bl	8006584 <USB_CoreReset>
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]
 80062e8:	e01a      	b.n	8006320 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f944 	bl	8006584 <USB_CoreReset>
 80062fc:	4603      	mov	r3, r0
 80062fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	639a      	str	r2, [r3, #56]	; 0x38
 8006312:	e005      	b.n	8006320 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10b      	bne.n	800633e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f043 0206 	orr.w	r2, r3, #6
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f043 0220 	orr.w	r2, r3, #32
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800634a:	b004      	add	sp, #16
 800634c:	4770      	bx	lr

0800634e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f023 0201 	bic.w	r2, r3, #1
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d115      	bne.n	80063be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800639e:	2001      	movs	r0, #1
 80063a0:	f7fb faba 	bl	8001918 <HAL_Delay>
      ms++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f8db 	bl	8006566 <USB_GetMode>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d01e      	beq.n	80063f4 <USB_SetCurrentMode+0x84>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b31      	cmp	r3, #49	; 0x31
 80063ba:	d9f0      	bls.n	800639e <USB_SetCurrentMode+0x2e>
 80063bc:	e01a      	b.n	80063f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d115      	bne.n	80063f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063d0:	2001      	movs	r0, #1
 80063d2:	f7fb faa1 	bl	8001918 <HAL_Delay>
      ms++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f8c2 	bl	8006566 <USB_GetMode>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <USB_SetCurrentMode+0x84>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b31      	cmp	r3, #49	; 0x31
 80063ec:	d9f0      	bls.n	80063d0 <USB_SetCurrentMode+0x60>
 80063ee:	e001      	b.n	80063f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e005      	b.n	8006400 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b32      	cmp	r3, #50	; 0x32
 80063f8:	d101      	bne.n	80063fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	019b      	lsls	r3, r3, #6
 800641a:	f043 0220 	orr.w	r2, r3, #32
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3301      	adds	r3, #1
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	4a08      	ldr	r2, [pc, #32]	; (800644c <USB_FlushTxFifo+0x44>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e006      	b.n	8006440 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d0f1      	beq.n	8006422 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	00030d40 	.word	0x00030d40

08006450 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2210      	movs	r2, #16
 8006460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	4a08      	ldr	r2, [pc, #32]	; (800648c <USB_FlushRxFifo+0x3c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e006      	b.n	8006480 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b10      	cmp	r3, #16
 800647c:	d0f1      	beq.n	8006462 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	00030d40 	.word	0x00030d40

08006490 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006490:	b480      	push	{r7}
 8006492:	b08b      	sub	sp, #44	; 0x2c
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	089b      	lsrs	r3, r3, #2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	623b      	str	r3, [r7, #32]
 80064ba:	e014      	b.n	80064e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	3301      	adds	r3, #1
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	3301      	adds	r3, #1
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	3301      	adds	r3, #1
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	3301      	adds	r3, #1
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	3301      	adds	r3, #1
 80064e4:	623b      	str	r3, [r7, #32]
 80064e6:	6a3a      	ldr	r2, [r7, #32]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d3e6      	bcc.n	80064bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064ee:	8bfb      	ldrh	r3, [r7, #30]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01e      	beq.n	8006532 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fe:	461a      	mov	r2, r3
 8006500:	f107 0310 	add.w	r3, r7, #16
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
 8006514:	b2da      	uxtb	r2, r3
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	701a      	strb	r2, [r3, #0]
      i++;
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	3301      	adds	r3, #1
 800651e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	3301      	adds	r3, #1
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006526:	8bfb      	ldrh	r3, [r7, #30]
 8006528:	3b01      	subs	r3, #1
 800652a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800652c:	8bfb      	ldrh	r3, [r7, #30]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1ea      	bne.n	8006508 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006534:	4618      	mov	r0, r3
 8006536:	372c      	adds	r7, #44	; 0x2c
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4013      	ands	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006558:	68fb      	ldr	r3, [r7, #12]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0301 	and.w	r3, r3, #1
}
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	4a13      	ldr	r2, [pc, #76]	; (80065e4 <USB_CoreReset+0x60>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d901      	bls.n	80065a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e01a      	b.n	80065d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	daf3      	bge.n	8006590 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f043 0201 	orr.w	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	4a09      	ldr	r2, [pc, #36]	; (80065e4 <USB_CoreReset+0x60>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d901      	bls.n	80065c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e006      	b.n	80065d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d0f1      	beq.n	80065b8 <USB_CoreReset+0x34>

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	00030d40 	.word	0x00030d40

080065e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065e8:	b084      	sub	sp, #16
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	f107 001c 	add.w	r0, r7, #28
 80065f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006604:	461a      	mov	r2, r3
 8006606:	2300      	movs	r3, #0
 8006608:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006636:	2b00      	cmp	r3, #0
 8006638:	d018      	beq.n	800666c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	2b01      	cmp	r3, #1
 800663e:	d10a      	bne.n	8006656 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800664e:	f043 0304 	orr.w	r3, r3, #4
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	e014      	b.n	8006680 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	e009      	b.n	8006680 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800667a:	f023 0304 	bic.w	r3, r3, #4
 800667e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006680:	2110      	movs	r1, #16
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fec0 	bl	8006408 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff fee1 	bl	8006450 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e015      	b.n	80066c0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	461a      	mov	r2, r3
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295
 80066a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b4:	461a      	mov	r2, r3
 80066b6:	2300      	movs	r3, #0
 80066b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3301      	adds	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d3e5      	bcc.n	8006694 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f04f 32ff 	mov.w	r2, #4294967295
 80066d4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a13      	ldr	r2, [pc, #76]	; (800673c <USB_HostInit+0x154>)
 80066ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <USB_HostInit+0x158>)
 80066f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80066f8:	e009      	b.n	800670e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2280      	movs	r2, #128	; 0x80
 80066fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a10      	ldr	r2, [pc, #64]	; (8006744 <USB_HostInit+0x15c>)
 8006704:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a0f      	ldr	r2, [pc, #60]	; (8006748 <USB_HostInit+0x160>)
 800670a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	f043 0210 	orr.w	r2, r3, #16
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <USB_HostInit+0x164>)
 8006726:	4313      	orrs	r3, r2
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006738:	b004      	add	sp, #16
 800673a:	4770      	bx	lr
 800673c:	01000200 	.word	0x01000200
 8006740:	00e00300 	.word	0x00e00300
 8006744:	00600080 	.word	0x00600080
 8006748:	004000e0 	.word	0x004000e0
 800674c:	a3200008 	.word	0xa3200008

08006750 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006788:	4313      	orrs	r3, r2
 800678a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d107      	bne.n	80067a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006798:	461a      	mov	r2, r3
 800679a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800679e:	6053      	str	r3, [r2, #4]
 80067a0:	e009      	b.n	80067b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80067a2:	78fb      	ldrb	r3, [r7, #3]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d106      	bne.n	80067b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ae:	461a      	mov	r2, r3
 80067b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80067b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	b29b      	uxth	r3, r3
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b089      	sub	sp, #36	; 0x24
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	0c9b      	lsrs	r3, r3, #18
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	4413      	add	r3, r2
 800681c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	0fdb      	lsrs	r3, r3, #31
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b20      	cmp	r3, #32
 8006834:	d104      	bne.n	8006840 <USB_HC_Halt+0x5a>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	e0e8      	b.n	8006a12 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <USB_HC_Halt+0x66>
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d173      	bne.n	8006934 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	440a      	add	r2, r1
 8006862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800686a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	f040 80cb 	bne.w	8006a10 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d143      	bne.n	800690e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	4413      	add	r3, r2
 800688e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	440a      	add	r2, r1
 800689c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068e4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	3301      	adds	r3, #1
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068f2:	d81d      	bhi.n	8006930 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690a:	d0ec      	beq.n	80068e6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800690c:	e080      	b.n	8006a10 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	440a      	add	r2, r1
 8006924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800692c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800692e:	e06f      	b.n	8006a10 <USB_HC_Halt+0x22a>
            break;
 8006930:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006932:	e06d      	b.n	8006a10 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	440a      	add	r2, r1
 800694a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006952:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d143      	bne.n	80069ec <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	440a      	add	r2, r1
 800697a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800697e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006982:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	440a      	add	r2, r1
 800699a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069c2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3301      	adds	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069d0:	d81d      	bhi.n	8006a0e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069e8:	d0ec      	beq.n	80069c4 <USB_HC_Halt+0x1de>
 80069ea:	e011      	b.n	8006a10 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	0151      	lsls	r1, r2, #5
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	440a      	add	r2, r1
 8006a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	e000      	b.n	8006a10 <USB_HC_Halt+0x22a>
          break;
 8006a0e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3724      	adds	r7, #36	; 0x24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
	...

08006a20 <__errno>:
 8006a20:	4b01      	ldr	r3, [pc, #4]	; (8006a28 <__errno+0x8>)
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	2000000c 	.word	0x2000000c

08006a2c <__libc_init_array>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4d0d      	ldr	r5, [pc, #52]	; (8006a64 <__libc_init_array+0x38>)
 8006a30:	4c0d      	ldr	r4, [pc, #52]	; (8006a68 <__libc_init_array+0x3c>)
 8006a32:	1b64      	subs	r4, r4, r5
 8006a34:	10a4      	asrs	r4, r4, #2
 8006a36:	2600      	movs	r6, #0
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	d109      	bne.n	8006a50 <__libc_init_array+0x24>
 8006a3c:	4d0b      	ldr	r5, [pc, #44]	; (8006a6c <__libc_init_array+0x40>)
 8006a3e:	4c0c      	ldr	r4, [pc, #48]	; (8006a70 <__libc_init_array+0x44>)
 8006a40:	f000 fc4e 	bl	80072e0 <_init>
 8006a44:	1b64      	subs	r4, r4, r5
 8006a46:	10a4      	asrs	r4, r4, #2
 8006a48:	2600      	movs	r6, #0
 8006a4a:	42a6      	cmp	r6, r4
 8006a4c:	d105      	bne.n	8006a5a <__libc_init_array+0x2e>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a54:	4798      	blx	r3
 8006a56:	3601      	adds	r6, #1
 8006a58:	e7ee      	b.n	8006a38 <__libc_init_array+0xc>
 8006a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5e:	4798      	blx	r3
 8006a60:	3601      	adds	r6, #1
 8006a62:	e7f2      	b.n	8006a4a <__libc_init_array+0x1e>
 8006a64:	08007358 	.word	0x08007358
 8006a68:	08007358 	.word	0x08007358
 8006a6c:	08007358 	.word	0x08007358
 8006a70:	0800735c 	.word	0x0800735c

08006a74 <memset>:
 8006a74:	4402      	add	r2, r0
 8006a76:	4603      	mov	r3, r0
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d100      	bne.n	8006a7e <memset+0xa>
 8006a7c:	4770      	bx	lr
 8006a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a82:	e7f9      	b.n	8006a78 <memset+0x4>

08006a84 <siprintf>:
 8006a84:	b40e      	push	{r1, r2, r3}
 8006a86:	b500      	push	{lr}
 8006a88:	b09c      	sub	sp, #112	; 0x70
 8006a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a8c:	9002      	str	r0, [sp, #8]
 8006a8e:	9006      	str	r0, [sp, #24]
 8006a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a94:	4809      	ldr	r0, [pc, #36]	; (8006abc <siprintf+0x38>)
 8006a96:	9107      	str	r1, [sp, #28]
 8006a98:	9104      	str	r1, [sp, #16]
 8006a9a:	4909      	ldr	r1, [pc, #36]	; (8006ac0 <siprintf+0x3c>)
 8006a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa0:	9105      	str	r1, [sp, #20]
 8006aa2:	6800      	ldr	r0, [r0, #0]
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	a902      	add	r1, sp, #8
 8006aa8:	f000 f868 	bl	8006b7c <_svfiprintf_r>
 8006aac:	9b02      	ldr	r3, [sp, #8]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	b01c      	add	sp, #112	; 0x70
 8006ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ab8:	b003      	add	sp, #12
 8006aba:	4770      	bx	lr
 8006abc:	2000000c 	.word	0x2000000c
 8006ac0:	ffff0208 	.word	0xffff0208

08006ac4 <__ssputs_r>:
 8006ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac8:	688e      	ldr	r6, [r1, #8]
 8006aca:	429e      	cmp	r6, r3
 8006acc:	4682      	mov	sl, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	4690      	mov	r8, r2
 8006ad2:	461f      	mov	r7, r3
 8006ad4:	d838      	bhi.n	8006b48 <__ssputs_r+0x84>
 8006ad6:	898a      	ldrh	r2, [r1, #12]
 8006ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006adc:	d032      	beq.n	8006b44 <__ssputs_r+0x80>
 8006ade:	6825      	ldr	r5, [r4, #0]
 8006ae0:	6909      	ldr	r1, [r1, #16]
 8006ae2:	eba5 0901 	sub.w	r9, r5, r1
 8006ae6:	6965      	ldr	r5, [r4, #20]
 8006ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006af0:	3301      	adds	r3, #1
 8006af2:	444b      	add	r3, r9
 8006af4:	106d      	asrs	r5, r5, #1
 8006af6:	429d      	cmp	r5, r3
 8006af8:	bf38      	it	cc
 8006afa:	461d      	movcc	r5, r3
 8006afc:	0553      	lsls	r3, r2, #21
 8006afe:	d531      	bpl.n	8006b64 <__ssputs_r+0xa0>
 8006b00:	4629      	mov	r1, r5
 8006b02:	f000 fb47 	bl	8007194 <_malloc_r>
 8006b06:	4606      	mov	r6, r0
 8006b08:	b950      	cbnz	r0, 8006b20 <__ssputs_r+0x5c>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	f8ca 3000 	str.w	r3, [sl]
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b16:	81a3      	strh	r3, [r4, #12]
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b20:	6921      	ldr	r1, [r4, #16]
 8006b22:	464a      	mov	r2, r9
 8006b24:	f000 fabe 	bl	80070a4 <memcpy>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	6126      	str	r6, [r4, #16]
 8006b36:	6165      	str	r5, [r4, #20]
 8006b38:	444e      	add	r6, r9
 8006b3a:	eba5 0509 	sub.w	r5, r5, r9
 8006b3e:	6026      	str	r6, [r4, #0]
 8006b40:	60a5      	str	r5, [r4, #8]
 8006b42:	463e      	mov	r6, r7
 8006b44:	42be      	cmp	r6, r7
 8006b46:	d900      	bls.n	8006b4a <__ssputs_r+0x86>
 8006b48:	463e      	mov	r6, r7
 8006b4a:	4632      	mov	r2, r6
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	4641      	mov	r1, r8
 8006b50:	f000 fab6 	bl	80070c0 <memmove>
 8006b54:	68a3      	ldr	r3, [r4, #8]
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	1b9b      	subs	r3, r3, r6
 8006b5a:	4432      	add	r2, r6
 8006b5c:	60a3      	str	r3, [r4, #8]
 8006b5e:	6022      	str	r2, [r4, #0]
 8006b60:	2000      	movs	r0, #0
 8006b62:	e7db      	b.n	8006b1c <__ssputs_r+0x58>
 8006b64:	462a      	mov	r2, r5
 8006b66:	f000 fb6f 	bl	8007248 <_realloc_r>
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d1e1      	bne.n	8006b34 <__ssputs_r+0x70>
 8006b70:	6921      	ldr	r1, [r4, #16]
 8006b72:	4650      	mov	r0, sl
 8006b74:	f000 fabe 	bl	80070f4 <_free_r>
 8006b78:	e7c7      	b.n	8006b0a <__ssputs_r+0x46>
	...

08006b7c <_svfiprintf_r>:
 8006b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b80:	4698      	mov	r8, r3
 8006b82:	898b      	ldrh	r3, [r1, #12]
 8006b84:	061b      	lsls	r3, r3, #24
 8006b86:	b09d      	sub	sp, #116	; 0x74
 8006b88:	4607      	mov	r7, r0
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	d50e      	bpl.n	8006bae <_svfiprintf_r+0x32>
 8006b90:	690b      	ldr	r3, [r1, #16]
 8006b92:	b963      	cbnz	r3, 8006bae <_svfiprintf_r+0x32>
 8006b94:	2140      	movs	r1, #64	; 0x40
 8006b96:	f000 fafd 	bl	8007194 <_malloc_r>
 8006b9a:	6028      	str	r0, [r5, #0]
 8006b9c:	6128      	str	r0, [r5, #16]
 8006b9e:	b920      	cbnz	r0, 8006baa <_svfiprintf_r+0x2e>
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	e0d1      	b.n	8006d4e <_svfiprintf_r+0x1d2>
 8006baa:	2340      	movs	r3, #64	; 0x40
 8006bac:	616b      	str	r3, [r5, #20]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb2:	2320      	movs	r3, #32
 8006bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bbc:	2330      	movs	r3, #48	; 0x30
 8006bbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d68 <_svfiprintf_r+0x1ec>
 8006bc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bc6:	f04f 0901 	mov.w	r9, #1
 8006bca:	4623      	mov	r3, r4
 8006bcc:	469a      	mov	sl, r3
 8006bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd2:	b10a      	cbz	r2, 8006bd8 <_svfiprintf_r+0x5c>
 8006bd4:	2a25      	cmp	r2, #37	; 0x25
 8006bd6:	d1f9      	bne.n	8006bcc <_svfiprintf_r+0x50>
 8006bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8006bdc:	d00b      	beq.n	8006bf6 <_svfiprintf_r+0x7a>
 8006bde:	465b      	mov	r3, fp
 8006be0:	4622      	mov	r2, r4
 8006be2:	4629      	mov	r1, r5
 8006be4:	4638      	mov	r0, r7
 8006be6:	f7ff ff6d 	bl	8006ac4 <__ssputs_r>
 8006bea:	3001      	adds	r0, #1
 8006bec:	f000 80aa 	beq.w	8006d44 <_svfiprintf_r+0x1c8>
 8006bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf2:	445a      	add	r2, fp
 8006bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80a2 	beq.w	8006d44 <_svfiprintf_r+0x1c8>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295
 8006c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c0a:	f10a 0a01 	add.w	sl, sl, #1
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	9307      	str	r3, [sp, #28]
 8006c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c16:	931a      	str	r3, [sp, #104]	; 0x68
 8006c18:	4654      	mov	r4, sl
 8006c1a:	2205      	movs	r2, #5
 8006c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c20:	4851      	ldr	r0, [pc, #324]	; (8006d68 <_svfiprintf_r+0x1ec>)
 8006c22:	f7f9 fae5 	bl	80001f0 <memchr>
 8006c26:	9a04      	ldr	r2, [sp, #16]
 8006c28:	b9d8      	cbnz	r0, 8006c62 <_svfiprintf_r+0xe6>
 8006c2a:	06d0      	lsls	r0, r2, #27
 8006c2c:	bf44      	itt	mi
 8006c2e:	2320      	movmi	r3, #32
 8006c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c34:	0711      	lsls	r1, r2, #28
 8006c36:	bf44      	itt	mi
 8006c38:	232b      	movmi	r3, #43	; 0x2b
 8006c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c42:	2b2a      	cmp	r3, #42	; 0x2a
 8006c44:	d015      	beq.n	8006c72 <_svfiprintf_r+0xf6>
 8006c46:	9a07      	ldr	r2, [sp, #28]
 8006c48:	4654      	mov	r4, sl
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	f04f 0c0a 	mov.w	ip, #10
 8006c50:	4621      	mov	r1, r4
 8006c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c56:	3b30      	subs	r3, #48	; 0x30
 8006c58:	2b09      	cmp	r3, #9
 8006c5a:	d94e      	bls.n	8006cfa <_svfiprintf_r+0x17e>
 8006c5c:	b1b0      	cbz	r0, 8006c8c <_svfiprintf_r+0x110>
 8006c5e:	9207      	str	r2, [sp, #28]
 8006c60:	e014      	b.n	8006c8c <_svfiprintf_r+0x110>
 8006c62:	eba0 0308 	sub.w	r3, r0, r8
 8006c66:	fa09 f303 	lsl.w	r3, r9, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	46a2      	mov	sl, r4
 8006c70:	e7d2      	b.n	8006c18 <_svfiprintf_r+0x9c>
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	1d19      	adds	r1, r3, #4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	9103      	str	r1, [sp, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfbb      	ittet	lt
 8006c7e:	425b      	neglt	r3, r3
 8006c80:	f042 0202 	orrlt.w	r2, r2, #2
 8006c84:	9307      	strge	r3, [sp, #28]
 8006c86:	9307      	strlt	r3, [sp, #28]
 8006c88:	bfb8      	it	lt
 8006c8a:	9204      	strlt	r2, [sp, #16]
 8006c8c:	7823      	ldrb	r3, [r4, #0]
 8006c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c90:	d10c      	bne.n	8006cac <_svfiprintf_r+0x130>
 8006c92:	7863      	ldrb	r3, [r4, #1]
 8006c94:	2b2a      	cmp	r3, #42	; 0x2a
 8006c96:	d135      	bne.n	8006d04 <_svfiprintf_r+0x188>
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	1d1a      	adds	r2, r3, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	9203      	str	r2, [sp, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bfb8      	it	lt
 8006ca4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ca8:	3402      	adds	r4, #2
 8006caa:	9305      	str	r3, [sp, #20]
 8006cac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d78 <_svfiprintf_r+0x1fc>
 8006cb0:	7821      	ldrb	r1, [r4, #0]
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	4650      	mov	r0, sl
 8006cb6:	f7f9 fa9b 	bl	80001f0 <memchr>
 8006cba:	b140      	cbz	r0, 8006cce <_svfiprintf_r+0x152>
 8006cbc:	2340      	movs	r3, #64	; 0x40
 8006cbe:	eba0 000a 	sub.w	r0, r0, sl
 8006cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	4303      	orrs	r3, r0
 8006cca:	3401      	adds	r4, #1
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd2:	4826      	ldr	r0, [pc, #152]	; (8006d6c <_svfiprintf_r+0x1f0>)
 8006cd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cd8:	2206      	movs	r2, #6
 8006cda:	f7f9 fa89 	bl	80001f0 <memchr>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d038      	beq.n	8006d54 <_svfiprintf_r+0x1d8>
 8006ce2:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <_svfiprintf_r+0x1f4>)
 8006ce4:	bb1b      	cbnz	r3, 8006d2e <_svfiprintf_r+0x1b2>
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	3307      	adds	r3, #7
 8006cea:	f023 0307 	bic.w	r3, r3, #7
 8006cee:	3308      	adds	r3, #8
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf4:	4433      	add	r3, r6
 8006cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf8:	e767      	b.n	8006bca <_svfiprintf_r+0x4e>
 8006cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cfe:	460c      	mov	r4, r1
 8006d00:	2001      	movs	r0, #1
 8006d02:	e7a5      	b.n	8006c50 <_svfiprintf_r+0xd4>
 8006d04:	2300      	movs	r3, #0
 8006d06:	3401      	adds	r4, #1
 8006d08:	9305      	str	r3, [sp, #20]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	f04f 0c0a 	mov.w	ip, #10
 8006d10:	4620      	mov	r0, r4
 8006d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d16:	3a30      	subs	r2, #48	; 0x30
 8006d18:	2a09      	cmp	r2, #9
 8006d1a:	d903      	bls.n	8006d24 <_svfiprintf_r+0x1a8>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0c5      	beq.n	8006cac <_svfiprintf_r+0x130>
 8006d20:	9105      	str	r1, [sp, #20]
 8006d22:	e7c3      	b.n	8006cac <_svfiprintf_r+0x130>
 8006d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d28:	4604      	mov	r4, r0
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e7f0      	b.n	8006d10 <_svfiprintf_r+0x194>
 8006d2e:	ab03      	add	r3, sp, #12
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	462a      	mov	r2, r5
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <_svfiprintf_r+0x1f8>)
 8006d36:	a904      	add	r1, sp, #16
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f3af 8000 	nop.w
 8006d3e:	1c42      	adds	r2, r0, #1
 8006d40:	4606      	mov	r6, r0
 8006d42:	d1d6      	bne.n	8006cf2 <_svfiprintf_r+0x176>
 8006d44:	89ab      	ldrh	r3, [r5, #12]
 8006d46:	065b      	lsls	r3, r3, #25
 8006d48:	f53f af2c 	bmi.w	8006ba4 <_svfiprintf_r+0x28>
 8006d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d4e:	b01d      	add	sp, #116	; 0x74
 8006d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d54:	ab03      	add	r3, sp, #12
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	462a      	mov	r2, r5
 8006d5a:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <_svfiprintf_r+0x1f8>)
 8006d5c:	a904      	add	r1, sp, #16
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f000 f87a 	bl	8006e58 <_printf_i>
 8006d64:	e7eb      	b.n	8006d3e <_svfiprintf_r+0x1c2>
 8006d66:	bf00      	nop
 8006d68:	0800731c 	.word	0x0800731c
 8006d6c:	08007326 	.word	0x08007326
 8006d70:	00000000 	.word	0x00000000
 8006d74:	08006ac5 	.word	0x08006ac5
 8006d78:	08007322 	.word	0x08007322

08006d7c <_printf_common>:
 8006d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d80:	4616      	mov	r6, r2
 8006d82:	4699      	mov	r9, r3
 8006d84:	688a      	ldr	r2, [r1, #8]
 8006d86:	690b      	ldr	r3, [r1, #16]
 8006d88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	bfb8      	it	lt
 8006d90:	4613      	movlt	r3, r2
 8006d92:	6033      	str	r3, [r6, #0]
 8006d94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d98:	4607      	mov	r7, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	b10a      	cbz	r2, 8006da2 <_printf_common+0x26>
 8006d9e:	3301      	adds	r3, #1
 8006da0:	6033      	str	r3, [r6, #0]
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	0699      	lsls	r1, r3, #26
 8006da6:	bf42      	ittt	mi
 8006da8:	6833      	ldrmi	r3, [r6, #0]
 8006daa:	3302      	addmi	r3, #2
 8006dac:	6033      	strmi	r3, [r6, #0]
 8006dae:	6825      	ldr	r5, [r4, #0]
 8006db0:	f015 0506 	ands.w	r5, r5, #6
 8006db4:	d106      	bne.n	8006dc4 <_printf_common+0x48>
 8006db6:	f104 0a19 	add.w	sl, r4, #25
 8006dba:	68e3      	ldr	r3, [r4, #12]
 8006dbc:	6832      	ldr	r2, [r6, #0]
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	42ab      	cmp	r3, r5
 8006dc2:	dc26      	bgt.n	8006e12 <_printf_common+0x96>
 8006dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dc8:	1e13      	subs	r3, r2, #0
 8006dca:	6822      	ldr	r2, [r4, #0]
 8006dcc:	bf18      	it	ne
 8006dce:	2301      	movne	r3, #1
 8006dd0:	0692      	lsls	r2, r2, #26
 8006dd2:	d42b      	bmi.n	8006e2c <_printf_common+0xb0>
 8006dd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dd8:	4649      	mov	r1, r9
 8006dda:	4638      	mov	r0, r7
 8006ddc:	47c0      	blx	r8
 8006dde:	3001      	adds	r0, #1
 8006de0:	d01e      	beq.n	8006e20 <_printf_common+0xa4>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	68e5      	ldr	r5, [r4, #12]
 8006de6:	6832      	ldr	r2, [r6, #0]
 8006de8:	f003 0306 	and.w	r3, r3, #6
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	bf08      	it	eq
 8006df0:	1aad      	subeq	r5, r5, r2
 8006df2:	68a3      	ldr	r3, [r4, #8]
 8006df4:	6922      	ldr	r2, [r4, #16]
 8006df6:	bf0c      	ite	eq
 8006df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dfc:	2500      	movne	r5, #0
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	bfc4      	itt	gt
 8006e02:	1a9b      	subgt	r3, r3, r2
 8006e04:	18ed      	addgt	r5, r5, r3
 8006e06:	2600      	movs	r6, #0
 8006e08:	341a      	adds	r4, #26
 8006e0a:	42b5      	cmp	r5, r6
 8006e0c:	d11a      	bne.n	8006e44 <_printf_common+0xc8>
 8006e0e:	2000      	movs	r0, #0
 8006e10:	e008      	b.n	8006e24 <_printf_common+0xa8>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4652      	mov	r2, sl
 8006e16:	4649      	mov	r1, r9
 8006e18:	4638      	mov	r0, r7
 8006e1a:	47c0      	blx	r8
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d103      	bne.n	8006e28 <_printf_common+0xac>
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295
 8006e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e28:	3501      	adds	r5, #1
 8006e2a:	e7c6      	b.n	8006dba <_printf_common+0x3e>
 8006e2c:	18e1      	adds	r1, r4, r3
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	2030      	movs	r0, #48	; 0x30
 8006e32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e36:	4422      	add	r2, r4
 8006e38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e40:	3302      	adds	r3, #2
 8006e42:	e7c7      	b.n	8006dd4 <_printf_common+0x58>
 8006e44:	2301      	movs	r3, #1
 8006e46:	4622      	mov	r2, r4
 8006e48:	4649      	mov	r1, r9
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	47c0      	blx	r8
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d0e6      	beq.n	8006e20 <_printf_common+0xa4>
 8006e52:	3601      	adds	r6, #1
 8006e54:	e7d9      	b.n	8006e0a <_printf_common+0x8e>
	...

08006e58 <_printf_i>:
 8006e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	4691      	mov	r9, r2
 8006e60:	7e27      	ldrb	r7, [r4, #24]
 8006e62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e64:	2f78      	cmp	r7, #120	; 0x78
 8006e66:	4680      	mov	r8, r0
 8006e68:	469a      	mov	sl, r3
 8006e6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e6e:	d807      	bhi.n	8006e80 <_printf_i+0x28>
 8006e70:	2f62      	cmp	r7, #98	; 0x62
 8006e72:	d80a      	bhi.n	8006e8a <_printf_i+0x32>
 8006e74:	2f00      	cmp	r7, #0
 8006e76:	f000 80d8 	beq.w	800702a <_printf_i+0x1d2>
 8006e7a:	2f58      	cmp	r7, #88	; 0x58
 8006e7c:	f000 80a3 	beq.w	8006fc6 <_printf_i+0x16e>
 8006e80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e88:	e03a      	b.n	8006f00 <_printf_i+0xa8>
 8006e8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e8e:	2b15      	cmp	r3, #21
 8006e90:	d8f6      	bhi.n	8006e80 <_printf_i+0x28>
 8006e92:	a001      	add	r0, pc, #4	; (adr r0, 8006e98 <_printf_i+0x40>)
 8006e94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e98:	08006ef1 	.word	0x08006ef1
 8006e9c:	08006f05 	.word	0x08006f05
 8006ea0:	08006e81 	.word	0x08006e81
 8006ea4:	08006e81 	.word	0x08006e81
 8006ea8:	08006e81 	.word	0x08006e81
 8006eac:	08006e81 	.word	0x08006e81
 8006eb0:	08006f05 	.word	0x08006f05
 8006eb4:	08006e81 	.word	0x08006e81
 8006eb8:	08006e81 	.word	0x08006e81
 8006ebc:	08006e81 	.word	0x08006e81
 8006ec0:	08006e81 	.word	0x08006e81
 8006ec4:	08007011 	.word	0x08007011
 8006ec8:	08006f35 	.word	0x08006f35
 8006ecc:	08006ff3 	.word	0x08006ff3
 8006ed0:	08006e81 	.word	0x08006e81
 8006ed4:	08006e81 	.word	0x08006e81
 8006ed8:	08007033 	.word	0x08007033
 8006edc:	08006e81 	.word	0x08006e81
 8006ee0:	08006f35 	.word	0x08006f35
 8006ee4:	08006e81 	.word	0x08006e81
 8006ee8:	08006e81 	.word	0x08006e81
 8006eec:	08006ffb 	.word	0x08006ffb
 8006ef0:	680b      	ldr	r3, [r1, #0]
 8006ef2:	1d1a      	adds	r2, r3, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	600a      	str	r2, [r1, #0]
 8006ef8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f00:	2301      	movs	r3, #1
 8006f02:	e0a3      	b.n	800704c <_printf_i+0x1f4>
 8006f04:	6825      	ldr	r5, [r4, #0]
 8006f06:	6808      	ldr	r0, [r1, #0]
 8006f08:	062e      	lsls	r6, r5, #24
 8006f0a:	f100 0304 	add.w	r3, r0, #4
 8006f0e:	d50a      	bpl.n	8006f26 <_printf_i+0xce>
 8006f10:	6805      	ldr	r5, [r0, #0]
 8006f12:	600b      	str	r3, [r1, #0]
 8006f14:	2d00      	cmp	r5, #0
 8006f16:	da03      	bge.n	8006f20 <_printf_i+0xc8>
 8006f18:	232d      	movs	r3, #45	; 0x2d
 8006f1a:	426d      	negs	r5, r5
 8006f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f20:	485e      	ldr	r0, [pc, #376]	; (800709c <_printf_i+0x244>)
 8006f22:	230a      	movs	r3, #10
 8006f24:	e019      	b.n	8006f5a <_printf_i+0x102>
 8006f26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f2a:	6805      	ldr	r5, [r0, #0]
 8006f2c:	600b      	str	r3, [r1, #0]
 8006f2e:	bf18      	it	ne
 8006f30:	b22d      	sxthne	r5, r5
 8006f32:	e7ef      	b.n	8006f14 <_printf_i+0xbc>
 8006f34:	680b      	ldr	r3, [r1, #0]
 8006f36:	6825      	ldr	r5, [r4, #0]
 8006f38:	1d18      	adds	r0, r3, #4
 8006f3a:	6008      	str	r0, [r1, #0]
 8006f3c:	0628      	lsls	r0, r5, #24
 8006f3e:	d501      	bpl.n	8006f44 <_printf_i+0xec>
 8006f40:	681d      	ldr	r5, [r3, #0]
 8006f42:	e002      	b.n	8006f4a <_printf_i+0xf2>
 8006f44:	0669      	lsls	r1, r5, #25
 8006f46:	d5fb      	bpl.n	8006f40 <_printf_i+0xe8>
 8006f48:	881d      	ldrh	r5, [r3, #0]
 8006f4a:	4854      	ldr	r0, [pc, #336]	; (800709c <_printf_i+0x244>)
 8006f4c:	2f6f      	cmp	r7, #111	; 0x6f
 8006f4e:	bf0c      	ite	eq
 8006f50:	2308      	moveq	r3, #8
 8006f52:	230a      	movne	r3, #10
 8006f54:	2100      	movs	r1, #0
 8006f56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f5a:	6866      	ldr	r6, [r4, #4]
 8006f5c:	60a6      	str	r6, [r4, #8]
 8006f5e:	2e00      	cmp	r6, #0
 8006f60:	bfa2      	ittt	ge
 8006f62:	6821      	ldrge	r1, [r4, #0]
 8006f64:	f021 0104 	bicge.w	r1, r1, #4
 8006f68:	6021      	strge	r1, [r4, #0]
 8006f6a:	b90d      	cbnz	r5, 8006f70 <_printf_i+0x118>
 8006f6c:	2e00      	cmp	r6, #0
 8006f6e:	d04d      	beq.n	800700c <_printf_i+0x1b4>
 8006f70:	4616      	mov	r6, r2
 8006f72:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f76:	fb03 5711 	mls	r7, r3, r1, r5
 8006f7a:	5dc7      	ldrb	r7, [r0, r7]
 8006f7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f80:	462f      	mov	r7, r5
 8006f82:	42bb      	cmp	r3, r7
 8006f84:	460d      	mov	r5, r1
 8006f86:	d9f4      	bls.n	8006f72 <_printf_i+0x11a>
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d10b      	bne.n	8006fa4 <_printf_i+0x14c>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	07df      	lsls	r7, r3, #31
 8006f90:	d508      	bpl.n	8006fa4 <_printf_i+0x14c>
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	6861      	ldr	r1, [r4, #4]
 8006f96:	4299      	cmp	r1, r3
 8006f98:	bfde      	ittt	le
 8006f9a:	2330      	movle	r3, #48	; 0x30
 8006f9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fa4:	1b92      	subs	r2, r2, r6
 8006fa6:	6122      	str	r2, [r4, #16]
 8006fa8:	f8cd a000 	str.w	sl, [sp]
 8006fac:	464b      	mov	r3, r9
 8006fae:	aa03      	add	r2, sp, #12
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f7ff fee2 	bl	8006d7c <_printf_common>
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d14c      	bne.n	8007056 <_printf_i+0x1fe>
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc0:	b004      	add	sp, #16
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc6:	4835      	ldr	r0, [pc, #212]	; (800709c <_printf_i+0x244>)
 8006fc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	680e      	ldr	r6, [r1, #0]
 8006fd0:	061f      	lsls	r7, r3, #24
 8006fd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fd6:	600e      	str	r6, [r1, #0]
 8006fd8:	d514      	bpl.n	8007004 <_printf_i+0x1ac>
 8006fda:	07d9      	lsls	r1, r3, #31
 8006fdc:	bf44      	itt	mi
 8006fde:	f043 0320 	orrmi.w	r3, r3, #32
 8006fe2:	6023      	strmi	r3, [r4, #0]
 8006fe4:	b91d      	cbnz	r5, 8006fee <_printf_i+0x196>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	f023 0320 	bic.w	r3, r3, #32
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	2310      	movs	r3, #16
 8006ff0:	e7b0      	b.n	8006f54 <_printf_i+0xfc>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	f043 0320 	orr.w	r3, r3, #32
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	2378      	movs	r3, #120	; 0x78
 8006ffc:	4828      	ldr	r0, [pc, #160]	; (80070a0 <_printf_i+0x248>)
 8006ffe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007002:	e7e3      	b.n	8006fcc <_printf_i+0x174>
 8007004:	065e      	lsls	r6, r3, #25
 8007006:	bf48      	it	mi
 8007008:	b2ad      	uxthmi	r5, r5
 800700a:	e7e6      	b.n	8006fda <_printf_i+0x182>
 800700c:	4616      	mov	r6, r2
 800700e:	e7bb      	b.n	8006f88 <_printf_i+0x130>
 8007010:	680b      	ldr	r3, [r1, #0]
 8007012:	6826      	ldr	r6, [r4, #0]
 8007014:	6960      	ldr	r0, [r4, #20]
 8007016:	1d1d      	adds	r5, r3, #4
 8007018:	600d      	str	r5, [r1, #0]
 800701a:	0635      	lsls	r5, r6, #24
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	d501      	bpl.n	8007024 <_printf_i+0x1cc>
 8007020:	6018      	str	r0, [r3, #0]
 8007022:	e002      	b.n	800702a <_printf_i+0x1d2>
 8007024:	0671      	lsls	r1, r6, #25
 8007026:	d5fb      	bpl.n	8007020 <_printf_i+0x1c8>
 8007028:	8018      	strh	r0, [r3, #0]
 800702a:	2300      	movs	r3, #0
 800702c:	6123      	str	r3, [r4, #16]
 800702e:	4616      	mov	r6, r2
 8007030:	e7ba      	b.n	8006fa8 <_printf_i+0x150>
 8007032:	680b      	ldr	r3, [r1, #0]
 8007034:	1d1a      	adds	r2, r3, #4
 8007036:	600a      	str	r2, [r1, #0]
 8007038:	681e      	ldr	r6, [r3, #0]
 800703a:	6862      	ldr	r2, [r4, #4]
 800703c:	2100      	movs	r1, #0
 800703e:	4630      	mov	r0, r6
 8007040:	f7f9 f8d6 	bl	80001f0 <memchr>
 8007044:	b108      	cbz	r0, 800704a <_printf_i+0x1f2>
 8007046:	1b80      	subs	r0, r0, r6
 8007048:	6060      	str	r0, [r4, #4]
 800704a:	6863      	ldr	r3, [r4, #4]
 800704c:	6123      	str	r3, [r4, #16]
 800704e:	2300      	movs	r3, #0
 8007050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007054:	e7a8      	b.n	8006fa8 <_printf_i+0x150>
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	4632      	mov	r2, r6
 800705a:	4649      	mov	r1, r9
 800705c:	4640      	mov	r0, r8
 800705e:	47d0      	blx	sl
 8007060:	3001      	adds	r0, #1
 8007062:	d0ab      	beq.n	8006fbc <_printf_i+0x164>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	079b      	lsls	r3, r3, #30
 8007068:	d413      	bmi.n	8007092 <_printf_i+0x23a>
 800706a:	68e0      	ldr	r0, [r4, #12]
 800706c:	9b03      	ldr	r3, [sp, #12]
 800706e:	4298      	cmp	r0, r3
 8007070:	bfb8      	it	lt
 8007072:	4618      	movlt	r0, r3
 8007074:	e7a4      	b.n	8006fc0 <_printf_i+0x168>
 8007076:	2301      	movs	r3, #1
 8007078:	4632      	mov	r2, r6
 800707a:	4649      	mov	r1, r9
 800707c:	4640      	mov	r0, r8
 800707e:	47d0      	blx	sl
 8007080:	3001      	adds	r0, #1
 8007082:	d09b      	beq.n	8006fbc <_printf_i+0x164>
 8007084:	3501      	adds	r5, #1
 8007086:	68e3      	ldr	r3, [r4, #12]
 8007088:	9903      	ldr	r1, [sp, #12]
 800708a:	1a5b      	subs	r3, r3, r1
 800708c:	42ab      	cmp	r3, r5
 800708e:	dcf2      	bgt.n	8007076 <_printf_i+0x21e>
 8007090:	e7eb      	b.n	800706a <_printf_i+0x212>
 8007092:	2500      	movs	r5, #0
 8007094:	f104 0619 	add.w	r6, r4, #25
 8007098:	e7f5      	b.n	8007086 <_printf_i+0x22e>
 800709a:	bf00      	nop
 800709c:	0800732d 	.word	0x0800732d
 80070a0:	0800733e 	.word	0x0800733e

080070a4 <memcpy>:
 80070a4:	440a      	add	r2, r1
 80070a6:	4291      	cmp	r1, r2
 80070a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070ac:	d100      	bne.n	80070b0 <memcpy+0xc>
 80070ae:	4770      	bx	lr
 80070b0:	b510      	push	{r4, lr}
 80070b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ba:	4291      	cmp	r1, r2
 80070bc:	d1f9      	bne.n	80070b2 <memcpy+0xe>
 80070be:	bd10      	pop	{r4, pc}

080070c0 <memmove>:
 80070c0:	4288      	cmp	r0, r1
 80070c2:	b510      	push	{r4, lr}
 80070c4:	eb01 0402 	add.w	r4, r1, r2
 80070c8:	d902      	bls.n	80070d0 <memmove+0x10>
 80070ca:	4284      	cmp	r4, r0
 80070cc:	4623      	mov	r3, r4
 80070ce:	d807      	bhi.n	80070e0 <memmove+0x20>
 80070d0:	1e43      	subs	r3, r0, #1
 80070d2:	42a1      	cmp	r1, r4
 80070d4:	d008      	beq.n	80070e8 <memmove+0x28>
 80070d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070de:	e7f8      	b.n	80070d2 <memmove+0x12>
 80070e0:	4402      	add	r2, r0
 80070e2:	4601      	mov	r1, r0
 80070e4:	428a      	cmp	r2, r1
 80070e6:	d100      	bne.n	80070ea <memmove+0x2a>
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f2:	e7f7      	b.n	80070e4 <memmove+0x24>

080070f4 <_free_r>:
 80070f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070f6:	2900      	cmp	r1, #0
 80070f8:	d048      	beq.n	800718c <_free_r+0x98>
 80070fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fe:	9001      	str	r0, [sp, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f1a1 0404 	sub.w	r4, r1, #4
 8007106:	bfb8      	it	lt
 8007108:	18e4      	addlt	r4, r4, r3
 800710a:	f000 f8d3 	bl	80072b4 <__malloc_lock>
 800710e:	4a20      	ldr	r2, [pc, #128]	; (8007190 <_free_r+0x9c>)
 8007110:	9801      	ldr	r0, [sp, #4]
 8007112:	6813      	ldr	r3, [r2, #0]
 8007114:	4615      	mov	r5, r2
 8007116:	b933      	cbnz	r3, 8007126 <_free_r+0x32>
 8007118:	6063      	str	r3, [r4, #4]
 800711a:	6014      	str	r4, [r2, #0]
 800711c:	b003      	add	sp, #12
 800711e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007122:	f000 b8cd 	b.w	80072c0 <__malloc_unlock>
 8007126:	42a3      	cmp	r3, r4
 8007128:	d90b      	bls.n	8007142 <_free_r+0x4e>
 800712a:	6821      	ldr	r1, [r4, #0]
 800712c:	1862      	adds	r2, r4, r1
 800712e:	4293      	cmp	r3, r2
 8007130:	bf04      	itt	eq
 8007132:	681a      	ldreq	r2, [r3, #0]
 8007134:	685b      	ldreq	r3, [r3, #4]
 8007136:	6063      	str	r3, [r4, #4]
 8007138:	bf04      	itt	eq
 800713a:	1852      	addeq	r2, r2, r1
 800713c:	6022      	streq	r2, [r4, #0]
 800713e:	602c      	str	r4, [r5, #0]
 8007140:	e7ec      	b.n	800711c <_free_r+0x28>
 8007142:	461a      	mov	r2, r3
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b10b      	cbz	r3, 800714c <_free_r+0x58>
 8007148:	42a3      	cmp	r3, r4
 800714a:	d9fa      	bls.n	8007142 <_free_r+0x4e>
 800714c:	6811      	ldr	r1, [r2, #0]
 800714e:	1855      	adds	r5, r2, r1
 8007150:	42a5      	cmp	r5, r4
 8007152:	d10b      	bne.n	800716c <_free_r+0x78>
 8007154:	6824      	ldr	r4, [r4, #0]
 8007156:	4421      	add	r1, r4
 8007158:	1854      	adds	r4, r2, r1
 800715a:	42a3      	cmp	r3, r4
 800715c:	6011      	str	r1, [r2, #0]
 800715e:	d1dd      	bne.n	800711c <_free_r+0x28>
 8007160:	681c      	ldr	r4, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	6053      	str	r3, [r2, #4]
 8007166:	4421      	add	r1, r4
 8007168:	6011      	str	r1, [r2, #0]
 800716a:	e7d7      	b.n	800711c <_free_r+0x28>
 800716c:	d902      	bls.n	8007174 <_free_r+0x80>
 800716e:	230c      	movs	r3, #12
 8007170:	6003      	str	r3, [r0, #0]
 8007172:	e7d3      	b.n	800711c <_free_r+0x28>
 8007174:	6825      	ldr	r5, [r4, #0]
 8007176:	1961      	adds	r1, r4, r5
 8007178:	428b      	cmp	r3, r1
 800717a:	bf04      	itt	eq
 800717c:	6819      	ldreq	r1, [r3, #0]
 800717e:	685b      	ldreq	r3, [r3, #4]
 8007180:	6063      	str	r3, [r4, #4]
 8007182:	bf04      	itt	eq
 8007184:	1949      	addeq	r1, r1, r5
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	6054      	str	r4, [r2, #4]
 800718a:	e7c7      	b.n	800711c <_free_r+0x28>
 800718c:	b003      	add	sp, #12
 800718e:	bd30      	pop	{r4, r5, pc}
 8007190:	20000094 	.word	0x20000094

08007194 <_malloc_r>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	1ccd      	adds	r5, r1, #3
 8007198:	f025 0503 	bic.w	r5, r5, #3
 800719c:	3508      	adds	r5, #8
 800719e:	2d0c      	cmp	r5, #12
 80071a0:	bf38      	it	cc
 80071a2:	250c      	movcc	r5, #12
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	4606      	mov	r6, r0
 80071a8:	db01      	blt.n	80071ae <_malloc_r+0x1a>
 80071aa:	42a9      	cmp	r1, r5
 80071ac:	d903      	bls.n	80071b6 <_malloc_r+0x22>
 80071ae:	230c      	movs	r3, #12
 80071b0:	6033      	str	r3, [r6, #0]
 80071b2:	2000      	movs	r0, #0
 80071b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b6:	f000 f87d 	bl	80072b4 <__malloc_lock>
 80071ba:	4921      	ldr	r1, [pc, #132]	; (8007240 <_malloc_r+0xac>)
 80071bc:	680a      	ldr	r2, [r1, #0]
 80071be:	4614      	mov	r4, r2
 80071c0:	b99c      	cbnz	r4, 80071ea <_malloc_r+0x56>
 80071c2:	4f20      	ldr	r7, [pc, #128]	; (8007244 <_malloc_r+0xb0>)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	b923      	cbnz	r3, 80071d2 <_malloc_r+0x3e>
 80071c8:	4621      	mov	r1, r4
 80071ca:	4630      	mov	r0, r6
 80071cc:	f000 f862 	bl	8007294 <_sbrk_r>
 80071d0:	6038      	str	r0, [r7, #0]
 80071d2:	4629      	mov	r1, r5
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 f85d 	bl	8007294 <_sbrk_r>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	d123      	bne.n	8007226 <_malloc_r+0x92>
 80071de:	230c      	movs	r3, #12
 80071e0:	6033      	str	r3, [r6, #0]
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 f86c 	bl	80072c0 <__malloc_unlock>
 80071e8:	e7e3      	b.n	80071b2 <_malloc_r+0x1e>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	1b5b      	subs	r3, r3, r5
 80071ee:	d417      	bmi.n	8007220 <_malloc_r+0x8c>
 80071f0:	2b0b      	cmp	r3, #11
 80071f2:	d903      	bls.n	80071fc <_malloc_r+0x68>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	441c      	add	r4, r3
 80071f8:	6025      	str	r5, [r4, #0]
 80071fa:	e004      	b.n	8007206 <_malloc_r+0x72>
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	42a2      	cmp	r2, r4
 8007200:	bf0c      	ite	eq
 8007202:	600b      	streq	r3, [r1, #0]
 8007204:	6053      	strne	r3, [r2, #4]
 8007206:	4630      	mov	r0, r6
 8007208:	f000 f85a 	bl	80072c0 <__malloc_unlock>
 800720c:	f104 000b 	add.w	r0, r4, #11
 8007210:	1d23      	adds	r3, r4, #4
 8007212:	f020 0007 	bic.w	r0, r0, #7
 8007216:	1ac2      	subs	r2, r0, r3
 8007218:	d0cc      	beq.n	80071b4 <_malloc_r+0x20>
 800721a:	1a1b      	subs	r3, r3, r0
 800721c:	50a3      	str	r3, [r4, r2]
 800721e:	e7c9      	b.n	80071b4 <_malloc_r+0x20>
 8007220:	4622      	mov	r2, r4
 8007222:	6864      	ldr	r4, [r4, #4]
 8007224:	e7cc      	b.n	80071c0 <_malloc_r+0x2c>
 8007226:	1cc4      	adds	r4, r0, #3
 8007228:	f024 0403 	bic.w	r4, r4, #3
 800722c:	42a0      	cmp	r0, r4
 800722e:	d0e3      	beq.n	80071f8 <_malloc_r+0x64>
 8007230:	1a21      	subs	r1, r4, r0
 8007232:	4630      	mov	r0, r6
 8007234:	f000 f82e 	bl	8007294 <_sbrk_r>
 8007238:	3001      	adds	r0, #1
 800723a:	d1dd      	bne.n	80071f8 <_malloc_r+0x64>
 800723c:	e7cf      	b.n	80071de <_malloc_r+0x4a>
 800723e:	bf00      	nop
 8007240:	20000094 	.word	0x20000094
 8007244:	20000098 	.word	0x20000098

08007248 <_realloc_r>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	4607      	mov	r7, r0
 800724c:	4614      	mov	r4, r2
 800724e:	460e      	mov	r6, r1
 8007250:	b921      	cbnz	r1, 800725c <_realloc_r+0x14>
 8007252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007256:	4611      	mov	r1, r2
 8007258:	f7ff bf9c 	b.w	8007194 <_malloc_r>
 800725c:	b922      	cbnz	r2, 8007268 <_realloc_r+0x20>
 800725e:	f7ff ff49 	bl	80070f4 <_free_r>
 8007262:	4625      	mov	r5, r4
 8007264:	4628      	mov	r0, r5
 8007266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007268:	f000 f830 	bl	80072cc <_malloc_usable_size_r>
 800726c:	42a0      	cmp	r0, r4
 800726e:	d20f      	bcs.n	8007290 <_realloc_r+0x48>
 8007270:	4621      	mov	r1, r4
 8007272:	4638      	mov	r0, r7
 8007274:	f7ff ff8e 	bl	8007194 <_malloc_r>
 8007278:	4605      	mov	r5, r0
 800727a:	2800      	cmp	r0, #0
 800727c:	d0f2      	beq.n	8007264 <_realloc_r+0x1c>
 800727e:	4631      	mov	r1, r6
 8007280:	4622      	mov	r2, r4
 8007282:	f7ff ff0f 	bl	80070a4 <memcpy>
 8007286:	4631      	mov	r1, r6
 8007288:	4638      	mov	r0, r7
 800728a:	f7ff ff33 	bl	80070f4 <_free_r>
 800728e:	e7e9      	b.n	8007264 <_realloc_r+0x1c>
 8007290:	4635      	mov	r5, r6
 8007292:	e7e7      	b.n	8007264 <_realloc_r+0x1c>

08007294 <_sbrk_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d06      	ldr	r5, [pc, #24]	; (80072b0 <_sbrk_r+0x1c>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	f7fa fa86 	bl	80017b0 <_sbrk>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_sbrk_r+0x1a>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_sbrk_r+0x1a>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	20000694 	.word	0x20000694

080072b4 <__malloc_lock>:
 80072b4:	4801      	ldr	r0, [pc, #4]	; (80072bc <__malloc_lock+0x8>)
 80072b6:	f000 b811 	b.w	80072dc <__retarget_lock_acquire_recursive>
 80072ba:	bf00      	nop
 80072bc:	2000069c 	.word	0x2000069c

080072c0 <__malloc_unlock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	; (80072c8 <__malloc_unlock+0x8>)
 80072c2:	f000 b80c 	b.w	80072de <__retarget_lock_release_recursive>
 80072c6:	bf00      	nop
 80072c8:	2000069c 	.word	0x2000069c

080072cc <_malloc_usable_size_r>:
 80072cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d0:	1f18      	subs	r0, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bfbc      	itt	lt
 80072d6:	580b      	ldrlt	r3, [r1, r0]
 80072d8:	18c0      	addlt	r0, r0, r3
 80072da:	4770      	bx	lr

080072dc <__retarget_lock_acquire_recursive>:
 80072dc:	4770      	bx	lr

080072de <__retarget_lock_release_recursive>:
 80072de:	4770      	bx	lr

080072e0 <_init>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	bf00      	nop
 80072e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e6:	bc08      	pop	{r3}
 80072e8:	469e      	mov	lr, r3
 80072ea:	4770      	bx	lr

080072ec <_fini>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	bf00      	nop
 80072f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f2:	bc08      	pop	{r3}
 80072f4:	469e      	mov	lr, r3
 80072f6:	4770      	bx	lr
